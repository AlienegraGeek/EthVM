version: '3.6'

networks:
  web:
    external: true
  back:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/24

volumes:
  redis-volume:
  mongodb-volume:
  geth-volume:

services:
  traefik:
    image: traefik:1.6.2-alpine
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./provisioners/docker/config/traefik/traefik.dev.toml:/etc/traefik/traefik.toml
    networks:
      - web
      - back
    ports:
      - 80:80
      - 81:81

  ethvm:
    build:
      context: ./apps/ethvm
      dockerfile: ../../provisioners/docker/images/dev/ethvm/Dockerfile
    restart: unless-stopped
    volumes:
      - ./apps/ethvm:/var/ethvm
    networks:
      - back
    labels:
      - 'traefik.enable=true'
      - 'traefik.default.protocol=http'
      - 'traefik.frontend.rule=Host:ethvm.lan'
      - 'traefik.frontend.headers.customResponseHeaders=Access-Control-Allow-Origin:*||Access-Control-Allow-Credentials:true'
      - 'traefik.frontend.passHostHeader=true'
      - 'traefik.backend=ethvm'
      - 'traefik.port=8080'

  server:
    build:
      context: ./apps/server
      dockerfile: ../../provisioners/docker/images/dev/server/Dockerfile
    restart: unless-stopped
    volumes:
      - ./apps/server:/var/ethvm-server
    depends_on:
      - geth
      - redis
      - mongodb
    networks:
      - back
    labels:
      - 'traefik.enable=true'
      - 'traefik.default.protocol=http'
      - 'traefik.frontend.rule=Host:ws.ethvm.lan'
      - 'traefik.frontend.headers.customResponseHeaders=Access-Control-Allow-Origin:http://ethvm.lan||Access-Control-Allow-Credentials:true'
      - 'traefik.frontend.passHostHeader=true'
      - 'traefik.backend=server'
      - 'traefik.port=3000'
    environment:
      - ETHVM_DATA_STORE_REDIS_HOST=redis
      - ETHVM_ETH_TRIE_DB_REDIS_HOST=redis

  redis:
    image: redis:4.0.9-alpine
    restart: unless-stopped
    volumes:
      - redis-volume:/data
    networks:
      - back
    labels:
      - 'traefik.enable=true'
      - 'traefik.default.protocol=http'
      - 'traefik.frontend.rule=Host:redis.ethvm.lan'
      - 'traefik.port=6379'
      - 'traefik.backend=redis'
    command: >
      sh -c "redis-server && redis-cli flushall"

  mongodb:
    image: mvertes/alpine-mongo:4.0.1-0
    restart: unless-stopped
    volumes:
      - mongodb-volume:/data/db
    networks:
      - back
    ports:
      - 27017:27017
    labels:
      - 'traefik.enable=true'
      - 'traefik.default.protocol=http'
      - 'traefik.frontend.rule=Host:mongo.ethvm.lan'
      - 'traefik.port=27017'
      - 'traefik.backend=mongodb'

  zookeeper:
    image: confluentinc/cp-zookeeper:5.0.0
    networks:
      back:
        ipv4_address: 172.25.0.103
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: 'server.1=zookeeper:2888:3888'
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: confluentinc/cp-kafka:5.0.0
    restart: unless-stopped
    depends_on:
      - zookeeper
    networks:
      back:
        ipv4_address: 172.25.0.104
    ports:
      - 9092:9092
    environment:
      KAFKA_ADVERTISED_HOST_NAME: 'kafka'
      KAFKA_ADVERTISED_LISTENERS: 'DOCKER://kafka:9092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'DOCKER:PLAINTEXT'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'DOCKER'
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: 'kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      CONFLUENT_SUPPORT_METRICS_ENABLE: 'false'

  kafka-schema-registry:
    image: confluentinc/cp-schema-registry:5.0.0
    restart: unless-stopped
    depends_on:
      - zookeeper
      - kafka
    networks:
      - back
    volumes:
      - ./apps/avro-schemas/:/avro-schemas/
    ports:
      - 8081:8081
    labels:
      - 'traefik.enable=true'
      - 'traefik.default.protocol=http'
      - 'traefik.frontend.rule=Host:kafka-schema-registry.ethvm.lan'
      - 'traefik.port=8081'
      - 'traefik.backend=kafka-schema-registry'
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'PLAINTEXT://kafka:9092'
      SCHEMA_REGISTRY_HOST_NAME: kafka-schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: 'INFO'
      SCHEMA_REGISTRY_LOG4J_LOGGERS: 'org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR'

  kafka-connect:
    image: enkryptio/kafka-connect:latest
    restart: unless-stopped
    depends_on:
      - zookeeper
      - kafka
      - mongodb
      - kafka-schema-registry
    networks:
      - back
    labels:
      - 'traefik.enable=true'
      - 'traefik.default.protocol=http'
      - 'traefik.frontend.rule=Host:kafka-connect.ethvm.lan'
      - 'traefik.port=8083'
      - 'traefik.backend=kafka-connect'
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'PLAINTEXT://kafka:9092'
      CONNECT_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      CONNECT_REST_ADVERTISED_HOST_NAME: 'kafka-connect'
      CONNECT_LOG4J_ROOT_LOGLEVEL: 'INFO'
      CONNECT_LOG4J_LOGGERS: 'org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR'
      CONNECT_GROUP_ID: 'ethvm-mongo-sink'
      CONNECT_KEY_CONVERTER: 'org.apache.kafka.connect.storage.StringConverter'
      CONNECT_VALUE_CONVERTER: 'io.confluent.connect.avro.AvroConverter'
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://kafka-schema-registry:8081'
      CONNECT_OFFSET_STORAGE_FILE_FILENAME: 'ethvm'
      CONNECT_PLUGIN_PATH: '/usr/share/java,/usr/share/confluent-hub-components'
      CONNECTOR_NAME: 'mongodb-blocks-sink'
      CONNECTOR_CONNECTOR_CLASS: 'at.grahsl.kafka.connect.mongodb.MongoDbSinkConnector'
      CONNECTOR_TOPICS: 'blocks'
      CONNECTOR_TASKS_MAX: 1
      CONNECTOR_MONGODB_CONNECTION_URI: 'mongodb://mongodb:27017/ethvm?w=1&journal=true'
      CONNECTOR_MONGODB_COLLECTION: 'blocks'

  geth:
    # image: enkryptio/go-ethereum:latest
    # Uncomment this if you want to compile directly geth
    build:
      context: ./apps/eth
    restart: unless-stopped
    volumes:
      - geth-volume:/geth
      - ./provisioners/docker/config/geth/ropsten-static-nodes.json:/geth/static-nodes.json
      - ./provisioners/docker/config/geth/tracer.js:/geth/tracer.js
    networks:
      back:
        ipv4_address: 172.25.0.102
    ports:
      - 8545:8545
    labels:
      - 'traefik.enable=true'
      - 'traefik.default.protocol=http'
      - 'traefik.frontend.rule=Host:geth.ethvm.lan'
      - 'traefik.port=8545'
      - 'traefik.backend=geth'
    command: geth --datadir '/geth' --testnet --verbosity 5 --identity geth --ethvm --ethvm-kafka-schema-registry-url 'http://kafka-schema-registry:8081' --ethvm-brokers 'kafka:9092' --ethvm-tracer-file '/geth/tracer.js' --gcmode archive --rpc --rpcaddr '0.0.0.0' --rpccorsdomain '*' --rpcapi 'admin,personal,db,eth,net,web3,txpool,miner' --syncmode full --nat 'extip:172.25.0.102' --nousb --nodiscover --maxpeers 2
