version: '3.6'

networks:
  web:
    external: true
  back:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/24

services:
  traefik:
    image: traefik:1.6.2-alpine
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./provisioners/docker/config/traefik/traefik.dev.toml:/etc/traefik/traefik.toml
    networks:
      - web
      - back
    ports:
      - 80:80
      - 81:81

  ethvm:
    build:
      context: ./apps/ethvm
      dockerfile: ../../provisioners/docker/images/dev/ethvm/Dockerfile
    restart: unless-stopped
    volumes:
      - ./apps/ethvm:/var/ethvm
    networks:
      - back
    labels:
      - 'traefik.enable=true'
      - 'traefik.default.protocol=http'
      - 'traefik.frontend.rule=Host:ethvm.lan'
      - 'traefik.frontend.headers.customResponseHeaders=Access-Control-Allow-Origin:*||Access-Control-Allow-Credentials:true'
      - 'traefik.frontend.passHostHeader=true'
      - 'traefik.backend=ethvm'
      - 'traefik.port=8080'

  server:
    build:
      context: ./apps/server
      dockerfile: ../../provisioners/docker/images/dev/server/Dockerfile
    restart: unless-stopped
    volumes:
      - ./apps/server:/var/ethvm-server
    depends_on:
      - geth
      - redis
      - rethinkdb
    networks:
      - back
    labels:
      - 'traefik.enable=true'
      - 'traefik.default.protocol=http'
      - 'traefik.frontend.rule=Host:ws.ethvm.lan'
      - 'traefik.frontend.headers.customResponseHeaders=Access-Control-Allow-Origin:http://ethvm.lan||Access-Control-Allow-Credentials:true'
      - 'traefik.frontend.passHostHeader=true'
      - 'traefik.backend=server'
    environment:
      - ETHVM_DATA_STORE_REDIS_HOST=redis
      - ETHVM_ETH_TRIE_DB_REDIS_HOST=redis
      - ETHVM_RETHINK_DB_HOST=rethinkdb

  redis:
    image: redis:4.0.9-alpine
    restart: unless-stopped
    networks:
      - back
    labels:
      - 'traefik.enable=true'
      - 'traefik.default.protocol=http'
      - 'traefik.frontend.rule=Host:redis.ethvm.lan'
      - 'traefik.port=6379'
      - 'traefik.backend=redis'
    command: >
      sh -c "redis-server && redis-cli flushall"

  rethinkdb:
    image: rethinkdb:2.3.6
    restart: unless-stopped
    networks:
      - back
    labels:
      - 'traefik.enable=true'
      - 'traefik.default.protocol=http'
      - 'traefik.frontend.rule=Host:rethink.ethvm.lan'
      - 'traefik.port=28015'
      - 'traefik.backend=rethinkdb'
      - 'traefik.dashboard.frontend.rule=Host:rethink.dashboard.ethvm.lan'
      - 'traefik.dashboard.protocol=http'
      - 'traefik.dashboard.backend=ethvm_socket_server'
      - 'traefik.dashboard.port=8080'
    command: >
      bash -c "rm -rf /data/* && rethinkdb --bind all"

  mongodb:
    image: mvertes/alpine-mongo:4.0.1-0
    restart: unless-stopped
    networks:
      - back

  zookeeper:
    image: confluentinc/cp-zookeeper:5.0.0
    networks:
      back:
        ipv4_address: 172.25.0.103
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: 'server.1=zookeeper:2888:3888'
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: confluentinc/cp-kafka:5.0.0
    restart: unless-stopped
    depends_on:
      - zookeeper
    networks:
      back:
        ipv4_address: 172.25.0.104
    environment:
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: 'LISTENER_DOCKER_INTERNAL://kafka:9092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'LISTENER_DOCKER_INTERNAL:PLAINTEXT'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'LISTENER_DOCKER_INTERNAL'
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: 'kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      CONFLUENT_SUPPORT_METRICS_ENABLE: 'false'

  kafka_connect:
    image: enkryptio/kafka-connect:latest
    restart: unless-stopped
    depends_on:
      - zookeeper
      - kafka
    networks:
      - back
    labels:
      - 'traefik.enable=true'
      - 'traefik.default.protocol=http'
      - 'traefik.frontend.rule=Host:kafka-connect.ethvm.lan'
      - 'traefik.port=8888'
      - 'traefik.backend=kafka_connect'
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'PLAINTEXT://kafka:9092'
      CONNECT_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      CONNECT_REST_PORT: 8888
      CONNECT_GROUP_ID: 'ethvm-mongo-sink'
      CONNECT_CONFIG_STORAGE_TOPIC: 'ethvm-mongo-sink.config'
      CONNECT_OFFSET_STORAGE_TOPIC: 'ethvm-mongo-sink.offsets'
      CONNECT_STATUS_STORAGE_TOPIC: 'ethvm-mongo-sink.status'
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
      CONNECT_VALUE_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://localhost:8081'
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://localhost:8081'
      CONNECT_INTERNAL_KEY_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
      CONNECT_INTERNAL_VALUE_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
      CONNECT_REST_ADVERTISED_HOST_NAME: 'kafka-connect'
      CONNECT_LOG4J_ROOT_LOGLEVEL: 'INFO'
      CONNECT_CONNECTOR_CLASS: 'at.grahsl.kafka.connect.mongodb.MongoDbSinkConnector'
      CONNECT_MONGODB_CONNECTION_URI: 'mongodb://mongodb:27017/ethvm?w=1&journal=true'
      CONNECT_MONGODB_COLLECTION: 'eth'

  geth_miner:
    image: enkryptio/go-ethereum:latest
    # Uncomment this if you want to compile directly geth
    # build:
    #   context: ./apps/eth
    restart: unless-stopped
    volumes:
      - ./provisioners/docker/config/geth/genesis.json:/genesis.json
      - ./provisioners/docker/config/geth/keystore/:/keystore/
    networks:
      back:
        ipv4_address: 172.25.0.101
    command:
      - /bin/zsh
      - -c
      - |
        rm -rf /geth && mkdir -p /geth/keystore
        cp -a /keystore/. /geth/keystore/
        geth --datadir '/geth' init /genesis.json
        geth --datadir '/geth' --networkid 1234 --identity geth_miner --mine --minerthreads 1 --nousb --unlock '84baabad835e6ca9252658cd6eae0152f6330c09' --rpc --rpcaddr '0.0.0.0' --password =(echo '123456789') --nodiscover --maxpeers 2 --nodekeyhex '08f0e1dee5c1b4645f3331a566009e41a4514b6cd28656d63d0449ecf812812b'

  geth:
    image: enkryptio/go-ethereum:latest
    # Uncomment this if you want to compile directly geth
    # build:
    #   context: ./apps/eth
    restart: unless-stopped
    depends_on:
      - geth_miner
    volumes:
      - ./provisioners/docker/config/geth/genesis.json:/genesis.json
      - ./provisioners/docker/config/geth/keystore/:/keystore/
      - ./provisioners/docker/config/geth/static-nodes.json:/static-nodes.json
    networks:
      back:
        ipv4_address: 172.25.0.102
    ports:
      - 8545:8545
    labels:
      - 'traefik.enable=true'
      - 'traefik.default.protocol=http'
      - 'traefik.frontend.rule=Host:geth.ethvm.lan'
      - 'traefik.port=9545'
      - 'traefik.backend=geth'
    command:
      - /bin/zsh
      - -c
      - |
        rm -rf /geth && mkdir -p /geth/keystore
        cp -a /keystore/. /geth/keystore/
        cp /static-nodes.json /geth/
        geth --datadir '/geth' --ethvm init /genesis.json
        geth --datadir '/geth' --verbosity 6 --networkid 1234 --identity geth --ethvm --ethvm-brokers 'kafka:9092' --gcmode archive --rpc --rpcaddr '0.0.0.0' --rpccorsdomain '*' --rpcapi 'admin,personal,db,eth,net,web3,txpool,miner' --syncmode full --nat 'extip:172.25.0.102' --nousb --nodiscover --maxpeers 2
