@namespace("com.ethvm.avro.processing")
protocol Processing {

  import idl "common.avdl";
  import idl "capture.avdl";

  enum TokenType {
    ETHER, ERC20, ERC721
  }

  enum BalanceDeltaType {
    PREMINE_BALANCE,
    HARD_FORK,
    BLOCK_REWARD,
    UNCLE_REWARD,
    MINER_FEE,
    TX_FEE,
    TX,
    INTERNAL_TX,
    CONTRACT_CREATION,
    CONTRACT_DESTRUCTION,
    TOKEN_TRANSFER
  }

  record TraceLocationRecord {
    timestamp_ms timestamp = 0;
    union { null, string } blockHash = null;
    union { null, decimal(80,0) } blockNumber = null;
    union { null, string } transactionHash = null;
    union { null, int } transactionIndex = null;
    union { null, int } logIndex = null;
    union { null, array<int> } traceAddress = null;
  }

  record BalanceDeltaRecord {

    string address;
    union { null, string } contractAddress = null;
    union { null, string } counterpartAddress = null;

    TokenType tokenType;
    BalanceDeltaType deltaType;

    union { null, decimal(80, 0) } amount = null;
    union { null, decimal(80, 0) } tokenId = null;

    TraceLocationRecord traceLocation;

  }

  record BalanceRecord {
    string address;
    union { null, string } contractAddress;
    decimal(80, 0) blockNumber;
    union { null, decimal(80, 0) } balance = null;
    union { null, decimal(80, 0) } tokenId = null;
  }

// metrics

  record BlockMetricsHeaderRecord {
    decimal(80, 0) number;
    union { null, int } blockTime = null;

    int numUncles;
    decimal(80, 0) difficulty;
    decimal(80, 0) totalDifficulty;

    timestamp_ms timestamp;
  }

  record MetricRecord {

    union { null, int } `int` = null;
    union { null, long } `long` = null;
    union { null, float } `float` = null;
    union { null, double } `double` = null;
    union { null, bytes } `bigInteger` = null;

  }

// address metadata

  record TransactionCountDeltaRecord {
    timestamp_ms timestamp = 0;
    string address;
    int in = 0;
    int out = 0;
  }

  record TransactionCountRecord {
    timestamp_ms timestamp = 0;
    long totalIn = 0;
    long totalOut = 0;
    long total = 0;
  }

  record CanonicalCountRecord {
    long count;
  }

}

