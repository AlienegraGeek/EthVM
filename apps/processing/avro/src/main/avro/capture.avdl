@namespace("io.enkrypt.avro.capture")
protocol Capture {

  import idl "common.avdl";

  record BlockKeyRecord {
    bytes number;
  }

  record UncleKeyRecord {
    io.enkrypt.avro.common.Data32 uncleHash;
  }

  record TransactionKeyRecord {
    io.enkrypt.avro.common.Data32 txHash;
  }

  record LogRecord {

    io.enkrypt.avro.common.Data20 address;
    bytes data;
    array<io.enkrypt.avro.common.Data32> topics = [];

  }

  record InternalTransactionRecord {

    bytes nonce;                                                    // integer the number of transactions made by the sender prior to this one.

    union { null, io.enkrypt.avro.common.Data32 } blockHash = null; // hash of the block where this transaction was in
    union { null, bytes } blockNumber = null;                       // integer block number where this transaction was in
    union { null, int } transactionIndex = null;                    // integer of the transactions index position in the block
    union { null, int } internalTransactionIndex = null;            // integer of the internal transaction index within the transaction

    io.enkrypt.avro.common.Data20 from;                             // address of the sender
    union { null, io.enkrypt.avro.common.Data20 } to = null;        // address of the receiver. null when its a contract creation transaction.

    bytes value;                                                    // value transferred in Wei.
    bytes gasPrice;                                                 // gas price provided by the sender in Wei.
    bytes gas;                                                      // gas provided by the sender.

    union { null, bytes } input = null;                             // the data send along with the transaction.

    union { null, io.enkrypt.avro.common.Data20 } creates = null;   // created contract hash
    union { null, int } chainId = null;                             // chain id of the transaction, if any
    union { null, bytes } raw = null;                               // raw transaction data

    int depth;
    boolean rejected;
    union { null, string } note = null;
    union { null, bytes } parentHash = null;

  }

  record TransactionReceiptRecord {

    union { null, io.enkrypt.avro.common.Data32 } blockHash = null;         // hash of the block where this transaction was in
    union { null, bytes } blockNumber = null;                               // integer block number where this transaction was in

    union { null, io.enkrypt.avro.common.Data32 } transactionHash = null;   // hash of the transaction this receipt is for
    union { null, int } transactionIndex = null;                            // integer of the transactions index position in the block

    union { null, io.enkrypt.avro.common.Data20 } contractAddress = null;   // The contract address created, if the transaction was a contract creation, otherwise null.

    bytes cumulativeGasUsed;                                                // The total amount of gas used when this transaction was executed in the block.
    bytes gasUsed;                                                          // The amount of gas used by this specific transaction alone.

    array<LogRecord> logs = [];                                             // Array of log objects, which this transaction generated.
    io.enkrypt.avro.common.Data256 logsBloom;                               // A bloom filter of logs/events generated by contracts during transaction execution. Used to efficiently rule out transactions without expected logs.

    union { null, io.enkrypt.avro.common.Data32 } root = null;              // Merkle root of the state trie after the transaction has been executed (optional after Byzantium hard fork EIP609)
    union { null, bytes } status = null;                                    // Quantity - 0x0 indicates transaction failure , 0x1 indicates transaction success. Set for blocks mined after Byzantium hard fork EIP609, null before.
    union { null, string } `error` = null;

    array<InternalTransactionRecord> internalTxs = [];
    array<io.enkrypt.avro.common.Data20> deletedAccounts = [];              // contract suicides

    union { null, bytes } raw = null;                                       // raw rlp transaction data
  }

  record TransactionRecord {

    io.enkrypt.avro.common.Data32 hash;                             // hash of the transaction.
    bytes nonce;                                                    // integer the number of transactions made by the sender prior to this one.

    union { null, io.enkrypt.avro.common.Data32 } blockHash = null; // hash of the block where this transaction was in
    union { null, bytes } blockNumber = null;                       // integer block number where this transaction was in
    union { null, int } transactionIndex = null;                    // integer of the transactions index position in the block, null when it's pending

    io.enkrypt.avro.common.Data20 from;                             // address of the sender
    union { null, io.enkrypt.avro.common.Data20 } to = null;        // address of the receiver. null when its a contract creation transaction.

    bytes value;                                                    // value transferred in Wei.
    bytes gasPrice;                                                 // gas price provided by the sender in Wei.
    bytes gas;                                                      // gas provided by the sender.

    union { null, bytes } input = null;                             // the data send along with the transaction.

    io.enkrypt.avro.common.Data1 v;                                 // integer - the standardised V field of the signature
    bytes r;                                                        // integer
    bytes s;                                                        // integer

    union { null, io.enkrypt.avro.common.Data20 } creates = null;  // created contract hash

    union { null, int } chainId = null;                             // chain id of the transaction, if any
    union { null, bytes } raw = null;                               // raw rlp transaction data

    union { null, long } timestamp = null;                        // block timestamp in seconds since epoch

    union { null, TransactionReceiptRecord } receipt = null;      // optional embedded receipt
  }

  record BlockRewardRecord {
    io.enkrypt.avro.common.Data20 address;
    bytes reward;
  }

  record BlockHeaderRecord {

    union { null, bytes } number = null;                          // The block number. null when its pending block

    io.enkrypt.avro.common.Data32 hash;                           // hash of the block. null when its pending block
    io.enkrypt.avro.common.Data32 parentHash;                     // hash of the parent block
    union { null, io.enkrypt.avro.common.Data8 } nonce;           // hash of the generated proof-of-work. null when its pending block. Missing in case of PoA.
    io.enkrypt.avro.common.Data32 sha3Uncles;                     // SHA3 of the uncles data in the block
    io.enkrypt.avro.common.Data256 logsBloom;                     // the bloom filter for the logs of the block. null when its pending block
    io.enkrypt.avro.common.Data32 transactionsRoot;               // the root of the transaction trie of the block
    io.enkrypt.avro.common.Data32 stateRoot;                      // the root of the final state trie of the block
    io.enkrypt.avro.common.Data32 receiptsRoot;                   // the root of the receipts trie of the block

    io.enkrypt.avro.common.Data20 @aliases(["miner"]) author;     // the address of the author of the block (the beneficiary to whom the mining rewards were given)

    bytes difficulty;                                             // integer of the difficulty for this block
    union { null, bytes } extraData = null;                       // the ‘extra data’ field of this block

    bytes gasLimit;                                               // the maximum gas allowed in this block
    bytes gasUsed;                                                // the total used gas by all transactions in this block

    long timestamp;                                               // the unix timestamp for when the block was collated

    union { null, bytes } blockNumber = null;                     // block number this header relates to when an uncle
    union { null, int } uncleIndex = null;                        // index in the uncles array of this header if it was included in the uncles list
    union { null, bytes } uncleReward = null;                     // block reward for inclusion of this uncle header

    union { null, bytes } raw = null;                             // raw block data
  }

  record PremineBalanceRecord {
    io.enkrypt.avro.common.Data20 address;
    bytes balance;
  }

  record BlockRecord {

    BlockHeaderRecord header;

    bytes totalDifficulty;                                        // integer of the total difficulty of the chain until this block

    array<TransactionRecord> transactions = [];                   // array of transaction objects
    array<TransactionReceiptRecord> transactionReceipts = [];     // array of transaction receipts

    io.enkrypt.avro.common.Data32 unclesHash;                     // hash of uncles
    array<BlockHeaderRecord> uncles = [];                         // array of uncle headers

    array<BlockRewardRecord> rewards = [];                        // coinbase and uncle rewards

    boolean reverse = false;                                      // whether this block summary should be applied or reversed from cumulative state
    int numPendingTxs = 0;                                        // count as of time of processing

    array<PremineBalanceRecord> premineBalances = [];             // premine balances from genesis block

    union { null, bytes } raw = null;                             // raw block data
  }

}
