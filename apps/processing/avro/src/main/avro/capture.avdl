@namespace("io.enkrypt.avro.capture")
protocol Capture {

  import idl "common.avdl";

  record CanonicalKeyRecord {
    string number;
  }

  record CanonicalRecord {
    string blockHash;
    array<string> txHashes;
  }

  record LogRecord {
    string address;
    string data;
    array<string> topics = [];

  }

  record TraceRewardActionRecord {
    string author;
    string value;
    string rewardType;
  }

  record TraceCallActionRecord {
    string callType;
    string from;
    union { null, string } to = null;
    string gas;
    union { null, bytes } input = null;
    string value;
  }

  record TraceCreateActionRecord {
    string from;
    string gas;
    string value;
    string init;
  }

  record TraceDestroyActionRecord {
    string address;
    string balance;
    string refundAddress;
  }

  record TraceResultRecord {
    union{ null, string } address = null;
    union { null, string } code = null;
    string gasUsed;
    union { null, string } output = null;
  }

  record TraceRecord {

    union { TraceRewardActionRecord, TraceCallActionRecord, TraceCreateActionRecord, TraceDestroyActionRecord } action;
    union { null, string } `error` = null;
    union { null, TraceResultRecord } result = null;
    int subtraces;
    array<int> traceAddress;
    string type;
    string blockHash;
    string blockNumber;
    union { null, string } transactionHash;
    union { null, int } transactionPosition;

  }

  record TraceListRecord {
    array<TraceRecord> traces;
  }

  record TransactionReceiptRecord {

    union { null, string } blockHash = null;         // hash of the block where this transaction was in
    union { null, string } blockNumber = null;                               // integer block number where this transaction was in

    union { null, string } transactionHash = null;   // hash of the transaction this receipt is for
    union { null, int } transactionIndex = null;                            // integer of the transactions index position in the block

    union { null, string } contractAddress = null;   // The contract address created, if the transaction was a contract creation, otherwise null.

    string cumulativeGasUsed;                                                // The total amount of gas used when this transaction was executed in the block.
    string gasUsed;                                                          // The amount of gas used by this specific transaction alone.

    array<LogRecord> logs = [];                                             // Array of log objects, which this transaction generated.
    string logsBloom;                               // A bloom filter of logs/events generated by contracts during transaction execution. Used to efficiently rule out transactions without expected logs.

    union { null, string } root = null;              // Merkle root of the state trie after the transaction has been executed (optional after Byzantium hard fork EIP609)
    union { null, bytes } status = null;                                    // Quantity - 0x0 indicates transaction failure , 0x1 indicates transaction success. Set for blocks mined after Byzantium hard fork EIP609, null before.
  }

  record TransactionReceiptListRecord {
    array<TransactionReceiptRecord> receipts;
  }

  record TransactionRecord {

    string hash;                             // hash of the transaction.
    string nonce;                                                    // integer the number of transactions made by the sender prior to this one.

    union { null, string } blockHash = null; // hash of the block where this transaction was in
    union { null, string } blockNumber = null;                       // integer block number where this transaction was in
    union { null, int } transactionIndex = null;                    // integer of the transactions index position in the block, null when it's pending

    string from;                             // address of the sender
    union { null, string } to = null;        // address of the receiver. null when its a contract creation transaction.

    string value;                                                    // value transferred in Wei.
    string gasPrice;                                                 // gas price provided by the sender in Wei.
    string gas;                                                      // gas provided by the sender.

    union { null, bytes } input = null;                             // the data send along with the transaction.

    long v;                                                         // integer - the standardised V field of the signature
    string r;                                                        // integer
    string s;                                                        // integer

    union { null, string } creates = null;  // created contract hash

    union { null, long } chainId = null;                           // chain id of the transaction, if any
    union { null, bytes } raw = null;                               // raw rlp transaction data

    union { null, long } timestamp = null;                        // block timestamp in seconds since epoch

    union { null, TransactionReceiptRecord } receipt = null;      // optional embedded receipt
  }

  record TransactionListRecord {
    array<TransactionRecord> transactions;
  }

  record BlockHeaderRecord {

    union { null, string } number = null;                          // The block number. null when its pending block

    string hash;                           // hash of the block. null when its pending block
    string parentHash;                     // hash of the parent block
    union { null, string } nonce;           // hash of the generated proof-of-work. null when its pending block. Missing in case of PoA.
    string sha3Uncles;                     // SHA3 of the uncles data in the block
    string logsBloom;                     // the bloom filter for the logs of the block. null when its pending block
    string transactionsRoot;               // the root of the transaction trie of the block
    string stateRoot;                      // the root of the final state trie of the block
    string receiptsRoot;                   // the root of the receipts trie of the block

    string @aliases(["miner"]) author;     // the address of the author of the block (the beneficiary to whom the mining rewards were given)

    string difficulty;                                             // integer of the difficulty for this block
    union { null, string } extraData = null;                       // the ‘extra data’ field of this block

    string gasLimit;                                               // the maximum gas allowed in this block
    string gasUsed;                                                // the total used gas by all transactions in this block

    long timestamp;                                               // the unix timestamp for when the block was collated
    long size;

    union { null, string } nephewNumber = null;                     // block number this header relates to when an uncle
    union { null, int } uncleIndex = null;                        // index in the uncles array of this header if it was included in the uncles list
    union { null, string } uncleReward = null;                     // block reward for inclusion of this uncle header

    array<string> uncles = [];
    string totalDifficulty;
    union { null, long } blockTime = null;

  }

}
