/*
 * This file is generated by jOOQ.
 */
package com.ethvm.db.tables;


import com.ethvm.db.Indexes;
import com.ethvm.db.Keys;
import com.ethvm.db.Public;
import com.ethvm.db.tables.records.UncleRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Uncle extends TableImpl<UncleRecord> {

    private static final long serialVersionUID = -88103738;

    /**
     * The reference instance of <code>public.uncle</code>
     */
    public static final Uncle UNCLE = new Uncle();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UncleRecord> getRecordType() {
        return UncleRecord.class;
    }

    /**
     * The column <code>public.uncle.hash</code>.
     */
    public final TableField<UncleRecord, String> HASH = createField("hash", org.jooq.impl.SQLDataType.CHAR(66).nullable(false), this, "");

    /**
     * The column <code>public.uncle.index</code>.
     */
    public final TableField<UncleRecord, Integer> INDEX = createField("index", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.uncle.nephew_hash</code>.
     */
    public final TableField<UncleRecord, String> NEPHEW_HASH = createField("nephew_hash", org.jooq.impl.SQLDataType.CHAR(66).nullable(false), this, "");

    /**
     * The column <code>public.uncle.number</code>.
     */
    public final TableField<UncleRecord, BigDecimal> NUMBER = createField("number", org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>public.uncle.height</code>.
     */
    public final TableField<UncleRecord, BigDecimal> HEIGHT = createField("height", org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>public.uncle.parent_hash</code>.
     */
    public final TableField<UncleRecord, String> PARENT_HASH = createField("parent_hash", org.jooq.impl.SQLDataType.CHAR(66).nullable(false), this, "");

    /**
     * The column <code>public.uncle.nonce</code>.
     */
    public final TableField<UncleRecord, BigDecimal> NONCE = createField("nonce", org.jooq.impl.SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.uncle.sha3_uncles</code>.
     */
    public final TableField<UncleRecord, String> SHA3_UNCLES = createField("sha3_uncles", org.jooq.impl.SQLDataType.CHAR(66).nullable(false), this, "");

    /**
     * The column <code>public.uncle.logs_bloom</code>.
     */
    public final TableField<UncleRecord, String> LOGS_BLOOM = createField("logs_bloom", org.jooq.impl.SQLDataType.CHAR(514).nullable(false), this, "");

    /**
     * The column <code>public.uncle.transactions_root</code>.
     */
    public final TableField<UncleRecord, String> TRANSACTIONS_ROOT = createField("transactions_root", org.jooq.impl.SQLDataType.CHAR(66).nullable(false), this, "");

    /**
     * The column <code>public.uncle.state_root</code>.
     */
    public final TableField<UncleRecord, String> STATE_ROOT = createField("state_root", org.jooq.impl.SQLDataType.CHAR(66).nullable(false), this, "");

    /**
     * The column <code>public.uncle.receipts_root</code>.
     */
    public final TableField<UncleRecord, String> RECEIPTS_ROOT = createField("receipts_root", org.jooq.impl.SQLDataType.CHAR(66).nullable(false), this, "");

    /**
     * The column <code>public.uncle.author</code>.
     */
    public final TableField<UncleRecord, String> AUTHOR = createField("author", org.jooq.impl.SQLDataType.CHAR(42).nullable(false), this, "");

    /**
     * The column <code>public.uncle.difficulty</code>.
     */
    public final TableField<UncleRecord, BigDecimal> DIFFICULTY = createField("difficulty", org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>public.uncle.total_difficulty</code>.
     */
    public final TableField<UncleRecord, BigDecimal> TOTAL_DIFFICULTY = createField("total_difficulty", org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>public.uncle.extra_data</code>.
     */
    public final TableField<UncleRecord, String> EXTRA_DATA = createField("extra_data", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.uncle.gas_limit</code>.
     */
    public final TableField<UncleRecord, BigDecimal> GAS_LIMIT = createField("gas_limit", org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>public.uncle.gas_used</code>.
     */
    public final TableField<UncleRecord, BigDecimal> GAS_USED = createField("gas_used", org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>public.uncle.timestamp</code>.
     */
    public final TableField<UncleRecord, Timestamp> TIMESTAMP = createField("timestamp", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.uncle.size</code>.
     */
    public final TableField<UncleRecord, Long> SIZE = createField("size", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>public.uncle</code> table reference
     */
    public Uncle() {
        this(DSL.name("uncle"), null);
    }

    /**
     * Create an aliased <code>public.uncle</code> table reference
     */
    public Uncle(String alias) {
        this(DSL.name(alias), UNCLE);
    }

    /**
     * Create an aliased <code>public.uncle</code> table reference
     */
    public Uncle(Name alias) {
        this(alias, UNCLE);
    }

    private Uncle(Name alias, Table<UncleRecord> aliased) {
        this(alias, aliased, null);
    }

    private Uncle(Name alias, Table<UncleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Uncle(Table<O> child, ForeignKey<O, UncleRecord> key) {
        super(child, key, UNCLE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDX_UNCLE_BY_HASH, Indexes.IDX_UNCLE_FOR_HASH, Indexes.UNCLE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UncleRecord> getPrimaryKey() {
        return Keys.UNCLE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UncleRecord>> getKeys() {
        return Arrays.<UniqueKey<UncleRecord>>asList(Keys.UNCLE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Uncle as(String alias) {
        return new Uncle(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Uncle as(Name alias) {
        return new Uncle(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Uncle rename(String name) {
        return new Uncle(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Uncle rename(Name name) {
        return new Uncle(name, null);
    }
}
