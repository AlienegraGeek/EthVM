/*
 * This file is generated by jOOQ.
 */
package com.ethvm.db.tables;


import com.ethvm.db.Public;
import com.ethvm.db.tables.records.ForkTraceRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ForkTrace extends TableImpl<ForkTraceRecord> {

    private static final long serialVersionUID = 1718428539;

    /**
     * The reference instance of <code>public.fork_trace</code>
     */
    public static final ForkTrace FORK_TRACE = new ForkTrace();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ForkTraceRecord> getRecordType() {
        return ForkTraceRecord.class;
    }

    /**
     * The column <code>public.fork_trace.block_number</code>.
     */
    public final TableField<ForkTraceRecord, BigDecimal> BLOCK_NUMBER = createField("block_number", org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>public.fork_trace.block_hash</code>.
     */
    public final TableField<ForkTraceRecord, String> BLOCK_HASH = createField("block_hash", org.jooq.impl.SQLDataType.CHAR(66).nullable(false), this, "");

    /**
     * The column <code>public.fork_trace.transaction_hash</code>.
     */
    public final TableField<ForkTraceRecord, String> TRANSACTION_HASH = createField("transaction_hash", org.jooq.impl.SQLDataType.CHAR(66), this, "");

    /**
     * The column <code>public.fork_trace.root_error</code>.
     */
    public final TableField<ForkTraceRecord, String> ROOT_ERROR = createField("root_error", org.jooq.impl.SQLDataType.VARCHAR(514), this, "");

    /**
     * The column <code>public.fork_trace.timestamp</code>.
     */
    public final TableField<ForkTraceRecord, Timestamp> TIMESTAMP = createField("timestamp", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.fork_trace.trace_count</code>.
     */
    public final TableField<ForkTraceRecord, Integer> TRACE_COUNT = createField("trace_count", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.fork_trace.traces</code>.
     */
    public final TableField<ForkTraceRecord, String> TRACES = createField("traces", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>public.fork_trace</code> table reference
     */
    public ForkTrace() {
        this(DSL.name("fork_trace"), null);
    }

    /**
     * Create an aliased <code>public.fork_trace</code> table reference
     */
    public ForkTrace(String alias) {
        this(DSL.name(alias), FORK_TRACE);
    }

    /**
     * Create an aliased <code>public.fork_trace</code> table reference
     */
    public ForkTrace(Name alias) {
        this(alias, FORK_TRACE);
    }

    private ForkTrace(Name alias, Table<ForkTraceRecord> aliased) {
        this(alias, aliased, null);
    }

    private ForkTrace(Name alias, Table<ForkTraceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ForkTrace(Table<O> child, ForeignKey<O, ForkTraceRecord> key) {
        super(child, key, FORK_TRACE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ForkTrace as(String alias) {
        return new ForkTrace(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ForkTrace as(Name alias) {
        return new ForkTrace(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ForkTrace rename(String name) {
        return new ForkTrace(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ForkTrace rename(Name name) {
        return new ForkTrace(name, null);
    }
}
