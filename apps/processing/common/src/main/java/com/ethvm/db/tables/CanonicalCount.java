/*
 * This file is generated by jOOQ.
 */
package com.ethvm.db.tables;


import com.ethvm.db.Indexes;
import com.ethvm.db.Keys;
import com.ethvm.db.Public;
import com.ethvm.db.tables.records.CanonicalCountRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CanonicalCount extends TableImpl<CanonicalCountRecord> {

    private static final long serialVersionUID = 1262976400;

    /**
     * The reference instance of <code>public.canonical_count</code>
     */
    public static final CanonicalCount CANONICAL_COUNT = new CanonicalCount();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CanonicalCountRecord> getRecordType() {
        return CanonicalCountRecord.class;
    }

    /**
     * The column <code>public.canonical_count.entity</code>.
     */
    public final TableField<CanonicalCountRecord, String> ENTITY = createField("entity", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>public.canonical_count.count</code>.
     */
    public final TableField<CanonicalCountRecord, Long> COUNT = createField("count", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.canonical_count.block_number</code>.
     */
    public final TableField<CanonicalCountRecord, BigDecimal> BLOCK_NUMBER = createField("block_number", org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * Create a <code>public.canonical_count</code> table reference
     */
    public CanonicalCount() {
        this(DSL.name("canonical_count"), null);
    }

    /**
     * Create an aliased <code>public.canonical_count</code> table reference
     */
    public CanonicalCount(String alias) {
        this(DSL.name(alias), CANONICAL_COUNT);
    }

    /**
     * Create an aliased <code>public.canonical_count</code> table reference
     */
    public CanonicalCount(Name alias) {
        this(alias, CANONICAL_COUNT);
    }

    private CanonicalCount(Name alias, Table<CanonicalCountRecord> aliased) {
        this(alias, aliased, null);
    }

    private CanonicalCount(Name alias, Table<CanonicalCountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> CanonicalCount(Table<O> child, ForeignKey<O, CanonicalCountRecord> key) {
        super(child, key, CANONICAL_COUNT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CANONICAL_COUNT_PKEY, Indexes.IDX_CANONICAL_COUNT_BY_BLOCK_NUMBER, Indexes.IDX_TX_COUNT, Indexes.IDX_UNCLE_COUNT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CanonicalCountRecord> getPrimaryKey() {
        return Keys.CANONICAL_COUNT_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CanonicalCountRecord>> getKeys() {
        return Arrays.<UniqueKey<CanonicalCountRecord>>asList(Keys.CANONICAL_COUNT_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CanonicalCount as(String alias) {
        return new CanonicalCount(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CanonicalCount as(Name alias) {
        return new CanonicalCount(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CanonicalCount rename(String name) {
        return new CanonicalCount(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CanonicalCount rename(Name name) {
        return new CanonicalCount(name, null);
    }
}
