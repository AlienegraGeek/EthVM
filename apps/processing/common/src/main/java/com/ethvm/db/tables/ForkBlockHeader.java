/*
 * This file is generated by jOOQ.
 */
package com.ethvm.db.tables;


import com.ethvm.db.Public;
import com.ethvm.db.tables.records.ForkBlockHeaderRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ForkBlockHeader extends TableImpl<ForkBlockHeaderRecord> {

    private static final long serialVersionUID = -539545837;

    /**
     * The reference instance of <code>public.fork_block_header</code>
     */
    public static final ForkBlockHeader FORK_BLOCK_HEADER = new ForkBlockHeader();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ForkBlockHeaderRecord> getRecordType() {
        return ForkBlockHeaderRecord.class;
    }

    /**
     * The column <code>public.fork_block_header.number</code>.
     */
    public final TableField<ForkBlockHeaderRecord, BigDecimal> NUMBER = createField("number", org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>public.fork_block_header.hash</code>.
     */
    public final TableField<ForkBlockHeaderRecord, String> HASH = createField("hash", org.jooq.impl.SQLDataType.CHAR(66).nullable(false), this, "");

    /**
     * The column <code>public.fork_block_header.parent_hash</code>.
     */
    public final TableField<ForkBlockHeaderRecord, String> PARENT_HASH = createField("parent_hash", org.jooq.impl.SQLDataType.CHAR(66).nullable(false), this, "");

    /**
     * The column <code>public.fork_block_header.nonce</code>.
     */
    public final TableField<ForkBlockHeaderRecord, BigDecimal> NONCE = createField("nonce", org.jooq.impl.SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.fork_block_header.sha3_uncles</code>.
     */
    public final TableField<ForkBlockHeaderRecord, String> SHA3_UNCLES = createField("sha3_uncles", org.jooq.impl.SQLDataType.CHAR(66).nullable(false), this, "");

    /**
     * The column <code>public.fork_block_header.logs_bloom</code>.
     */
    public final TableField<ForkBlockHeaderRecord, String> LOGS_BLOOM = createField("logs_bloom", org.jooq.impl.SQLDataType.CHAR(514).nullable(false), this, "");

    /**
     * The column <code>public.fork_block_header.transactions_root</code>.
     */
    public final TableField<ForkBlockHeaderRecord, String> TRANSACTIONS_ROOT = createField("transactions_root", org.jooq.impl.SQLDataType.CHAR(66).nullable(false), this, "");

    /**
     * The column <code>public.fork_block_header.state_root</code>.
     */
    public final TableField<ForkBlockHeaderRecord, String> STATE_ROOT = createField("state_root", org.jooq.impl.SQLDataType.CHAR(66).nullable(false), this, "");

    /**
     * The column <code>public.fork_block_header.receipts_root</code>.
     */
    public final TableField<ForkBlockHeaderRecord, String> RECEIPTS_ROOT = createField("receipts_root", org.jooq.impl.SQLDataType.CHAR(66).nullable(false), this, "");

    /**
     * The column <code>public.fork_block_header.author</code>.
     */
    public final TableField<ForkBlockHeaderRecord, String> AUTHOR = createField("author", org.jooq.impl.SQLDataType.CHAR(42).nullable(false), this, "");

    /**
     * The column <code>public.fork_block_header.difficulty</code>.
     */
    public final TableField<ForkBlockHeaderRecord, BigDecimal> DIFFICULTY = createField("difficulty", org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>public.fork_block_header.total_difficulty</code>.
     */
    public final TableField<ForkBlockHeaderRecord, BigDecimal> TOTAL_DIFFICULTY = createField("total_difficulty", org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>public.fork_block_header.extra_data</code>.
     */
    public final TableField<ForkBlockHeaderRecord, String> EXTRA_DATA = createField("extra_data", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.fork_block_header.gas_limit</code>.
     */
    public final TableField<ForkBlockHeaderRecord, BigDecimal> GAS_LIMIT = createField("gas_limit", org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>public.fork_block_header.gas_used</code>.
     */
    public final TableField<ForkBlockHeaderRecord, BigDecimal> GAS_USED = createField("gas_used", org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>public.fork_block_header.timestamp</code>.
     */
    public final TableField<ForkBlockHeaderRecord, Timestamp> TIMESTAMP = createField("timestamp", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.fork_block_header.block_time</code>.
     */
    public final TableField<ForkBlockHeaderRecord, Integer> BLOCK_TIME = createField("block_time", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.fork_block_header.size</code>.
     */
    public final TableField<ForkBlockHeaderRecord, Integer> SIZE = createField("size", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.fork_block_header.uncle_count</code>.
     */
    public final TableField<ForkBlockHeaderRecord, Integer> UNCLE_COUNT = createField("uncle_count", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.fork_block_header.uncle_hashes</code>.
     */
    public final TableField<ForkBlockHeaderRecord, String> UNCLE_HASHES = createField("uncle_hashes", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.fork_block_header.transaction_count</code>.
     */
    public final TableField<ForkBlockHeaderRecord, Integer> TRANSACTION_COUNT = createField("transaction_count", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.fork_block_header.transaction_hashes</code>.
     */
    public final TableField<ForkBlockHeaderRecord, String> TRANSACTION_HASHES = createField("transaction_hashes", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>public.fork_block_header</code> table reference
     */
    public ForkBlockHeader() {
        this(DSL.name("fork_block_header"), null);
    }

    /**
     * Create an aliased <code>public.fork_block_header</code> table reference
     */
    public ForkBlockHeader(String alias) {
        this(DSL.name(alias), FORK_BLOCK_HEADER);
    }

    /**
     * Create an aliased <code>public.fork_block_header</code> table reference
     */
    public ForkBlockHeader(Name alias) {
        this(alias, FORK_BLOCK_HEADER);
    }

    private ForkBlockHeader(Name alias, Table<ForkBlockHeaderRecord> aliased) {
        this(alias, aliased, null);
    }

    private ForkBlockHeader(Name alias, Table<ForkBlockHeaderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ForkBlockHeader(Table<O> child, ForeignKey<O, ForkBlockHeaderRecord> key) {
        super(child, key, FORK_BLOCK_HEADER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ForkBlockHeader as(String alias) {
        return new ForkBlockHeader(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ForkBlockHeader as(Name alias) {
        return new ForkBlockHeader(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ForkBlockHeader rename(String name) {
        return new ForkBlockHeader(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ForkBlockHeader rename(Name name) {
        return new ForkBlockHeader(name, null);
    }
}
