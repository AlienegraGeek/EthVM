/*
 * This file is generated by jOOQ.
 */
package com.ethvm.db.tables;


import com.ethvm.db.Indexes;
import com.ethvm.db.Keys;
import com.ethvm.db.Public;
import com.ethvm.db.tables.records.ContractRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Contract extends TableImpl<ContractRecord> {

    private static final long serialVersionUID = -321792812;

    /**
     * The reference instance of <code>public.contract</code>
     */
    public static final Contract CONTRACT = new Contract();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ContractRecord> getRecordType() {
        return ContractRecord.class;
    }

    /**
     * The column <code>public.contract.address</code>.
     */
    public final TableField<ContractRecord, String> ADDRESS = createField("address", org.jooq.impl.SQLDataType.CHAR(42).nullable(false), this, "");

    /**
     * The column <code>public.contract.creator</code>.
     */
    public final TableField<ContractRecord, String> CREATOR = createField("creator", org.jooq.impl.SQLDataType.CHAR(42), this, "");

    /**
     * The column <code>public.contract.init</code>.
     */
    public final TableField<ContractRecord, String> INIT = createField("init", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.contract.code</code>.
     */
    public final TableField<ContractRecord, String> CODE = createField("code", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.contract.contract_type</code>.
     */
    public final TableField<ContractRecord, String> CONTRACT_TYPE = createField("contract_type", org.jooq.impl.SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>public.contract.refund_address</code>.
     */
    public final TableField<ContractRecord, String> REFUND_ADDRESS = createField("refund_address", org.jooq.impl.SQLDataType.CHAR(66), this, "");

    /**
     * The column <code>public.contract.refund_balance</code>.
     */
    public final TableField<ContractRecord, BigDecimal> REFUND_BALANCE = createField("refund_balance", org.jooq.impl.SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.contract.created_at_block_hash</code>.
     */
    public final TableField<ContractRecord, String> CREATED_AT_BLOCK_HASH = createField("created_at_block_hash", org.jooq.impl.SQLDataType.CHAR(66), this, "");

    /**
     * The column <code>public.contract.created_at_block_number</code>.
     */
    public final TableField<ContractRecord, BigDecimal> CREATED_AT_BLOCK_NUMBER = createField("created_at_block_number", org.jooq.impl.SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.contract.created_at_transaction_hash</code>.
     */
    public final TableField<ContractRecord, String> CREATED_AT_TRANSACTION_HASH = createField("created_at_transaction_hash", org.jooq.impl.SQLDataType.CHAR(66), this, "");

    /**
     * The column <code>public.contract.created_at_trace_address</code>.
     */
    public final TableField<ContractRecord, String> CREATED_AT_TRACE_ADDRESS = createField("created_at_trace_address", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.contract.created_at_timestamp</code>.
     */
    public final TableField<ContractRecord, Timestamp> CREATED_AT_TIMESTAMP = createField("created_at_timestamp", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.contract.destroyed_at_block_hash</code>.
     */
    public final TableField<ContractRecord, String> DESTROYED_AT_BLOCK_HASH = createField("destroyed_at_block_hash", org.jooq.impl.SQLDataType.CHAR(66), this, "");

    /**
     * The column <code>public.contract.destroyed_at_block_number</code>.
     */
    public final TableField<ContractRecord, BigDecimal> DESTROYED_AT_BLOCK_NUMBER = createField("destroyed_at_block_number", org.jooq.impl.SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.contract.destroyed_at_transaction_hash</code>.
     */
    public final TableField<ContractRecord, String> DESTROYED_AT_TRANSACTION_HASH = createField("destroyed_at_transaction_hash", org.jooq.impl.SQLDataType.CHAR(66), this, "");

    /**
     * The column <code>public.contract.destroyed_at_trace_address</code>.
     */
    public final TableField<ContractRecord, String> DESTROYED_AT_TRACE_ADDRESS = createField("destroyed_at_trace_address", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.contract.destroyed_at_timestamp</code>.
     */
    public final TableField<ContractRecord, Timestamp> DESTROYED_AT_TIMESTAMP = createField("destroyed_at_timestamp", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * Create a <code>public.contract</code> table reference
     */
    public Contract() {
        this(DSL.name("contract"), null);
    }

    /**
     * Create an aliased <code>public.contract</code> table reference
     */
    public Contract(String alias) {
        this(DSL.name(alias), CONTRACT);
    }

    /**
     * Create an aliased <code>public.contract</code> table reference
     */
    public Contract(Name alias) {
        this(alias, CONTRACT);
    }

    private Contract(Name alias, Table<ContractRecord> aliased) {
        this(alias, aliased, null);
    }

    private Contract(Name alias, Table<ContractRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Contract(Table<O> child, ForeignKey<O, ContractRecord> key) {
        super(child, key, CONTRACT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CONTRACT_PKEY, Indexes.IDX_CONTRACTS_BY_TYPE, Indexes.IDX_CONTRACTS_FOR_ADDRESS, Indexes.IDX_CONTRACTS_FOR_CREATOR, Indexes.IDX_IS_CONTRACT, Indexes.IDX_IS_CONTRACT_CREATOR);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ContractRecord> getPrimaryKey() {
        return Keys.CONTRACT_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ContractRecord>> getKeys() {
        return Arrays.<UniqueKey<ContractRecord>>asList(Keys.CONTRACT_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Contract as(String alias) {
        return new Contract(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Contract as(Name alias) {
        return new Contract(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Contract rename(String name) {
        return new Contract(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Contract rename(Name name) {
        return new Contract(name, null);
    }
}
