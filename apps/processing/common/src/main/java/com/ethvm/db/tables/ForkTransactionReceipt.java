/*
 * This file is generated by jOOQ.
 */
package com.ethvm.db.tables;


import com.ethvm.db.Public;
import com.ethvm.db.tables.records.ForkTransactionReceiptRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ForkTransactionReceipt extends TableImpl<ForkTransactionReceiptRecord> {

    private static final long serialVersionUID = -362111440;

    /**
     * The reference instance of <code>public.fork_transaction_receipt</code>
     */
    public static final ForkTransactionReceipt FORK_TRANSACTION_RECEIPT = new ForkTransactionReceipt();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ForkTransactionReceiptRecord> getRecordType() {
        return ForkTransactionReceiptRecord.class;
    }

    /**
     * The column <code>public.fork_transaction_receipt.transaction_hash</code>.
     */
    public final TableField<ForkTransactionReceiptRecord, String> TRANSACTION_HASH = createField("transaction_hash", org.jooq.impl.SQLDataType.CHAR(66).nullable(false), this, "");

    /**
     * The column <code>public.fork_transaction_receipt.transaction_index</code>.
     */
    public final TableField<ForkTransactionReceiptRecord, Integer> TRANSACTION_INDEX = createField("transaction_index", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.fork_transaction_receipt.block_hash</code>.
     */
    public final TableField<ForkTransactionReceiptRecord, String> BLOCK_HASH = createField("block_hash", org.jooq.impl.SQLDataType.CHAR(66).nullable(false), this, "");

    /**
     * The column <code>public.fork_transaction_receipt.block_number</code>.
     */
    public final TableField<ForkTransactionReceiptRecord, BigDecimal> BLOCK_NUMBER = createField("block_number", org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>public.fork_transaction_receipt.from</code>.
     */
    public final TableField<ForkTransactionReceiptRecord, String> FROM = createField("from", org.jooq.impl.SQLDataType.CHAR(42).nullable(false), this, "");

    /**
     * The column <code>public.fork_transaction_receipt.to</code>.
     */
    public final TableField<ForkTransactionReceiptRecord, String> TO = createField("to", org.jooq.impl.SQLDataType.CHAR(42), this, "");

    /**
     * The column <code>public.fork_transaction_receipt.contract_address</code>.
     */
    public final TableField<ForkTransactionReceiptRecord, String> CONTRACT_ADDRESS = createField("contract_address", org.jooq.impl.SQLDataType.CHAR(42), this, "");

    /**
     * The column <code>public.fork_transaction_receipt.cumulative_gas_used</code>.
     */
    public final TableField<ForkTransactionReceiptRecord, BigDecimal> CUMULATIVE_GAS_USED = createField("cumulative_gas_used", org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>public.fork_transaction_receipt.gas_used</code>.
     */
    public final TableField<ForkTransactionReceiptRecord, BigDecimal> GAS_USED = createField("gas_used", org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>public.fork_transaction_receipt.logs</code>.
     */
    public final TableField<ForkTransactionReceiptRecord, String> LOGS = createField("logs", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.fork_transaction_receipt.logs_bloom</code>.
     */
    public final TableField<ForkTransactionReceiptRecord, String> LOGS_BLOOM = createField("logs_bloom", org.jooq.impl.SQLDataType.CHAR(514).nullable(false), this, "");

    /**
     * The column <code>public.fork_transaction_receipt.root</code>.
     */
    public final TableField<ForkTransactionReceiptRecord, String> ROOT = createField("root", org.jooq.impl.SQLDataType.CHAR(66), this, "");

    /**
     * The column <code>public.fork_transaction_receipt.status</code>.
     */
    public final TableField<ForkTransactionReceiptRecord, String> STATUS = createField("status", org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>public.fork_transaction_receipt.timestamp</code>.
     */
    public final TableField<ForkTransactionReceiptRecord, Timestamp> TIMESTAMP = createField("timestamp", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>public.fork_transaction_receipt</code> table reference
     */
    public ForkTransactionReceipt() {
        this(DSL.name("fork_transaction_receipt"), null);
    }

    /**
     * Create an aliased <code>public.fork_transaction_receipt</code> table reference
     */
    public ForkTransactionReceipt(String alias) {
        this(DSL.name(alias), FORK_TRANSACTION_RECEIPT);
    }

    /**
     * Create an aliased <code>public.fork_transaction_receipt</code> table reference
     */
    public ForkTransactionReceipt(Name alias) {
        this(alias, FORK_TRANSACTION_RECEIPT);
    }

    private ForkTransactionReceipt(Name alias, Table<ForkTransactionReceiptRecord> aliased) {
        this(alias, aliased, null);
    }

    private ForkTransactionReceipt(Name alias, Table<ForkTransactionReceiptRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ForkTransactionReceipt(Table<O> child, ForeignKey<O, ForkTransactionReceiptRecord> key) {
        super(child, key, FORK_TRANSACTION_RECEIPT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ForkTransactionReceipt as(String alias) {
        return new ForkTransactionReceipt(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ForkTransactionReceipt as(Name alias) {
        return new ForkTransactionReceipt(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ForkTransactionReceipt rename(String name) {
        return new ForkTransactionReceipt(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ForkTransactionReceipt rename(Name name) {
        return new ForkTransactionReceipt(name, null);
    }
}
