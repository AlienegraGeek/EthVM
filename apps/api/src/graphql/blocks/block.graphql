
type Query {

  hashRate(blockNumber: BigNumber): BigNumber

  blockSummaries(blockNumber: BigNumber, offset: Int = 0, limit: Int = 20): BlockSummaryPage!
  blockSummariesByAuthor(author: String!, offset: Int = 0, limit: Int = 20, blockNumber: BigNumber): BlockSummaryByAuthorPage!

  blockByHash(hash: String!, blockNumber: BigNumber): Block
  blockByNumber(number: BigNumber!, blockNumber: BigNumber): Block

}

type Subscription {
  newBlock: BlockSummary!
  hashRate: BigNumber!
}

type BlockSummary {
  number: BigNumber!
  hash: String!
  author: String!
  numTxs: BigNumber!
  numSuccessfulTxs: BigNumber!
  numFailedTxs: BigNumber!
  reward: BigNumber!
  uncleHashes: [String!]!
  transactionHashes: [String!]!
  difficulty: BigNumber!
  timestamp: Date!
}

type BlockSummaryPage {
  items: [BlockSummary!]!
  totalCount: BigNumber!
}

type BlockSummaryByAuthorPage {
  items: [BlockSummary!]!
  totalCount: BigNumber!
}

type Block {
  header: BlockHeader!
  uncleHashes: [String!]!
  transactionHashes: [String!]!
  rewards: [Reward!]!
  totalTxFees: BigNumber!
}

type BlockHeader {
  number: BigNumber!
  hash: String!
  parentHash: String!
  nonce: BigNumber
  sha3Uncles: String!
  logsBloom: String!
  transactionsRoot: String!
  stateRoot: String!
  receiptsRoot: String!
  author: String!
  difficulty: BigNumber!
  totalDifficulty: BigNumber!
  extraData: String!
  gasLimit: BigNumber!
  gasUsed: BigNumber!
  timestamp: Date!
  size: Int!
  blockTime: Int
}

type Reward {
  address: String!
  blockHash: String!
  deltaType: DeltaType!
  amount: BigNumber!
}
