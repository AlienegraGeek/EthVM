
enum TimeBucket {
  ONE_HOUR,
  ONE_DAY,
  ONE_WEEK,
  ONE_MONTH,
  ONE_YEAR
}

enum BlockMetricField {
  BLOCK_TIME, NUM_UNCLES, DIFFICULTY, TOTAL_DIFFICULTY, GAS_LIMIT, GAS_PRICE, NUM_TXS, NUM_SUCCESSFUL_TXS,
  NUM_FAILED_TXS, NUM_INTERNAL_TXS, TX_FEES, TOTAL_TX_FEES
}

type Query {

  blockMetrics(offset: Int = 0, limit: Int = 10): BlockMetricPage!

  blockMetricsAverage(start: Date!, end: Date!, bucket: TimeBucket!, fields: [BlockMetricField]!, offset: Int = 0, limit: Int = 20): [AggregateBlockMetric]!

}

type Subscription {
  newBlockMetric: BlockMetric
}

type BlockMetricPage {

  items: [BlockMetric]

  offset: Int
  limit: Int
  totalCount: Int

}

type AggregateBlockMetric {

  timestamp: Date

  avgBlockTime: Int
  avgNumUncles: Int
  avgDifficulty: BigNumber
  avgTotalDifficulty: BigNumber
  avgGasLimit: BigNumber
  avgGasPrice: BigNumber
  avgNumTxs: Int
  avgNumSuccessfulTxs: Int
  avgNumFailedTxs: Int
  avgNumInternalTxs: Int
  avgTxFees: BigNumber
  avgTotalTxFees: BigNumber

}

type BlockMetric {

  number: BigNumber!
  blockHash: String
  timestamp: Date
  blockTime: Int
  numUncles: Int
  difficulty: BigNumber
  totalDifficulty: BigNumber
  totalGasPrice: BigNumber
  avgGasLimit: BigNumber
  avgGasPrice: BigNumber
  totalTxs: Int
  numSuccessfulTxs: Int
  numFailedTxs: Int
  numInternalTxs: Int
  totalTxFees: BigNumber
  avgTxFees: BigNumber

}

