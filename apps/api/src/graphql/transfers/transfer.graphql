type Query {
  tokenTransfersByContractAddress(contractAddress: String!, limit: Int = 20, page: Int = 0): TransfersPage!
  tokenTransfersByContractAddressForHolder(contractAddress: String!, holderAddress: String!, filter: FilterEnum = all, limit: Int = 20, page: Int = 0): TransfersPage!
  tokenTransfersByContractAddressesForHolder(contractAddresses: [String!], holderAddress: String!, filter: FilterEnum = all, limit: Int = 20, page: Int = 0, timestampFrom: Int = 0, timestampTo: Int = 0): TransfersPage
  internalTransactionsByAddress(address: String!, limit: Int = 20, page: Int = 0): TransfersPage!

  tokenBalancesByContractAddressesForHolder(contractAddresses: [String!], holderAddress: String!, timestampFrom: Int = 0, timestampTo: Int = 0): BalancesPage
}

type TransfersPage {
  items: [Transfer!]!
  totalCount: BigNumber!
}

type Transfer {
  id: String!
  to: String!
  deltaType: DeltaType!
  from: String
  contractAddress: String
  tokenType: String
  amount: BigNumber!
  traceLocationBlockHash: String!
  traceLocationBlockNumber: BigNumber!
  traceLocationTransactionHash: String
  traceLocationTransactionIndex: Int
  traceLocationLogIndex: Int
  traceLocationTraceAddress: String
  timestamp: Int!
}

type BalancesPage {
  items: [Balance!]!,
  totalCount: BigNumber!
}

type Balance {
  id: String!,
  address: String!,
  # counterpartAddress: String,
  # deltaType: DeltaType!
  contractAddress: String
  tokenType: String
  amount: BigNumber!
  balance: BigNumber!
  timestamp: Int!
  # traceLocationBlockHash: String!
  # traceLocationBlockNumber: BigNumber!
  # traceLocationTransactionHash: String
  # traceLocationTransactionIndex: Int
  # traceLocationLogIndex: Int
  # traceLocationTraceAddress: String
  # transaction: Transaction
}

enum DeltaType {
  UNCLE_REWARD
  BLOCK_REWARD
  CONTRACT_CREATION
  TOKEN_TRANSFER
  CONTRACT_DESTRUCTION
  TX
  MINER_FEE
  INTERNAL_TX
}
