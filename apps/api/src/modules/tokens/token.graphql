type Query {
  tokenHolders(address: String!, limit: Int, page: Int): [TokenHolder]
  tokenHolder(address: String!, holderAddress: String!): TokenHolder
  holderTransfers(address: String!, holderAddress: String!): [EthplorerTokenOperation]
  addressAllTokensOwned(address: String!): [Token]!
  addressAmountTokensOwned(address: String!): Int!
}

type Token {
  name: String
  website: String
  email: String
  symbol: String
  addr: String
  decimals: Int
  balance: String
  currentPrice: Float
}

type TokenHolder {
  address: String
  balance: String
}

enum BalanceType {
  TX_FEE, REWARD, ETHER, ERC20, ERC721
}

type EthplorerTokenOperation {
  timestamp: Long
  transactionHash: String
  tokenInfo: EthplorerTokenInfo
  type: String
  address: String
  from: String
  to: String
  value: Float
}

type EthplorerTokenInfo {
  address: String
  totalSupply: String
  name: String
  symbol: String
  decimals: Int
  price: EthplorerPriceInfo
  owner: String
  countOps: Int
  totalIn: Int
  totalOut: Int
  transfersCount: Int
  ethTransfersCount: Int
  holdersCount: Int
  issuancesCount: Int
  image: String
  description: String
  website: String
  lastUpdated: Long
}

type EthplorerPriceInfo {
  rate: Decimal
  currency: String
  diff: Decimal
  diff7d: Decimal
  diff30d: Decimal
  marketCapUsd: Decimal
  availableSupply: Decimal
  volume24h: Decimal
  ts: Long
}

type EthplorerTokenInfo {
  address: String
  owner: String
  holdersCount: Int
}
