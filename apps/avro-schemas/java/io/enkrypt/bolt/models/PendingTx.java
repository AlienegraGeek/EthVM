/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.enkrypt.bolt.models;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class PendingTx extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 9017539364152413925L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PendingTx\",\"namespace\":\"io.enkrypt.bolt.models\",\"fields\":[{\"name\":\"hash\",\"type\":\"string\",\"doc\":\"Hash of the transaction\"},{\"name\":\"nonce\",\"type\":[\"null\",\"long\"],\"doc\":\"Number of transactions sent from a given address\"},{\"name\":\"nonceHash\",\"type\":[\"null\",\"string\"],\"doc\":\"SHA3 of the transaction nonce\"},{\"name\":\"from\",\"type\":[\"null\",\"string\"],\"doc\":\"Address of the sender\"},{\"name\":\"fromBalance\",\"type\":[\"null\",\"long\"],\"doc\":\"Balance of the sender\"},{\"name\":\"to\",\"type\":[\"null\",\"string\"],\"doc\":\"Address of the recipient (or null when contract creation)\"},{\"name\":\"toBalance\",\"type\":[\"null\",\"long\"],\"doc\":\"Balance of the receiver (or null when contract creation)\"},{\"name\":\"input\",\"type\":[\"null\",\"bytes\"],\"doc\":\"The data send along with the transaction\"},{\"name\":\"contractAddress\",\"type\":[\"null\",\"string\"],\"doc\":\"If a contract is created, the address of it (or null if is just a regular transaction)\"},{\"name\":\"value\",\"type\":[\"null\",\"long\"],\"doc\":\"Amount of value transferred in Wei\"},{\"name\":\"gas\",\"type\":[\"null\",\"long\"],\"doc\":\"Amount of gas provided by the sender\"},{\"name\":\"gasPrice\",\"type\":[\"null\",\"long\"],\"doc\":\"Amount of gas price provided by the sender in Wei\"},{\"name\":\"gasUsed\",\"type\":[\"null\",\"long\"],\"doc\":\"Amount of gas used consumed by the transaction\"},{\"name\":\"cumulativeGasUsed\",\"type\":[\"null\",\"long\"],\"doc\":\"Cumulative gas used by the transaction\"},{\"name\":\"v\",\"type\":[\"null\",\"string\"],\"doc\":\"Transaction signature v\"},{\"name\":\"r\",\"type\":[\"null\",\"string\"],\"doc\":\"Transaction signature r\"},{\"name\":\"s\",\"type\":[\"null\",\"string\"],\"doc\":\"Transaction signature s\"},{\"name\":\"status\",\"type\":[\"null\",\"long\"],\"doc\":\"Transaction result status\"},{\"name\":\"logsBloom\",\"type\":[\"null\",\"bytes\"],\"doc\":\"Generated and encoded logs by the transaction\"},{\"name\":\"logs\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Log\",\"fields\":[{\"name\":\"address\",\"type\":\"string\",\"desc\":\"Address of the contract that generated the event\"},{\"name\":\"topics\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"desc\":\"List of topics provided by the contract\"},{\"name\":\"data\",\"type\":\"bytes\",\"desc\":\"Supplied by the contract, usually ABI-encoded\"},{\"name\":\"index\",\"type\":\"int\",\"desc\":\"Index of the log in the receipt\"},{\"name\":\"removed\",\"type\":\"boolean\",\"desc\":\"True if this log was reverted due to a chain reorganisation\"}]}},\"doc\":\"\"},{\"name\":\"trace\",\"type\":{\"type\":\"record\",\"name\":\"Trace\",\"fields\":[{\"name\":\"isError\",\"type\":\"boolean\",\"desc\":\"Signals if an error happened during execution\"},{\"name\":\"msg\",\"type\":\"string\",\"desc\":\"Stores the error message\"},{\"name\":\"transfers\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Transfer\",\"fields\":[{\"name\":\"op\",\"type\":\"string\",\"doc\":\"Type of op executed inside the transaction\"},{\"name\":\"value\",\"type\":\"string\",\"doc\":\"Raw value of the transaction\"},{\"name\":\"from\",\"type\":\"string\",\"doc\":\"Address of the sender\"},{\"name\":\"fromBalance\",\"type\":\"string\",\"doc\":\"Balance of the sender\"},{\"name\":\"to\",\"type\":\"string\",\"doc\":\"Address of the receiver\"},{\"name\":\"toBalance\",\"type\":\"string\",\"doc\":\"Balance of the receiver\"},{\"name\":\"input\",\"type\":\"string\",\"doc\":\"Raw input data\"}]}},\"desc\":\"An array describing transfers\"}]},\"doc\":\"Trace that describes contract creation, destruction or intenal transactions\"},{\"name\":\"txStatus\",\"type\":{\"type\":\"enum\",\"name\":\"Action\",\"symbols\":[\"QUEUED\",\"MINED\",\"EXPIRED\",\"REPLACED\",\"UNPAYABLE\",\"INVALID_SENDER\",\"LOW_NONCE\",\"UNDERPRICED\",\"INSUFFICIENT_FUNDS\",\"CAP_EXCEEDING\"]},\"doc\":\"Spceficies the status of this pending transaction\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PendingTx> ENCODER =
      new BinaryMessageEncoder<PendingTx>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PendingTx> DECODER =
      new BinaryMessageDecoder<PendingTx>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<PendingTx> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<PendingTx> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<PendingTx>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this PendingTx to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a PendingTx from a ByteBuffer. */
  public static PendingTx fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Hash of the transaction */
  @Deprecated public java.lang.CharSequence hash;
  /** Number of transactions sent from a given address */
  @Deprecated public java.lang.Long nonce;
  /** SHA3 of the transaction nonce */
  @Deprecated public java.lang.CharSequence nonceHash;
  /** Address of the sender */
  @Deprecated public java.lang.CharSequence from;
  /** Balance of the sender */
  @Deprecated public java.lang.Long fromBalance;
  /** Address of the recipient (or null when contract creation) */
  @Deprecated public java.lang.CharSequence to;
  /** Balance of the receiver (or null when contract creation) */
  @Deprecated public java.lang.Long toBalance;
  /** The data send along with the transaction */
  @Deprecated public java.nio.ByteBuffer input;
  /** If a contract is created, the address of it (or null if is just a regular transaction) */
  @Deprecated public java.lang.CharSequence contractAddress;
  /** Amount of value transferred in Wei */
  @Deprecated public java.lang.Long value;
  /** Amount of gas provided by the sender */
  @Deprecated public java.lang.Long gas;
  /** Amount of gas price provided by the sender in Wei */
  @Deprecated public java.lang.Long gasPrice;
  /** Amount of gas used consumed by the transaction */
  @Deprecated public java.lang.Long gasUsed;
  /** Cumulative gas used by the transaction */
  @Deprecated public java.lang.Long cumulativeGasUsed;
  /** Transaction signature v */
  @Deprecated public java.lang.CharSequence v;
  /** Transaction signature r */
  @Deprecated public java.lang.CharSequence r;
  /** Transaction signature s */
  @Deprecated public java.lang.CharSequence s;
  /** Transaction result status */
  @Deprecated public java.lang.Long status;
  /** Generated and encoded logs by the transaction */
  @Deprecated public java.nio.ByteBuffer logsBloom;
  /**  */
  @Deprecated public java.util.List<io.enkrypt.bolt.models.Log> logs;
  /** Trace that describes contract creation, destruction or intenal transactions */
  @Deprecated public io.enkrypt.bolt.models.Trace trace;
  /** Spceficies the status of this pending transaction */
  @Deprecated public io.enkrypt.bolt.models.Action txStatus;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PendingTx() {}

  /**
   * All-args constructor.
   * @param hash Hash of the transaction
   * @param nonce Number of transactions sent from a given address
   * @param nonceHash SHA3 of the transaction nonce
   * @param from Address of the sender
   * @param fromBalance Balance of the sender
   * @param to Address of the recipient (or null when contract creation)
   * @param toBalance Balance of the receiver (or null when contract creation)
   * @param input The data send along with the transaction
   * @param contractAddress If a contract is created, the address of it (or null if is just a regular transaction)
   * @param value Amount of value transferred in Wei
   * @param gas Amount of gas provided by the sender
   * @param gasPrice Amount of gas price provided by the sender in Wei
   * @param gasUsed Amount of gas used consumed by the transaction
   * @param cumulativeGasUsed Cumulative gas used by the transaction
   * @param v Transaction signature v
   * @param r Transaction signature r
   * @param s Transaction signature s
   * @param status Transaction result status
   * @param logsBloom Generated and encoded logs by the transaction
   * @param logs 
   * @param trace Trace that describes contract creation, destruction or intenal transactions
   * @param txStatus Spceficies the status of this pending transaction
   */
  public PendingTx(java.lang.CharSequence hash, java.lang.Long nonce, java.lang.CharSequence nonceHash, java.lang.CharSequence from, java.lang.Long fromBalance, java.lang.CharSequence to, java.lang.Long toBalance, java.nio.ByteBuffer input, java.lang.CharSequence contractAddress, java.lang.Long value, java.lang.Long gas, java.lang.Long gasPrice, java.lang.Long gasUsed, java.lang.Long cumulativeGasUsed, java.lang.CharSequence v, java.lang.CharSequence r, java.lang.CharSequence s, java.lang.Long status, java.nio.ByteBuffer logsBloom, java.util.List<io.enkrypt.bolt.models.Log> logs, io.enkrypt.bolt.models.Trace trace, io.enkrypt.bolt.models.Action txStatus) {
    this.hash = hash;
    this.nonce = nonce;
    this.nonceHash = nonceHash;
    this.from = from;
    this.fromBalance = fromBalance;
    this.to = to;
    this.toBalance = toBalance;
    this.input = input;
    this.contractAddress = contractAddress;
    this.value = value;
    this.gas = gas;
    this.gasPrice = gasPrice;
    this.gasUsed = gasUsed;
    this.cumulativeGasUsed = cumulativeGasUsed;
    this.v = v;
    this.r = r;
    this.s = s;
    this.status = status;
    this.logsBloom = logsBloom;
    this.logs = logs;
    this.trace = trace;
    this.txStatus = txStatus;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return hash;
    case 1: return nonce;
    case 2: return nonceHash;
    case 3: return from;
    case 4: return fromBalance;
    case 5: return to;
    case 6: return toBalance;
    case 7: return input;
    case 8: return contractAddress;
    case 9: return value;
    case 10: return gas;
    case 11: return gasPrice;
    case 12: return gasUsed;
    case 13: return cumulativeGasUsed;
    case 14: return v;
    case 15: return r;
    case 16: return s;
    case 17: return status;
    case 18: return logsBloom;
    case 19: return logs;
    case 20: return trace;
    case 21: return txStatus;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: hash = (java.lang.CharSequence)value$; break;
    case 1: nonce = (java.lang.Long)value$; break;
    case 2: nonceHash = (java.lang.CharSequence)value$; break;
    case 3: from = (java.lang.CharSequence)value$; break;
    case 4: fromBalance = (java.lang.Long)value$; break;
    case 5: to = (java.lang.CharSequence)value$; break;
    case 6: toBalance = (java.lang.Long)value$; break;
    case 7: input = (java.nio.ByteBuffer)value$; break;
    case 8: contractAddress = (java.lang.CharSequence)value$; break;
    case 9: value = (java.lang.Long)value$; break;
    case 10: gas = (java.lang.Long)value$; break;
    case 11: gasPrice = (java.lang.Long)value$; break;
    case 12: gasUsed = (java.lang.Long)value$; break;
    case 13: cumulativeGasUsed = (java.lang.Long)value$; break;
    case 14: v = (java.lang.CharSequence)value$; break;
    case 15: r = (java.lang.CharSequence)value$; break;
    case 16: s = (java.lang.CharSequence)value$; break;
    case 17: status = (java.lang.Long)value$; break;
    case 18: logsBloom = (java.nio.ByteBuffer)value$; break;
    case 19: logs = (java.util.List<io.enkrypt.bolt.models.Log>)value$; break;
    case 20: trace = (io.enkrypt.bolt.models.Trace)value$; break;
    case 21: txStatus = (io.enkrypt.bolt.models.Action)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'hash' field.
   * @return Hash of the transaction
   */
  public java.lang.CharSequence getHash() {
    return hash;
  }

  /**
   * Sets the value of the 'hash' field.
   * Hash of the transaction
   * @param value the value to set.
   */
  public void setHash(java.lang.CharSequence value) {
    this.hash = value;
  }

  /**
   * Gets the value of the 'nonce' field.
   * @return Number of transactions sent from a given address
   */
  public java.lang.Long getNonce() {
    return nonce;
  }

  /**
   * Sets the value of the 'nonce' field.
   * Number of transactions sent from a given address
   * @param value the value to set.
   */
  public void setNonce(java.lang.Long value) {
    this.nonce = value;
  }

  /**
   * Gets the value of the 'nonceHash' field.
   * @return SHA3 of the transaction nonce
   */
  public java.lang.CharSequence getNonceHash() {
    return nonceHash;
  }

  /**
   * Sets the value of the 'nonceHash' field.
   * SHA3 of the transaction nonce
   * @param value the value to set.
   */
  public void setNonceHash(java.lang.CharSequence value) {
    this.nonceHash = value;
  }

  /**
   * Gets the value of the 'from' field.
   * @return Address of the sender
   */
  public java.lang.CharSequence getFrom() {
    return from;
  }

  /**
   * Sets the value of the 'from' field.
   * Address of the sender
   * @param value the value to set.
   */
  public void setFrom(java.lang.CharSequence value) {
    this.from = value;
  }

  /**
   * Gets the value of the 'fromBalance' field.
   * @return Balance of the sender
   */
  public java.lang.Long getFromBalance() {
    return fromBalance;
  }

  /**
   * Sets the value of the 'fromBalance' field.
   * Balance of the sender
   * @param value the value to set.
   */
  public void setFromBalance(java.lang.Long value) {
    this.fromBalance = value;
  }

  /**
   * Gets the value of the 'to' field.
   * @return Address of the recipient (or null when contract creation)
   */
  public java.lang.CharSequence getTo() {
    return to;
  }

  /**
   * Sets the value of the 'to' field.
   * Address of the recipient (or null when contract creation)
   * @param value the value to set.
   */
  public void setTo(java.lang.CharSequence value) {
    this.to = value;
  }

  /**
   * Gets the value of the 'toBalance' field.
   * @return Balance of the receiver (or null when contract creation)
   */
  public java.lang.Long getToBalance() {
    return toBalance;
  }

  /**
   * Sets the value of the 'toBalance' field.
   * Balance of the receiver (or null when contract creation)
   * @param value the value to set.
   */
  public void setToBalance(java.lang.Long value) {
    this.toBalance = value;
  }

  /**
   * Gets the value of the 'input' field.
   * @return The data send along with the transaction
   */
  public java.nio.ByteBuffer getInput() {
    return input;
  }

  /**
   * Sets the value of the 'input' field.
   * The data send along with the transaction
   * @param value the value to set.
   */
  public void setInput(java.nio.ByteBuffer value) {
    this.input = value;
  }

  /**
   * Gets the value of the 'contractAddress' field.
   * @return If a contract is created, the address of it (or null if is just a regular transaction)
   */
  public java.lang.CharSequence getContractAddress() {
    return contractAddress;
  }

  /**
   * Sets the value of the 'contractAddress' field.
   * If a contract is created, the address of it (or null if is just a regular transaction)
   * @param value the value to set.
   */
  public void setContractAddress(java.lang.CharSequence value) {
    this.contractAddress = value;
  }

  /**
   * Gets the value of the 'value' field.
   * @return Amount of value transferred in Wei
   */
  public java.lang.Long getValue() {
    return value;
  }

  /**
   * Sets the value of the 'value' field.
   * Amount of value transferred in Wei
   * @param value the value to set.
   */
  public void setValue(java.lang.Long value) {
    this.value = value;
  }

  /**
   * Gets the value of the 'gas' field.
   * @return Amount of gas provided by the sender
   */
  public java.lang.Long getGas() {
    return gas;
  }

  /**
   * Sets the value of the 'gas' field.
   * Amount of gas provided by the sender
   * @param value the value to set.
   */
  public void setGas(java.lang.Long value) {
    this.gas = value;
  }

  /**
   * Gets the value of the 'gasPrice' field.
   * @return Amount of gas price provided by the sender in Wei
   */
  public java.lang.Long getGasPrice() {
    return gasPrice;
  }

  /**
   * Sets the value of the 'gasPrice' field.
   * Amount of gas price provided by the sender in Wei
   * @param value the value to set.
   */
  public void setGasPrice(java.lang.Long value) {
    this.gasPrice = value;
  }

  /**
   * Gets the value of the 'gasUsed' field.
   * @return Amount of gas used consumed by the transaction
   */
  public java.lang.Long getGasUsed() {
    return gasUsed;
  }

  /**
   * Sets the value of the 'gasUsed' field.
   * Amount of gas used consumed by the transaction
   * @param value the value to set.
   */
  public void setGasUsed(java.lang.Long value) {
    this.gasUsed = value;
  }

  /**
   * Gets the value of the 'cumulativeGasUsed' field.
   * @return Cumulative gas used by the transaction
   */
  public java.lang.Long getCumulativeGasUsed() {
    return cumulativeGasUsed;
  }

  /**
   * Sets the value of the 'cumulativeGasUsed' field.
   * Cumulative gas used by the transaction
   * @param value the value to set.
   */
  public void setCumulativeGasUsed(java.lang.Long value) {
    this.cumulativeGasUsed = value;
  }

  /**
   * Gets the value of the 'v' field.
   * @return Transaction signature v
   */
  public java.lang.CharSequence getV() {
    return v;
  }

  /**
   * Sets the value of the 'v' field.
   * Transaction signature v
   * @param value the value to set.
   */
  public void setV(java.lang.CharSequence value) {
    this.v = value;
  }

  /**
   * Gets the value of the 'r' field.
   * @return Transaction signature r
   */
  public java.lang.CharSequence getR() {
    return r;
  }

  /**
   * Sets the value of the 'r' field.
   * Transaction signature r
   * @param value the value to set.
   */
  public void setR(java.lang.CharSequence value) {
    this.r = value;
  }

  /**
   * Gets the value of the 's' field.
   * @return Transaction signature s
   */
  public java.lang.CharSequence getS() {
    return s;
  }

  /**
   * Sets the value of the 's' field.
   * Transaction signature s
   * @param value the value to set.
   */
  public void setS(java.lang.CharSequence value) {
    this.s = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return Transaction result status
   */
  public java.lang.Long getStatus() {
    return status;
  }

  /**
   * Sets the value of the 'status' field.
   * Transaction result status
   * @param value the value to set.
   */
  public void setStatus(java.lang.Long value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'logsBloom' field.
   * @return Generated and encoded logs by the transaction
   */
  public java.nio.ByteBuffer getLogsBloom() {
    return logsBloom;
  }

  /**
   * Sets the value of the 'logsBloom' field.
   * Generated and encoded logs by the transaction
   * @param value the value to set.
   */
  public void setLogsBloom(java.nio.ByteBuffer value) {
    this.logsBloom = value;
  }

  /**
   * Gets the value of the 'logs' field.
   * @return 
   */
  public java.util.List<io.enkrypt.bolt.models.Log> getLogs() {
    return logs;
  }

  /**
   * Sets the value of the 'logs' field.
   * 
   * @param value the value to set.
   */
  public void setLogs(java.util.List<io.enkrypt.bolt.models.Log> value) {
    this.logs = value;
  }

  /**
   * Gets the value of the 'trace' field.
   * @return Trace that describes contract creation, destruction or intenal transactions
   */
  public io.enkrypt.bolt.models.Trace getTrace() {
    return trace;
  }

  /**
   * Sets the value of the 'trace' field.
   * Trace that describes contract creation, destruction or intenal transactions
   * @param value the value to set.
   */
  public void setTrace(io.enkrypt.bolt.models.Trace value) {
    this.trace = value;
  }

  /**
   * Gets the value of the 'txStatus' field.
   * @return Spceficies the status of this pending transaction
   */
  public io.enkrypt.bolt.models.Action getTxStatus() {
    return txStatus;
  }

  /**
   * Sets the value of the 'txStatus' field.
   * Spceficies the status of this pending transaction
   * @param value the value to set.
   */
  public void setTxStatus(io.enkrypt.bolt.models.Action value) {
    this.txStatus = value;
  }

  /**
   * Creates a new PendingTx RecordBuilder.
   * @return A new PendingTx RecordBuilder
   */
  public static io.enkrypt.bolt.models.PendingTx.Builder newBuilder() {
    return new io.enkrypt.bolt.models.PendingTx.Builder();
  }

  /**
   * Creates a new PendingTx RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PendingTx RecordBuilder
   */
  public static io.enkrypt.bolt.models.PendingTx.Builder newBuilder(io.enkrypt.bolt.models.PendingTx.Builder other) {
    return new io.enkrypt.bolt.models.PendingTx.Builder(other);
  }

  /**
   * Creates a new PendingTx RecordBuilder by copying an existing PendingTx instance.
   * @param other The existing instance to copy.
   * @return A new PendingTx RecordBuilder
   */
  public static io.enkrypt.bolt.models.PendingTx.Builder newBuilder(io.enkrypt.bolt.models.PendingTx other) {
    return new io.enkrypt.bolt.models.PendingTx.Builder(other);
  }

  /**
   * RecordBuilder for PendingTx instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PendingTx>
    implements org.apache.avro.data.RecordBuilder<PendingTx> {

    /** Hash of the transaction */
    private java.lang.CharSequence hash;
    /** Number of transactions sent from a given address */
    private java.lang.Long nonce;
    /** SHA3 of the transaction nonce */
    private java.lang.CharSequence nonceHash;
    /** Address of the sender */
    private java.lang.CharSequence from;
    /** Balance of the sender */
    private java.lang.Long fromBalance;
    /** Address of the recipient (or null when contract creation) */
    private java.lang.CharSequence to;
    /** Balance of the receiver (or null when contract creation) */
    private java.lang.Long toBalance;
    /** The data send along with the transaction */
    private java.nio.ByteBuffer input;
    /** If a contract is created, the address of it (or null if is just a regular transaction) */
    private java.lang.CharSequence contractAddress;
    /** Amount of value transferred in Wei */
    private java.lang.Long value;
    /** Amount of gas provided by the sender */
    private java.lang.Long gas;
    /** Amount of gas price provided by the sender in Wei */
    private java.lang.Long gasPrice;
    /** Amount of gas used consumed by the transaction */
    private java.lang.Long gasUsed;
    /** Cumulative gas used by the transaction */
    private java.lang.Long cumulativeGasUsed;
    /** Transaction signature v */
    private java.lang.CharSequence v;
    /** Transaction signature r */
    private java.lang.CharSequence r;
    /** Transaction signature s */
    private java.lang.CharSequence s;
    /** Transaction result status */
    private java.lang.Long status;
    /** Generated and encoded logs by the transaction */
    private java.nio.ByteBuffer logsBloom;
    /**  */
    private java.util.List<io.enkrypt.bolt.models.Log> logs;
    /** Trace that describes contract creation, destruction or intenal transactions */
    private io.enkrypt.bolt.models.Trace trace;
    private io.enkrypt.bolt.models.Trace.Builder traceBuilder;
    /** Spceficies the status of this pending transaction */
    private io.enkrypt.bolt.models.Action txStatus;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.enkrypt.bolt.models.PendingTx.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.hash)) {
        this.hash = data().deepCopy(fields()[0].schema(), other.hash);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.nonce)) {
        this.nonce = data().deepCopy(fields()[1].schema(), other.nonce);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.nonceHash)) {
        this.nonceHash = data().deepCopy(fields()[2].schema(), other.nonceHash);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.from)) {
        this.from = data().deepCopy(fields()[3].schema(), other.from);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.fromBalance)) {
        this.fromBalance = data().deepCopy(fields()[4].schema(), other.fromBalance);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.to)) {
        this.to = data().deepCopy(fields()[5].schema(), other.to);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.toBalance)) {
        this.toBalance = data().deepCopy(fields()[6].schema(), other.toBalance);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.input)) {
        this.input = data().deepCopy(fields()[7].schema(), other.input);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.contractAddress)) {
        this.contractAddress = data().deepCopy(fields()[8].schema(), other.contractAddress);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.value)) {
        this.value = data().deepCopy(fields()[9].schema(), other.value);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.gas)) {
        this.gas = data().deepCopy(fields()[10].schema(), other.gas);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.gasPrice)) {
        this.gasPrice = data().deepCopy(fields()[11].schema(), other.gasPrice);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.gasUsed)) {
        this.gasUsed = data().deepCopy(fields()[12].schema(), other.gasUsed);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.cumulativeGasUsed)) {
        this.cumulativeGasUsed = data().deepCopy(fields()[13].schema(), other.cumulativeGasUsed);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.v)) {
        this.v = data().deepCopy(fields()[14].schema(), other.v);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.r)) {
        this.r = data().deepCopy(fields()[15].schema(), other.r);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.s)) {
        this.s = data().deepCopy(fields()[16].schema(), other.s);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.status)) {
        this.status = data().deepCopy(fields()[17].schema(), other.status);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.logsBloom)) {
        this.logsBloom = data().deepCopy(fields()[18].schema(), other.logsBloom);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.logs)) {
        this.logs = data().deepCopy(fields()[19].schema(), other.logs);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.trace)) {
        this.trace = data().deepCopy(fields()[20].schema(), other.trace);
        fieldSetFlags()[20] = true;
      }
      if (other.hasTraceBuilder()) {
        this.traceBuilder = io.enkrypt.bolt.models.Trace.newBuilder(other.getTraceBuilder());
      }
      if (isValidValue(fields()[21], other.txStatus)) {
        this.txStatus = data().deepCopy(fields()[21].schema(), other.txStatus);
        fieldSetFlags()[21] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing PendingTx instance
     * @param other The existing instance to copy.
     */
    private Builder(io.enkrypt.bolt.models.PendingTx other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.hash)) {
        this.hash = data().deepCopy(fields()[0].schema(), other.hash);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.nonce)) {
        this.nonce = data().deepCopy(fields()[1].schema(), other.nonce);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.nonceHash)) {
        this.nonceHash = data().deepCopy(fields()[2].schema(), other.nonceHash);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.from)) {
        this.from = data().deepCopy(fields()[3].schema(), other.from);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.fromBalance)) {
        this.fromBalance = data().deepCopy(fields()[4].schema(), other.fromBalance);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.to)) {
        this.to = data().deepCopy(fields()[5].schema(), other.to);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.toBalance)) {
        this.toBalance = data().deepCopy(fields()[6].schema(), other.toBalance);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.input)) {
        this.input = data().deepCopy(fields()[7].schema(), other.input);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.contractAddress)) {
        this.contractAddress = data().deepCopy(fields()[8].schema(), other.contractAddress);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.value)) {
        this.value = data().deepCopy(fields()[9].schema(), other.value);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.gas)) {
        this.gas = data().deepCopy(fields()[10].schema(), other.gas);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.gasPrice)) {
        this.gasPrice = data().deepCopy(fields()[11].schema(), other.gasPrice);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.gasUsed)) {
        this.gasUsed = data().deepCopy(fields()[12].schema(), other.gasUsed);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.cumulativeGasUsed)) {
        this.cumulativeGasUsed = data().deepCopy(fields()[13].schema(), other.cumulativeGasUsed);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.v)) {
        this.v = data().deepCopy(fields()[14].schema(), other.v);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.r)) {
        this.r = data().deepCopy(fields()[15].schema(), other.r);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.s)) {
        this.s = data().deepCopy(fields()[16].schema(), other.s);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.status)) {
        this.status = data().deepCopy(fields()[17].schema(), other.status);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.logsBloom)) {
        this.logsBloom = data().deepCopy(fields()[18].schema(), other.logsBloom);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.logs)) {
        this.logs = data().deepCopy(fields()[19].schema(), other.logs);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.trace)) {
        this.trace = data().deepCopy(fields()[20].schema(), other.trace);
        fieldSetFlags()[20] = true;
      }
      this.traceBuilder = null;
      if (isValidValue(fields()[21], other.txStatus)) {
        this.txStatus = data().deepCopy(fields()[21].schema(), other.txStatus);
        fieldSetFlags()[21] = true;
      }
    }

    /**
      * Gets the value of the 'hash' field.
      * Hash of the transaction
      * @return The value.
      */
    public java.lang.CharSequence getHash() {
      return hash;
    }

    /**
      * Sets the value of the 'hash' field.
      * Hash of the transaction
      * @param value The value of 'hash'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.PendingTx.Builder setHash(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.hash = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'hash' field has been set.
      * Hash of the transaction
      * @return True if the 'hash' field has been set, false otherwise.
      */
    public boolean hasHash() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'hash' field.
      * Hash of the transaction
      * @return This builder.
      */
    public io.enkrypt.bolt.models.PendingTx.Builder clearHash() {
      hash = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'nonce' field.
      * Number of transactions sent from a given address
      * @return The value.
      */
    public java.lang.Long getNonce() {
      return nonce;
    }

    /**
      * Sets the value of the 'nonce' field.
      * Number of transactions sent from a given address
      * @param value The value of 'nonce'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.PendingTx.Builder setNonce(java.lang.Long value) {
      validate(fields()[1], value);
      this.nonce = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'nonce' field has been set.
      * Number of transactions sent from a given address
      * @return True if the 'nonce' field has been set, false otherwise.
      */
    public boolean hasNonce() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'nonce' field.
      * Number of transactions sent from a given address
      * @return This builder.
      */
    public io.enkrypt.bolt.models.PendingTx.Builder clearNonce() {
      nonce = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'nonceHash' field.
      * SHA3 of the transaction nonce
      * @return The value.
      */
    public java.lang.CharSequence getNonceHash() {
      return nonceHash;
    }

    /**
      * Sets the value of the 'nonceHash' field.
      * SHA3 of the transaction nonce
      * @param value The value of 'nonceHash'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.PendingTx.Builder setNonceHash(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.nonceHash = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'nonceHash' field has been set.
      * SHA3 of the transaction nonce
      * @return True if the 'nonceHash' field has been set, false otherwise.
      */
    public boolean hasNonceHash() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'nonceHash' field.
      * SHA3 of the transaction nonce
      * @return This builder.
      */
    public io.enkrypt.bolt.models.PendingTx.Builder clearNonceHash() {
      nonceHash = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'from' field.
      * Address of the sender
      * @return The value.
      */
    public java.lang.CharSequence getFrom() {
      return from;
    }

    /**
      * Sets the value of the 'from' field.
      * Address of the sender
      * @param value The value of 'from'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.PendingTx.Builder setFrom(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.from = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'from' field has been set.
      * Address of the sender
      * @return True if the 'from' field has been set, false otherwise.
      */
    public boolean hasFrom() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'from' field.
      * Address of the sender
      * @return This builder.
      */
    public io.enkrypt.bolt.models.PendingTx.Builder clearFrom() {
      from = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'fromBalance' field.
      * Balance of the sender
      * @return The value.
      */
    public java.lang.Long getFromBalance() {
      return fromBalance;
    }

    /**
      * Sets the value of the 'fromBalance' field.
      * Balance of the sender
      * @param value The value of 'fromBalance'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.PendingTx.Builder setFromBalance(java.lang.Long value) {
      validate(fields()[4], value);
      this.fromBalance = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'fromBalance' field has been set.
      * Balance of the sender
      * @return True if the 'fromBalance' field has been set, false otherwise.
      */
    public boolean hasFromBalance() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'fromBalance' field.
      * Balance of the sender
      * @return This builder.
      */
    public io.enkrypt.bolt.models.PendingTx.Builder clearFromBalance() {
      fromBalance = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'to' field.
      * Address of the recipient (or null when contract creation)
      * @return The value.
      */
    public java.lang.CharSequence getTo() {
      return to;
    }

    /**
      * Sets the value of the 'to' field.
      * Address of the recipient (or null when contract creation)
      * @param value The value of 'to'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.PendingTx.Builder setTo(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.to = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'to' field has been set.
      * Address of the recipient (or null when contract creation)
      * @return True if the 'to' field has been set, false otherwise.
      */
    public boolean hasTo() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'to' field.
      * Address of the recipient (or null when contract creation)
      * @return This builder.
      */
    public io.enkrypt.bolt.models.PendingTx.Builder clearTo() {
      to = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'toBalance' field.
      * Balance of the receiver (or null when contract creation)
      * @return The value.
      */
    public java.lang.Long getToBalance() {
      return toBalance;
    }

    /**
      * Sets the value of the 'toBalance' field.
      * Balance of the receiver (or null when contract creation)
      * @param value The value of 'toBalance'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.PendingTx.Builder setToBalance(java.lang.Long value) {
      validate(fields()[6], value);
      this.toBalance = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'toBalance' field has been set.
      * Balance of the receiver (or null when contract creation)
      * @return True if the 'toBalance' field has been set, false otherwise.
      */
    public boolean hasToBalance() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'toBalance' field.
      * Balance of the receiver (or null when contract creation)
      * @return This builder.
      */
    public io.enkrypt.bolt.models.PendingTx.Builder clearToBalance() {
      toBalance = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'input' field.
      * The data send along with the transaction
      * @return The value.
      */
    public java.nio.ByteBuffer getInput() {
      return input;
    }

    /**
      * Sets the value of the 'input' field.
      * The data send along with the transaction
      * @param value The value of 'input'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.PendingTx.Builder setInput(java.nio.ByteBuffer value) {
      validate(fields()[7], value);
      this.input = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'input' field has been set.
      * The data send along with the transaction
      * @return True if the 'input' field has been set, false otherwise.
      */
    public boolean hasInput() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'input' field.
      * The data send along with the transaction
      * @return This builder.
      */
    public io.enkrypt.bolt.models.PendingTx.Builder clearInput() {
      input = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'contractAddress' field.
      * If a contract is created, the address of it (or null if is just a regular transaction)
      * @return The value.
      */
    public java.lang.CharSequence getContractAddress() {
      return contractAddress;
    }

    /**
      * Sets the value of the 'contractAddress' field.
      * If a contract is created, the address of it (or null if is just a regular transaction)
      * @param value The value of 'contractAddress'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.PendingTx.Builder setContractAddress(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.contractAddress = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'contractAddress' field has been set.
      * If a contract is created, the address of it (or null if is just a regular transaction)
      * @return True if the 'contractAddress' field has been set, false otherwise.
      */
    public boolean hasContractAddress() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'contractAddress' field.
      * If a contract is created, the address of it (or null if is just a regular transaction)
      * @return This builder.
      */
    public io.enkrypt.bolt.models.PendingTx.Builder clearContractAddress() {
      contractAddress = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'value' field.
      * Amount of value transferred in Wei
      * @return The value.
      */
    public java.lang.Long getValue() {
      return value;
    }

    /**
      * Sets the value of the 'value' field.
      * Amount of value transferred in Wei
      * @param value The value of 'value'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.PendingTx.Builder setValue(java.lang.Long value) {
      validate(fields()[9], value);
      this.value = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'value' field has been set.
      * Amount of value transferred in Wei
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'value' field.
      * Amount of value transferred in Wei
      * @return This builder.
      */
    public io.enkrypt.bolt.models.PendingTx.Builder clearValue() {
      value = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'gas' field.
      * Amount of gas provided by the sender
      * @return The value.
      */
    public java.lang.Long getGas() {
      return gas;
    }

    /**
      * Sets the value of the 'gas' field.
      * Amount of gas provided by the sender
      * @param value The value of 'gas'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.PendingTx.Builder setGas(java.lang.Long value) {
      validate(fields()[10], value);
      this.gas = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'gas' field has been set.
      * Amount of gas provided by the sender
      * @return True if the 'gas' field has been set, false otherwise.
      */
    public boolean hasGas() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'gas' field.
      * Amount of gas provided by the sender
      * @return This builder.
      */
    public io.enkrypt.bolt.models.PendingTx.Builder clearGas() {
      gas = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'gasPrice' field.
      * Amount of gas price provided by the sender in Wei
      * @return The value.
      */
    public java.lang.Long getGasPrice() {
      return gasPrice;
    }

    /**
      * Sets the value of the 'gasPrice' field.
      * Amount of gas price provided by the sender in Wei
      * @param value The value of 'gasPrice'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.PendingTx.Builder setGasPrice(java.lang.Long value) {
      validate(fields()[11], value);
      this.gasPrice = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'gasPrice' field has been set.
      * Amount of gas price provided by the sender in Wei
      * @return True if the 'gasPrice' field has been set, false otherwise.
      */
    public boolean hasGasPrice() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'gasPrice' field.
      * Amount of gas price provided by the sender in Wei
      * @return This builder.
      */
    public io.enkrypt.bolt.models.PendingTx.Builder clearGasPrice() {
      gasPrice = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'gasUsed' field.
      * Amount of gas used consumed by the transaction
      * @return The value.
      */
    public java.lang.Long getGasUsed() {
      return gasUsed;
    }

    /**
      * Sets the value of the 'gasUsed' field.
      * Amount of gas used consumed by the transaction
      * @param value The value of 'gasUsed'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.PendingTx.Builder setGasUsed(java.lang.Long value) {
      validate(fields()[12], value);
      this.gasUsed = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'gasUsed' field has been set.
      * Amount of gas used consumed by the transaction
      * @return True if the 'gasUsed' field has been set, false otherwise.
      */
    public boolean hasGasUsed() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'gasUsed' field.
      * Amount of gas used consumed by the transaction
      * @return This builder.
      */
    public io.enkrypt.bolt.models.PendingTx.Builder clearGasUsed() {
      gasUsed = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'cumulativeGasUsed' field.
      * Cumulative gas used by the transaction
      * @return The value.
      */
    public java.lang.Long getCumulativeGasUsed() {
      return cumulativeGasUsed;
    }

    /**
      * Sets the value of the 'cumulativeGasUsed' field.
      * Cumulative gas used by the transaction
      * @param value The value of 'cumulativeGasUsed'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.PendingTx.Builder setCumulativeGasUsed(java.lang.Long value) {
      validate(fields()[13], value);
      this.cumulativeGasUsed = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'cumulativeGasUsed' field has been set.
      * Cumulative gas used by the transaction
      * @return True if the 'cumulativeGasUsed' field has been set, false otherwise.
      */
    public boolean hasCumulativeGasUsed() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'cumulativeGasUsed' field.
      * Cumulative gas used by the transaction
      * @return This builder.
      */
    public io.enkrypt.bolt.models.PendingTx.Builder clearCumulativeGasUsed() {
      cumulativeGasUsed = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'v' field.
      * Transaction signature v
      * @return The value.
      */
    public java.lang.CharSequence getV() {
      return v;
    }

    /**
      * Sets the value of the 'v' field.
      * Transaction signature v
      * @param value The value of 'v'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.PendingTx.Builder setV(java.lang.CharSequence value) {
      validate(fields()[14], value);
      this.v = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'v' field has been set.
      * Transaction signature v
      * @return True if the 'v' field has been set, false otherwise.
      */
    public boolean hasV() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'v' field.
      * Transaction signature v
      * @return This builder.
      */
    public io.enkrypt.bolt.models.PendingTx.Builder clearV() {
      v = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'r' field.
      * Transaction signature r
      * @return The value.
      */
    public java.lang.CharSequence getR() {
      return r;
    }

    /**
      * Sets the value of the 'r' field.
      * Transaction signature r
      * @param value The value of 'r'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.PendingTx.Builder setR(java.lang.CharSequence value) {
      validate(fields()[15], value);
      this.r = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'r' field has been set.
      * Transaction signature r
      * @return True if the 'r' field has been set, false otherwise.
      */
    public boolean hasR() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'r' field.
      * Transaction signature r
      * @return This builder.
      */
    public io.enkrypt.bolt.models.PendingTx.Builder clearR() {
      r = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 's' field.
      * Transaction signature s
      * @return The value.
      */
    public java.lang.CharSequence getS() {
      return s;
    }

    /**
      * Sets the value of the 's' field.
      * Transaction signature s
      * @param value The value of 's'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.PendingTx.Builder setS(java.lang.CharSequence value) {
      validate(fields()[16], value);
      this.s = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 's' field has been set.
      * Transaction signature s
      * @return True if the 's' field has been set, false otherwise.
      */
    public boolean hasS() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 's' field.
      * Transaction signature s
      * @return This builder.
      */
    public io.enkrypt.bolt.models.PendingTx.Builder clearS() {
      s = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * Transaction result status
      * @return The value.
      */
    public java.lang.Long getStatus() {
      return status;
    }

    /**
      * Sets the value of the 'status' field.
      * Transaction result status
      * @param value The value of 'status'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.PendingTx.Builder setStatus(java.lang.Long value) {
      validate(fields()[17], value);
      this.status = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * Transaction result status
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'status' field.
      * Transaction result status
      * @return This builder.
      */
    public io.enkrypt.bolt.models.PendingTx.Builder clearStatus() {
      status = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'logsBloom' field.
      * Generated and encoded logs by the transaction
      * @return The value.
      */
    public java.nio.ByteBuffer getLogsBloom() {
      return logsBloom;
    }

    /**
      * Sets the value of the 'logsBloom' field.
      * Generated and encoded logs by the transaction
      * @param value The value of 'logsBloom'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.PendingTx.Builder setLogsBloom(java.nio.ByteBuffer value) {
      validate(fields()[18], value);
      this.logsBloom = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'logsBloom' field has been set.
      * Generated and encoded logs by the transaction
      * @return True if the 'logsBloom' field has been set, false otherwise.
      */
    public boolean hasLogsBloom() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'logsBloom' field.
      * Generated and encoded logs by the transaction
      * @return This builder.
      */
    public io.enkrypt.bolt.models.PendingTx.Builder clearLogsBloom() {
      logsBloom = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'logs' field.
      * 
      * @return The value.
      */
    public java.util.List<io.enkrypt.bolt.models.Log> getLogs() {
      return logs;
    }

    /**
      * Sets the value of the 'logs' field.
      * 
      * @param value The value of 'logs'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.PendingTx.Builder setLogs(java.util.List<io.enkrypt.bolt.models.Log> value) {
      validate(fields()[19], value);
      this.logs = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'logs' field has been set.
      * 
      * @return True if the 'logs' field has been set, false otherwise.
      */
    public boolean hasLogs() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'logs' field.
      * 
      * @return This builder.
      */
    public io.enkrypt.bolt.models.PendingTx.Builder clearLogs() {
      logs = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'trace' field.
      * Trace that describes contract creation, destruction or intenal transactions
      * @return The value.
      */
    public io.enkrypt.bolt.models.Trace getTrace() {
      return trace;
    }

    /**
      * Sets the value of the 'trace' field.
      * Trace that describes contract creation, destruction or intenal transactions
      * @param value The value of 'trace'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.PendingTx.Builder setTrace(io.enkrypt.bolt.models.Trace value) {
      validate(fields()[20], value);
      this.traceBuilder = null;
      this.trace = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'trace' field has been set.
      * Trace that describes contract creation, destruction or intenal transactions
      * @return True if the 'trace' field has been set, false otherwise.
      */
    public boolean hasTrace() {
      return fieldSetFlags()[20];
    }

    /**
     * Gets the Builder instance for the 'trace' field and creates one if it doesn't exist yet.
     * Trace that describes contract creation, destruction or intenal transactions
     * @return This builder.
     */
    public io.enkrypt.bolt.models.Trace.Builder getTraceBuilder() {
      if (traceBuilder == null) {
        if (hasTrace()) {
          setTraceBuilder(io.enkrypt.bolt.models.Trace.newBuilder(trace));
        } else {
          setTraceBuilder(io.enkrypt.bolt.models.Trace.newBuilder());
        }
      }
      return traceBuilder;
    }

    /**
     * Sets the Builder instance for the 'trace' field
     * Trace that describes contract creation, destruction or intenal transactions
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public io.enkrypt.bolt.models.PendingTx.Builder setTraceBuilder(io.enkrypt.bolt.models.Trace.Builder value) {
      clearTrace();
      traceBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'trace' field has an active Builder instance
     * Trace that describes contract creation, destruction or intenal transactions
     * @return True if the 'trace' field has an active Builder instance
     */
    public boolean hasTraceBuilder() {
      return traceBuilder != null;
    }

    /**
      * Clears the value of the 'trace' field.
      * Trace that describes contract creation, destruction or intenal transactions
      * @return This builder.
      */
    public io.enkrypt.bolt.models.PendingTx.Builder clearTrace() {
      trace = null;
      traceBuilder = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    /**
      * Gets the value of the 'txStatus' field.
      * Spceficies the status of this pending transaction
      * @return The value.
      */
    public io.enkrypt.bolt.models.Action getTxStatus() {
      return txStatus;
    }

    /**
      * Sets the value of the 'txStatus' field.
      * Spceficies the status of this pending transaction
      * @param value The value of 'txStatus'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.PendingTx.Builder setTxStatus(io.enkrypt.bolt.models.Action value) {
      validate(fields()[21], value);
      this.txStatus = value;
      fieldSetFlags()[21] = true;
      return this;
    }

    /**
      * Checks whether the 'txStatus' field has been set.
      * Spceficies the status of this pending transaction
      * @return True if the 'txStatus' field has been set, false otherwise.
      */
    public boolean hasTxStatus() {
      return fieldSetFlags()[21];
    }


    /**
      * Clears the value of the 'txStatus' field.
      * Spceficies the status of this pending transaction
      * @return This builder.
      */
    public io.enkrypt.bolt.models.PendingTx.Builder clearTxStatus() {
      txStatus = null;
      fieldSetFlags()[21] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PendingTx build() {
      try {
        PendingTx record = new PendingTx();
        record.hash = fieldSetFlags()[0] ? this.hash : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.nonce = fieldSetFlags()[1] ? this.nonce : (java.lang.Long) defaultValue(fields()[1]);
        record.nonceHash = fieldSetFlags()[2] ? this.nonceHash : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.from = fieldSetFlags()[3] ? this.from : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.fromBalance = fieldSetFlags()[4] ? this.fromBalance : (java.lang.Long) defaultValue(fields()[4]);
        record.to = fieldSetFlags()[5] ? this.to : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.toBalance = fieldSetFlags()[6] ? this.toBalance : (java.lang.Long) defaultValue(fields()[6]);
        record.input = fieldSetFlags()[7] ? this.input : (java.nio.ByteBuffer) defaultValue(fields()[7]);
        record.contractAddress = fieldSetFlags()[8] ? this.contractAddress : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.value = fieldSetFlags()[9] ? this.value : (java.lang.Long) defaultValue(fields()[9]);
        record.gas = fieldSetFlags()[10] ? this.gas : (java.lang.Long) defaultValue(fields()[10]);
        record.gasPrice = fieldSetFlags()[11] ? this.gasPrice : (java.lang.Long) defaultValue(fields()[11]);
        record.gasUsed = fieldSetFlags()[12] ? this.gasUsed : (java.lang.Long) defaultValue(fields()[12]);
        record.cumulativeGasUsed = fieldSetFlags()[13] ? this.cumulativeGasUsed : (java.lang.Long) defaultValue(fields()[13]);
        record.v = fieldSetFlags()[14] ? this.v : (java.lang.CharSequence) defaultValue(fields()[14]);
        record.r = fieldSetFlags()[15] ? this.r : (java.lang.CharSequence) defaultValue(fields()[15]);
        record.s = fieldSetFlags()[16] ? this.s : (java.lang.CharSequence) defaultValue(fields()[16]);
        record.status = fieldSetFlags()[17] ? this.status : (java.lang.Long) defaultValue(fields()[17]);
        record.logsBloom = fieldSetFlags()[18] ? this.logsBloom : (java.nio.ByteBuffer) defaultValue(fields()[18]);
        record.logs = fieldSetFlags()[19] ? this.logs : (java.util.List<io.enkrypt.bolt.models.Log>) defaultValue(fields()[19]);
        if (traceBuilder != null) {
          record.trace = this.traceBuilder.build();
        } else {
          record.trace = fieldSetFlags()[20] ? this.trace : (io.enkrypt.bolt.models.Trace) defaultValue(fields()[20]);
        }
        record.txStatus = fieldSetFlags()[21] ? this.txStatus : (io.enkrypt.bolt.models.Action) defaultValue(fields()[21]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PendingTx>
    WRITER$ = (org.apache.avro.io.DatumWriter<PendingTx>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PendingTx>
    READER$ = (org.apache.avro.io.DatumReader<PendingTx>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
