/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.enkrypt.bolt.models;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class PendingTxs extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3383485145575198100L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PendingTxs\",\"namespace\":\"io.enkrypt.bolt.models\",\"fields\":[{\"name\":\"transactions\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"PendingTx\",\"fields\":[{\"name\":\"hash\",\"type\":\"string\",\"doc\":\"Hash of the transaction\"},{\"name\":\"nonce\",\"type\":\"long\",\"doc\":\"Number of transactions sent from a given address\"},{\"name\":\"nonceHash\",\"type\":\"string\",\"doc\":\"SHA3 of the transaction nonce\"},{\"name\":\"from\",\"type\":\"string\",\"doc\":\"Address of the sender\"},{\"name\":\"fromBalance\",\"type\":\"long\",\"doc\":\"Balance of the sender\"},{\"name\":\"to\",\"type\":[\"null\",\"string\"],\"doc\":\"Address of the recipient (or null when contract creation)\"},{\"name\":\"toBalance\",\"type\":[\"null\",\"long\"],\"doc\":\"Balance of the receiver (or null when contract creation)\"},{\"name\":\"input\",\"type\":\"bytes\",\"doc\":\"The data send along with the transaction\"},{\"name\":\"contractAddress\",\"type\":[\"null\",\"string\"],\"doc\":\"If a contract is created, the address of it (or null if is just a regular transaction)\"},{\"name\":\"value\",\"type\":\"long\",\"doc\":\"Amount of value transferred in Wei\"},{\"name\":\"gas\",\"type\":\"long\",\"doc\":\"Amount of gas provided by the sender\"},{\"name\":\"gasPrice\",\"type\":\"long\",\"doc\":\"Amount of gas price provided by the sender in Wei\"},{\"name\":\"gasUsed\",\"type\":\"long\",\"doc\":\"Amount of gas used consumed by the transaction\"},{\"name\":\"cumulativeGasUsed\",\"type\":\"long\",\"doc\":\"Cumulative gas used by the transaction\"},{\"name\":\"v\",\"type\":\"string\",\"doc\":\"Transaction signature v\"},{\"name\":\"r\",\"type\":\"string\",\"doc\":\"Transaction signature r\"},{\"name\":\"s\",\"type\":\"string\",\"doc\":\"Transaction signature s\"},{\"name\":\"status\",\"type\":\"long\",\"doc\":\"Transaction result status\"},{\"name\":\"logsBloom\",\"type\":\"bytes\",\"doc\":\"Generated and encoded logs by the transaction\"},{\"name\":\"logs\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Log\",\"fields\":[{\"name\":\"address\",\"type\":\"string\",\"desc\":\"Address of the contract that generated the event\"},{\"name\":\"topics\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"desc\":\"List of topics provided by the contract\"},{\"name\":\"data\",\"type\":\"bytes\",\"desc\":\"Supplied by the contract, usually ABI-encoded\"},{\"name\":\"index\",\"type\":\"int\",\"desc\":\"Index of the log in the receipt\"},{\"name\":\"removed\",\"type\":\"boolean\",\"desc\":\"True if this log was reverted due to a chain reorganisation\"}]}},\"doc\":\"\"},{\"name\":\"trace\",\"type\":{\"type\":\"record\",\"name\":\"Trace\",\"fields\":[{\"name\":\"isError\",\"type\":\"boolean\",\"desc\":\"Signals if an error happened during execution\"},{\"name\":\"msg\",\"type\":\"string\",\"desc\":\"Stores the error message\"},{\"name\":\"transfers\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Transfer\",\"fields\":[{\"name\":\"op\",\"type\":\"string\",\"doc\":\"Type of op executed inside the transaction\"},{\"name\":\"from\",\"type\":\"string\",\"doc\":\"\"},{\"name\":\"to\",\"type\":\"string\",\"doc\":\"\"},{\"name\":\"input\",\"type\":\"bytes\",\"doc\":\"\"}]}},\"desc\":\"An array describing transfers\"}]},\"doc\":\"Trace that describes contract creation, destruction or intenal transactions\"},{\"name\":\"txStatus\",\"type\":{\"type\":\"enum\",\"name\":\"Action\",\"symbols\":[\"QUEUED\",\"MINED\",\"EXPIRED\",\"REPLACED\",\"UNPAYABLE\",\"INVALID_SENDER\",\"LOW_NONCE\",\"UNDERPRICED\",\"INSUFFICIENT_FUNDS\",\"CAP_EXCEEDING\"]},\"doc\":\"Spceficies the status of this pending transaction\"}]}},\"doc\":\"Array of transactions\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PendingTxs> ENCODER =
      new BinaryMessageEncoder<PendingTxs>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PendingTxs> DECODER =
      new BinaryMessageDecoder<PendingTxs>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<PendingTxs> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<PendingTxs> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<PendingTxs>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this PendingTxs to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a PendingTxs from a ByteBuffer. */
  public static PendingTxs fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Array of transactions */
  @Deprecated public java.util.List<io.enkrypt.bolt.models.PendingTx> transactions;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PendingTxs() {}

  /**
   * All-args constructor.
   * @param transactions Array of transactions
   */
  public PendingTxs(java.util.List<io.enkrypt.bolt.models.PendingTx> transactions) {
    this.transactions = transactions;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return transactions;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: transactions = (java.util.List<io.enkrypt.bolt.models.PendingTx>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'transactions' field.
   * @return Array of transactions
   */
  public java.util.List<io.enkrypt.bolt.models.PendingTx> getTransactions() {
    return transactions;
  }

  /**
   * Sets the value of the 'transactions' field.
   * Array of transactions
   * @param value the value to set.
   */
  public void setTransactions(java.util.List<io.enkrypt.bolt.models.PendingTx> value) {
    this.transactions = value;
  }

  /**
   * Creates a new PendingTxs RecordBuilder.
   * @return A new PendingTxs RecordBuilder
   */
  public static io.enkrypt.bolt.models.PendingTxs.Builder newBuilder() {
    return new io.enkrypt.bolt.models.PendingTxs.Builder();
  }

  /**
   * Creates a new PendingTxs RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PendingTxs RecordBuilder
   */
  public static io.enkrypt.bolt.models.PendingTxs.Builder newBuilder(io.enkrypt.bolt.models.PendingTxs.Builder other) {
    return new io.enkrypt.bolt.models.PendingTxs.Builder(other);
  }

  /**
   * Creates a new PendingTxs RecordBuilder by copying an existing PendingTxs instance.
   * @param other The existing instance to copy.
   * @return A new PendingTxs RecordBuilder
   */
  public static io.enkrypt.bolt.models.PendingTxs.Builder newBuilder(io.enkrypt.bolt.models.PendingTxs other) {
    return new io.enkrypt.bolt.models.PendingTxs.Builder(other);
  }

  /**
   * RecordBuilder for PendingTxs instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PendingTxs>
    implements org.apache.avro.data.RecordBuilder<PendingTxs> {

    /** Array of transactions */
    private java.util.List<io.enkrypt.bolt.models.PendingTx> transactions;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.enkrypt.bolt.models.PendingTxs.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.transactions)) {
        this.transactions = data().deepCopy(fields()[0].schema(), other.transactions);
        fieldSetFlags()[0] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing PendingTxs instance
     * @param other The existing instance to copy.
     */
    private Builder(io.enkrypt.bolt.models.PendingTxs other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.transactions)) {
        this.transactions = data().deepCopy(fields()[0].schema(), other.transactions);
        fieldSetFlags()[0] = true;
      }
    }

    /**
      * Gets the value of the 'transactions' field.
      * Array of transactions
      * @return The value.
      */
    public java.util.List<io.enkrypt.bolt.models.PendingTx> getTransactions() {
      return transactions;
    }

    /**
      * Sets the value of the 'transactions' field.
      * Array of transactions
      * @param value The value of 'transactions'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.PendingTxs.Builder setTransactions(java.util.List<io.enkrypt.bolt.models.PendingTx> value) {
      validate(fields()[0], value);
      this.transactions = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'transactions' field has been set.
      * Array of transactions
      * @return True if the 'transactions' field has been set, false otherwise.
      */
    public boolean hasTransactions() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'transactions' field.
      * Array of transactions
      * @return This builder.
      */
    public io.enkrypt.bolt.models.PendingTxs.Builder clearTransactions() {
      transactions = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PendingTxs build() {
      try {
        PendingTxs record = new PendingTxs();
        record.transactions = fieldSetFlags()[0] ? this.transactions : (java.util.List<io.enkrypt.bolt.models.PendingTx>) defaultValue(fields()[0]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PendingTxs>
    WRITER$ = (org.apache.avro.io.DatumWriter<PendingTxs>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PendingTxs>
    READER$ = (org.apache.avro.io.DatumReader<PendingTxs>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
