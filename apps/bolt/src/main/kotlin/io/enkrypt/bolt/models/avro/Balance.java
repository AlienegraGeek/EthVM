/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.enkrypt.bolt.models.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Balance extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4346932886928293662L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Balance\",\"namespace\":\"io.enkrypt.bolt.models.avro\",\"fields\":[{\"name\":\"key\",\"type\":{\"type\":\"record\",\"name\":\"BalanceKey\",\"fields\":[{\"name\":\"address\",\"type\":\"bytes\"},{\"name\":\"contractAddress\",\"type\":[\"null\",\"bytes\"],\"doc\":\"Optional contract address for tracking token balances\"}]}},{\"name\":\"amount\",\"type\":\"bytes\",\"doc\":\"Total amount of the balance held\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Balance> ENCODER =
      new BinaryMessageEncoder<Balance>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Balance> DECODER =
      new BinaryMessageDecoder<Balance>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Balance> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Balance> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Balance>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Balance to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Balance from a ByteBuffer. */
  public static Balance fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public io.enkrypt.bolt.models.avro.BalanceKey key;
  /** Total amount of the balance held */
  @Deprecated public java.nio.ByteBuffer amount;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Balance() {}

  /**
   * All-args constructor.
   * @param key The new value for key
   * @param amount Total amount of the balance held
   */
  public Balance(io.enkrypt.bolt.models.avro.BalanceKey key, java.nio.ByteBuffer amount) {
    this.key = key;
    this.amount = amount;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return key;
    case 1: return amount;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: key = (io.enkrypt.bolt.models.avro.BalanceKey)value$; break;
    case 1: amount = (java.nio.ByteBuffer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'key' field.
   * @return The value of the 'key' field.
   */
  public io.enkrypt.bolt.models.avro.BalanceKey getKey() {
    return key;
  }

  /**
   * Sets the value of the 'key' field.
   * @param value the value to set.
   */
  public void setKey(io.enkrypt.bolt.models.avro.BalanceKey value) {
    this.key = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return Total amount of the balance held
   */
  public java.nio.ByteBuffer getAmount() {
    return amount;
  }

  /**
   * Sets the value of the 'amount' field.
   * Total amount of the balance held
   * @param value the value to set.
   */
  public void setAmount(java.nio.ByteBuffer value) {
    this.amount = value;
  }

  /**
   * Creates a new Balance RecordBuilder.
   * @return A new Balance RecordBuilder
   */
  public static io.enkrypt.bolt.models.avro.Balance.Builder newBuilder() {
    return new io.enkrypt.bolt.models.avro.Balance.Builder();
  }

  /**
   * Creates a new Balance RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Balance RecordBuilder
   */
  public static io.enkrypt.bolt.models.avro.Balance.Builder newBuilder(io.enkrypt.bolt.models.avro.Balance.Builder other) {
    return new io.enkrypt.bolt.models.avro.Balance.Builder(other);
  }

  /**
   * Creates a new Balance RecordBuilder by copying an existing Balance instance.
   * @param other The existing instance to copy.
   * @return A new Balance RecordBuilder
   */
  public static io.enkrypt.bolt.models.avro.Balance.Builder newBuilder(io.enkrypt.bolt.models.avro.Balance other) {
    return new io.enkrypt.bolt.models.avro.Balance.Builder(other);
  }

  /**
   * RecordBuilder for Balance instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Balance>
    implements org.apache.avro.data.RecordBuilder<Balance> {

    private io.enkrypt.bolt.models.avro.BalanceKey key;
    private io.enkrypt.bolt.models.avro.BalanceKey.Builder keyBuilder;
    /** Total amount of the balance held */
    private java.nio.ByteBuffer amount;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.enkrypt.bolt.models.avro.Balance.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.key)) {
        this.key = data().deepCopy(fields()[0].schema(), other.key);
        fieldSetFlags()[0] = true;
      }
      if (other.hasKeyBuilder()) {
        this.keyBuilder = io.enkrypt.bolt.models.avro.BalanceKey.newBuilder(other.getKeyBuilder());
      }
      if (isValidValue(fields()[1], other.amount)) {
        this.amount = data().deepCopy(fields()[1].schema(), other.amount);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Balance instance
     * @param other The existing instance to copy.
     */
    private Builder(io.enkrypt.bolt.models.avro.Balance other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.key)) {
        this.key = data().deepCopy(fields()[0].schema(), other.key);
        fieldSetFlags()[0] = true;
      }
      this.keyBuilder = null;
      if (isValidValue(fields()[1], other.amount)) {
        this.amount = data().deepCopy(fields()[1].schema(), other.amount);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'key' field.
      * @return The value.
      */
    public io.enkrypt.bolt.models.avro.BalanceKey getKey() {
      return key;
    }

    /**
      * Sets the value of the 'key' field.
      * @param value The value of 'key'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Balance.Builder setKey(io.enkrypt.bolt.models.avro.BalanceKey value) {
      validate(fields()[0], value);
      this.keyBuilder = null;
      this.key = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'key' field has been set.
      * @return True if the 'key' field has been set, false otherwise.
      */
    public boolean hasKey() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'key' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.enkrypt.bolt.models.avro.BalanceKey.Builder getKeyBuilder() {
      if (keyBuilder == null) {
        if (hasKey()) {
          setKeyBuilder(io.enkrypt.bolt.models.avro.BalanceKey.newBuilder(key));
        } else {
          setKeyBuilder(io.enkrypt.bolt.models.avro.BalanceKey.newBuilder());
        }
      }
      return keyBuilder;
    }

    /**
     * Sets the Builder instance for the 'key' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public io.enkrypt.bolt.models.avro.Balance.Builder setKeyBuilder(io.enkrypt.bolt.models.avro.BalanceKey.Builder value) {
      clearKey();
      keyBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'key' field has an active Builder instance
     * @return True if the 'key' field has an active Builder instance
     */
    public boolean hasKeyBuilder() {
      return keyBuilder != null;
    }

    /**
      * Clears the value of the 'key' field.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Balance.Builder clearKey() {
      key = null;
      keyBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * Total amount of the balance held
      * @return The value.
      */
    public java.nio.ByteBuffer getAmount() {
      return amount;
    }

    /**
      * Sets the value of the 'amount' field.
      * Total amount of the balance held
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Balance.Builder setAmount(java.nio.ByteBuffer value) {
      validate(fields()[1], value);
      this.amount = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * Total amount of the balance held
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'amount' field.
      * Total amount of the balance held
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Balance.Builder clearAmount() {
      amount = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Balance build() {
      try {
        Balance record = new Balance();
        if (keyBuilder != null) {
          record.key = this.keyBuilder.build();
        } else {
          record.key = fieldSetFlags()[0] ? this.key : (io.enkrypt.bolt.models.avro.BalanceKey) defaultValue(fields()[0]);
        }
        record.amount = fieldSetFlags()[1] ? this.amount : (java.nio.ByteBuffer) defaultValue(fields()[1]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Balance>
    WRITER$ = (org.apache.avro.io.DatumWriter<Balance>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Balance>
    READER$ = (org.apache.avro.io.DatumReader<Balance>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
