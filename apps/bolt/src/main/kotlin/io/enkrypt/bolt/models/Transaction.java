/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.enkrypt.bolt.models;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Transaction extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8079538282665533076L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Transaction\",\"namespace\":\"io.enkrypt.bolt.models\",\"fields\":[{\"name\":\"hash\",\"type\":\"bytes\",\"doc\":\"Hash of the transaction\"},{\"name\":\"root\",\"type\":\"bytes\",\"doc\":\"Root of the parent block\"},{\"name\":\"index\",\"type\":\"int\",\"doc\":\"Integer of the transactions index position in the block\"},{\"name\":\"timestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},\"doc\":\"Unix timestamp for when the transaction was collated\"},{\"name\":\"nonce\",\"type\":\"bytes\",\"doc\":\"Number of transactions sent from a given address\"},{\"name\":\"nonceHash\",\"type\":\"bytes\",\"doc\":\"SHA3 of the transaction nonce\"},{\"name\":\"from\",\"type\":\"bytes\",\"doc\":\"Address of the sender\"},{\"name\":\"fromBalance\",\"type\":\"bytes\",\"doc\":\"Balance of the sender\"},{\"name\":\"to\",\"type\":[\"null\",\"bytes\"],\"doc\":\"Address of the recipient (or null when contract creation)\"},{\"name\":\"toBalance\",\"type\":[\"null\",\"bytes\"],\"doc\":\"Balance of the receiver (or null when contract creation)\"},{\"name\":\"input\",\"type\":\"bytes\",\"doc\":\"The data send along with the transaction\"},{\"name\":\"contractAddress\",\"type\":[\"null\",\"bytes\"],\"doc\":\"If a contract is created, the address of it (or null if is just a regular transaction)\"},{\"name\":\"value\",\"type\":\"bytes\",\"doc\":\"Amount of value transferred in Wei\"},{\"name\":\"gas\",\"type\":\"bytes\",\"doc\":\"Amount of gas provided by the sender\"},{\"name\":\"gasPrice\",\"type\":\"bytes\",\"doc\":\"Amount of gas price provided by the sender in Wei\"},{\"name\":\"gasUsed\",\"type\":\"bytes\",\"doc\":\"Amount of gas used consumed by the transaction\"},{\"name\":\"cumulativeGasUsed\",\"type\":\"bytes\",\"doc\":\"Cumulative gas used by the transaction\"},{\"name\":\"v\",\"type\":\"bytes\",\"doc\":\"Transaction signature v\"},{\"name\":\"r\",\"type\":\"bytes\",\"doc\":\"Transaction signature r\"},{\"name\":\"s\",\"type\":\"bytes\",\"doc\":\"Transaction signature s\"},{\"name\":\"status\",\"type\":\"bytes\",\"doc\":\"Transaction result status\"},{\"name\":\"logsBloom\",\"type\":\"bytes\",\"doc\":\"Generated and encoded logs by the transaction\"},{\"name\":\"logs\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Log\",\"fields\":[{\"name\":\"address\",\"type\":\"bytes\",\"desc\":\"Address of the contract that generated the event\"},{\"name\":\"topics\",\"type\":{\"type\":\"array\",\"items\":\"bytes\"},\"desc\":\"List of topics provided by the contract\"},{\"name\":\"data\",\"type\":\"bytes\",\"desc\":\"Supplied by the contract, usually ABI-encoded\"},{\"name\":\"index\",\"type\":\"int\",\"desc\":\"Index of the log in the receipt\"},{\"name\":\"removed\",\"type\":\"boolean\",\"desc\":\"True if this log was reverted due to a chain reorganisation\"}]}},\"doc\":\"Logs produced by executing smart contracts\"},{\"name\":\"trace\",\"type\":{\"type\":\"record\",\"name\":\"Trace\",\"fields\":[{\"name\":\"isError\",\"type\":\"boolean\",\"desc\":\"Signals if an error happened during execution\"},{\"name\":\"msg\",\"type\":\"string\",\"desc\":\"Stores the error message\"},{\"name\":\"transfers\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Transfer\",\"fields\":[{\"name\":\"op\",\"type\":\"int\",\"doc\":\"Type of op executed inside the transaction\"},{\"name\":\"value\",\"type\":\"bytes\",\"doc\":\"Raw value of the transaction\"},{\"name\":\"from\",\"type\":\"bytes\",\"doc\":\"Address of the sender\"},{\"name\":\"fromBalance\",\"type\":\"bytes\",\"doc\":\"Balance of the sender\"},{\"name\":\"to\",\"type\":\"bytes\",\"doc\":\"Address of the receiver\"},{\"name\":\"toBalance\",\"type\":\"bytes\",\"doc\":\"Balance of the receiver\"},{\"name\":\"input\",\"type\":\"bytes\",\"doc\":\"Raw input data\"}]}},\"desc\":\"An array describing transfers\"}]},\"doc\":\"Trace that describes contract creation, destruction or intenal transactions\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Transaction> ENCODER =
      new BinaryMessageEncoder<Transaction>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Transaction> DECODER =
      new BinaryMessageDecoder<Transaction>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Transaction> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Transaction> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Transaction>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Transaction to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Transaction from a ByteBuffer. */
  public static Transaction fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Hash of the transaction */
  @Deprecated public java.nio.ByteBuffer hash;
  /** Root of the parent block */
  @Deprecated public java.nio.ByteBuffer root;
  /** Integer of the transactions index position in the block */
  @Deprecated public int index;
  /** Unix timestamp for when the transaction was collated */
  @Deprecated public org.joda.time.DateTime timestamp;
  /** Number of transactions sent from a given address */
  @Deprecated public java.nio.ByteBuffer nonce;
  /** SHA3 of the transaction nonce */
  @Deprecated public java.nio.ByteBuffer nonceHash;
  /** Address of the sender */
  @Deprecated public java.nio.ByteBuffer from;
  /** Balance of the sender */
  @Deprecated public java.nio.ByteBuffer fromBalance;
  /** Address of the recipient (or null when contract creation) */
  @Deprecated public java.nio.ByteBuffer to;
  /** Balance of the receiver (or null when contract creation) */
  @Deprecated public java.nio.ByteBuffer toBalance;
  /** The data send along with the transaction */
  @Deprecated public java.nio.ByteBuffer input;
  /** If a contract is created, the address of it (or null if is just a regular transaction) */
  @Deprecated public java.nio.ByteBuffer contractAddress;
  /** Amount of value transferred in Wei */
  @Deprecated public java.nio.ByteBuffer value;
  /** Amount of gas provided by the sender */
  @Deprecated public java.nio.ByteBuffer gas;
  /** Amount of gas price provided by the sender in Wei */
  @Deprecated public java.nio.ByteBuffer gasPrice;
  /** Amount of gas used consumed by the transaction */
  @Deprecated public java.nio.ByteBuffer gasUsed;
  /** Cumulative gas used by the transaction */
  @Deprecated public java.nio.ByteBuffer cumulativeGasUsed;
  /** Transaction signature v */
  @Deprecated public java.nio.ByteBuffer v;
  /** Transaction signature r */
  @Deprecated public java.nio.ByteBuffer r;
  /** Transaction signature s */
  @Deprecated public java.nio.ByteBuffer s;
  /** Transaction result status */
  @Deprecated public java.nio.ByteBuffer status;
  /** Generated and encoded logs by the transaction */
  @Deprecated public java.nio.ByteBuffer logsBloom;
  /** Logs produced by executing smart contracts */
  @Deprecated public java.util.List<io.enkrypt.bolt.models.Log> logs;
  /** Trace that describes contract creation, destruction or intenal transactions */
  @Deprecated public io.enkrypt.bolt.models.Trace trace;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Transaction() {}

  /**
   * All-args constructor.
   * @param hash Hash of the transaction
   * @param root Root of the parent block
   * @param index Integer of the transactions index position in the block
   * @param timestamp Unix timestamp for when the transaction was collated
   * @param nonce Number of transactions sent from a given address
   * @param nonceHash SHA3 of the transaction nonce
   * @param from Address of the sender
   * @param fromBalance Balance of the sender
   * @param to Address of the recipient (or null when contract creation)
   * @param toBalance Balance of the receiver (or null when contract creation)
   * @param input The data send along with the transaction
   * @param contractAddress If a contract is created, the address of it (or null if is just a regular transaction)
   * @param value Amount of value transferred in Wei
   * @param gas Amount of gas provided by the sender
   * @param gasPrice Amount of gas price provided by the sender in Wei
   * @param gasUsed Amount of gas used consumed by the transaction
   * @param cumulativeGasUsed Cumulative gas used by the transaction
   * @param v Transaction signature v
   * @param r Transaction signature r
   * @param s Transaction signature s
   * @param status Transaction result status
   * @param logsBloom Generated and encoded logs by the transaction
   * @param logs Logs produced by executing smart contracts
   * @param trace Trace that describes contract creation, destruction or intenal transactions
   */
  public Transaction(java.nio.ByteBuffer hash, java.nio.ByteBuffer root, java.lang.Integer index, org.joda.time.DateTime timestamp, java.nio.ByteBuffer nonce, java.nio.ByteBuffer nonceHash, java.nio.ByteBuffer from, java.nio.ByteBuffer fromBalance, java.nio.ByteBuffer to, java.nio.ByteBuffer toBalance, java.nio.ByteBuffer input, java.nio.ByteBuffer contractAddress, java.nio.ByteBuffer value, java.nio.ByteBuffer gas, java.nio.ByteBuffer gasPrice, java.nio.ByteBuffer gasUsed, java.nio.ByteBuffer cumulativeGasUsed, java.nio.ByteBuffer v, java.nio.ByteBuffer r, java.nio.ByteBuffer s, java.nio.ByteBuffer status, java.nio.ByteBuffer logsBloom, java.util.List<io.enkrypt.bolt.models.Log> logs, io.enkrypt.bolt.models.Trace trace) {
    this.hash = hash;
    this.root = root;
    this.index = index;
    this.timestamp = timestamp;
    this.nonce = nonce;
    this.nonceHash = nonceHash;
    this.from = from;
    this.fromBalance = fromBalance;
    this.to = to;
    this.toBalance = toBalance;
    this.input = input;
    this.contractAddress = contractAddress;
    this.value = value;
    this.gas = gas;
    this.gasPrice = gasPrice;
    this.gasUsed = gasUsed;
    this.cumulativeGasUsed = cumulativeGasUsed;
    this.v = v;
    this.r = r;
    this.s = s;
    this.status = status;
    this.logsBloom = logsBloom;
    this.logs = logs;
    this.trace = trace;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return hash;
    case 1: return root;
    case 2: return index;
    case 3: return timestamp;
    case 4: return nonce;
    case 5: return nonceHash;
    case 6: return from;
    case 7: return fromBalance;
    case 8: return to;
    case 9: return toBalance;
    case 10: return input;
    case 11: return contractAddress;
    case 12: return value;
    case 13: return gas;
    case 14: return gasPrice;
    case 15: return gasUsed;
    case 16: return cumulativeGasUsed;
    case 17: return v;
    case 18: return r;
    case 19: return s;
    case 20: return status;
    case 21: return logsBloom;
    case 22: return logs;
    case 23: return trace;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  protected static final org.apache.avro.data.TimeConversions.DateConversion DATE_CONVERSION = new org.apache.avro.data.TimeConversions.DateConversion();
  protected static final org.apache.avro.data.TimeConversions.TimeConversion TIME_CONVERSION = new org.apache.avro.data.TimeConversions.TimeConversion();
  protected static final org.apache.avro.data.TimeConversions.TimestampConversion TIMESTAMP_CONVERSION = new org.apache.avro.data.TimeConversions.TimestampConversion();
  protected static final org.apache.avro.Conversions.DecimalConversion DECIMAL_CONVERSION = new org.apache.avro.Conversions.DecimalConversion();

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      TIMESTAMP_CONVERSION,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: hash = (java.nio.ByteBuffer)value$; break;
    case 1: root = (java.nio.ByteBuffer)value$; break;
    case 2: index = (java.lang.Integer)value$; break;
    case 3: timestamp = (org.joda.time.DateTime)value$; break;
    case 4: nonce = (java.nio.ByteBuffer)value$; break;
    case 5: nonceHash = (java.nio.ByteBuffer)value$; break;
    case 6: from = (java.nio.ByteBuffer)value$; break;
    case 7: fromBalance = (java.nio.ByteBuffer)value$; break;
    case 8: to = (java.nio.ByteBuffer)value$; break;
    case 9: toBalance = (java.nio.ByteBuffer)value$; break;
    case 10: input = (java.nio.ByteBuffer)value$; break;
    case 11: contractAddress = (java.nio.ByteBuffer)value$; break;
    case 12: value = (java.nio.ByteBuffer)value$; break;
    case 13: gas = (java.nio.ByteBuffer)value$; break;
    case 14: gasPrice = (java.nio.ByteBuffer)value$; break;
    case 15: gasUsed = (java.nio.ByteBuffer)value$; break;
    case 16: cumulativeGasUsed = (java.nio.ByteBuffer)value$; break;
    case 17: v = (java.nio.ByteBuffer)value$; break;
    case 18: r = (java.nio.ByteBuffer)value$; break;
    case 19: s = (java.nio.ByteBuffer)value$; break;
    case 20: status = (java.nio.ByteBuffer)value$; break;
    case 21: logsBloom = (java.nio.ByteBuffer)value$; break;
    case 22: logs = (java.util.List<io.enkrypt.bolt.models.Log>)value$; break;
    case 23: trace = (io.enkrypt.bolt.models.Trace)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'hash' field.
   * @return Hash of the transaction
   */
  public java.nio.ByteBuffer getHash() {
    return hash;
  }

  /**
   * Sets the value of the 'hash' field.
   * Hash of the transaction
   * @param value the value to set.
   */
  public void setHash(java.nio.ByteBuffer value) {
    this.hash = value;
  }

  /**
   * Gets the value of the 'root' field.
   * @return Root of the parent block
   */
  public java.nio.ByteBuffer getRoot() {
    return root;
  }

  /**
   * Sets the value of the 'root' field.
   * Root of the parent block
   * @param value the value to set.
   */
  public void setRoot(java.nio.ByteBuffer value) {
    this.root = value;
  }

  /**
   * Gets the value of the 'index' field.
   * @return Integer of the transactions index position in the block
   */
  public java.lang.Integer getIndex() {
    return index;
  }

  /**
   * Sets the value of the 'index' field.
   * Integer of the transactions index position in the block
   * @param value the value to set.
   */
  public void setIndex(java.lang.Integer value) {
    this.index = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return Unix timestamp for when the transaction was collated
   */
  public org.joda.time.DateTime getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * Unix timestamp for when the transaction was collated
   * @param value the value to set.
   */
  public void setTimestamp(org.joda.time.DateTime value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'nonce' field.
   * @return Number of transactions sent from a given address
   */
  public java.nio.ByteBuffer getNonce() {
    return nonce;
  }

  /**
   * Sets the value of the 'nonce' field.
   * Number of transactions sent from a given address
   * @param value the value to set.
   */
  public void setNonce(java.nio.ByteBuffer value) {
    this.nonce = value;
  }

  /**
   * Gets the value of the 'nonceHash' field.
   * @return SHA3 of the transaction nonce
   */
  public java.nio.ByteBuffer getNonceHash() {
    return nonceHash;
  }

  /**
   * Sets the value of the 'nonceHash' field.
   * SHA3 of the transaction nonce
   * @param value the value to set.
   */
  public void setNonceHash(java.nio.ByteBuffer value) {
    this.nonceHash = value;
  }

  /**
   * Gets the value of the 'from' field.
   * @return Address of the sender
   */
  public java.nio.ByteBuffer getFrom() {
    return from;
  }

  /**
   * Sets the value of the 'from' field.
   * Address of the sender
   * @param value the value to set.
   */
  public void setFrom(java.nio.ByteBuffer value) {
    this.from = value;
  }

  /**
   * Gets the value of the 'fromBalance' field.
   * @return Balance of the sender
   */
  public java.nio.ByteBuffer getFromBalance() {
    return fromBalance;
  }

  /**
   * Sets the value of the 'fromBalance' field.
   * Balance of the sender
   * @param value the value to set.
   */
  public void setFromBalance(java.nio.ByteBuffer value) {
    this.fromBalance = value;
  }

  /**
   * Gets the value of the 'to' field.
   * @return Address of the recipient (or null when contract creation)
   */
  public java.nio.ByteBuffer getTo() {
    return to;
  }

  /**
   * Sets the value of the 'to' field.
   * Address of the recipient (or null when contract creation)
   * @param value the value to set.
   */
  public void setTo(java.nio.ByteBuffer value) {
    this.to = value;
  }

  /**
   * Gets the value of the 'toBalance' field.
   * @return Balance of the receiver (or null when contract creation)
   */
  public java.nio.ByteBuffer getToBalance() {
    return toBalance;
  }

  /**
   * Sets the value of the 'toBalance' field.
   * Balance of the receiver (or null when contract creation)
   * @param value the value to set.
   */
  public void setToBalance(java.nio.ByteBuffer value) {
    this.toBalance = value;
  }

  /**
   * Gets the value of the 'input' field.
   * @return The data send along with the transaction
   */
  public java.nio.ByteBuffer getInput() {
    return input;
  }

  /**
   * Sets the value of the 'input' field.
   * The data send along with the transaction
   * @param value the value to set.
   */
  public void setInput(java.nio.ByteBuffer value) {
    this.input = value;
  }

  /**
   * Gets the value of the 'contractAddress' field.
   * @return If a contract is created, the address of it (or null if is just a regular transaction)
   */
  public java.nio.ByteBuffer getContractAddress() {
    return contractAddress;
  }

  /**
   * Sets the value of the 'contractAddress' field.
   * If a contract is created, the address of it (or null if is just a regular transaction)
   * @param value the value to set.
   */
  public void setContractAddress(java.nio.ByteBuffer value) {
    this.contractAddress = value;
  }

  /**
   * Gets the value of the 'value' field.
   * @return Amount of value transferred in Wei
   */
  public java.nio.ByteBuffer getValue() {
    return value;
  }

  /**
   * Sets the value of the 'value' field.
   * Amount of value transferred in Wei
   * @param value the value to set.
   */
  public void setValue(java.nio.ByteBuffer value) {
    this.value = value;
  }

  /**
   * Gets the value of the 'gas' field.
   * @return Amount of gas provided by the sender
   */
  public java.nio.ByteBuffer getGas() {
    return gas;
  }

  /**
   * Sets the value of the 'gas' field.
   * Amount of gas provided by the sender
   * @param value the value to set.
   */
  public void setGas(java.nio.ByteBuffer value) {
    this.gas = value;
  }

  /**
   * Gets the value of the 'gasPrice' field.
   * @return Amount of gas price provided by the sender in Wei
   */
  public java.nio.ByteBuffer getGasPrice() {
    return gasPrice;
  }

  /**
   * Sets the value of the 'gasPrice' field.
   * Amount of gas price provided by the sender in Wei
   * @param value the value to set.
   */
  public void setGasPrice(java.nio.ByteBuffer value) {
    this.gasPrice = value;
  }

  /**
   * Gets the value of the 'gasUsed' field.
   * @return Amount of gas used consumed by the transaction
   */
  public java.nio.ByteBuffer getGasUsed() {
    return gasUsed;
  }

  /**
   * Sets the value of the 'gasUsed' field.
   * Amount of gas used consumed by the transaction
   * @param value the value to set.
   */
  public void setGasUsed(java.nio.ByteBuffer value) {
    this.gasUsed = value;
  }

  /**
   * Gets the value of the 'cumulativeGasUsed' field.
   * @return Cumulative gas used by the transaction
   */
  public java.nio.ByteBuffer getCumulativeGasUsed() {
    return cumulativeGasUsed;
  }

  /**
   * Sets the value of the 'cumulativeGasUsed' field.
   * Cumulative gas used by the transaction
   * @param value the value to set.
   */
  public void setCumulativeGasUsed(java.nio.ByteBuffer value) {
    this.cumulativeGasUsed = value;
  }

  /**
   * Gets the value of the 'v' field.
   * @return Transaction signature v
   */
  public java.nio.ByteBuffer getV() {
    return v;
  }

  /**
   * Sets the value of the 'v' field.
   * Transaction signature v
   * @param value the value to set.
   */
  public void setV(java.nio.ByteBuffer value) {
    this.v = value;
  }

  /**
   * Gets the value of the 'r' field.
   * @return Transaction signature r
   */
  public java.nio.ByteBuffer getR() {
    return r;
  }

  /**
   * Sets the value of the 'r' field.
   * Transaction signature r
   * @param value the value to set.
   */
  public void setR(java.nio.ByteBuffer value) {
    this.r = value;
  }

  /**
   * Gets the value of the 's' field.
   * @return Transaction signature s
   */
  public java.nio.ByteBuffer getS() {
    return s;
  }

  /**
   * Sets the value of the 's' field.
   * Transaction signature s
   * @param value the value to set.
   */
  public void setS(java.nio.ByteBuffer value) {
    this.s = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return Transaction result status
   */
  public java.nio.ByteBuffer getStatus() {
    return status;
  }

  /**
   * Sets the value of the 'status' field.
   * Transaction result status
   * @param value the value to set.
   */
  public void setStatus(java.nio.ByteBuffer value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'logsBloom' field.
   * @return Generated and encoded logs by the transaction
   */
  public java.nio.ByteBuffer getLogsBloom() {
    return logsBloom;
  }

  /**
   * Sets the value of the 'logsBloom' field.
   * Generated and encoded logs by the transaction
   * @param value the value to set.
   */
  public void setLogsBloom(java.nio.ByteBuffer value) {
    this.logsBloom = value;
  }

  /**
   * Gets the value of the 'logs' field.
   * @return Logs produced by executing smart contracts
   */
  public java.util.List<io.enkrypt.bolt.models.Log> getLogs() {
    return logs;
  }

  /**
   * Sets the value of the 'logs' field.
   * Logs produced by executing smart contracts
   * @param value the value to set.
   */
  public void setLogs(java.util.List<io.enkrypt.bolt.models.Log> value) {
    this.logs = value;
  }

  /**
   * Gets the value of the 'trace' field.
   * @return Trace that describes contract creation, destruction or intenal transactions
   */
  public io.enkrypt.bolt.models.Trace getTrace() {
    return trace;
  }

  /**
   * Sets the value of the 'trace' field.
   * Trace that describes contract creation, destruction or intenal transactions
   * @param value the value to set.
   */
  public void setTrace(io.enkrypt.bolt.models.Trace value) {
    this.trace = value;
  }

  /**
   * Creates a new Transaction RecordBuilder.
   * @return A new Transaction RecordBuilder
   */
  public static io.enkrypt.bolt.models.Transaction.Builder newBuilder() {
    return new io.enkrypt.bolt.models.Transaction.Builder();
  }

  /**
   * Creates a new Transaction RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Transaction RecordBuilder
   */
  public static io.enkrypt.bolt.models.Transaction.Builder newBuilder(io.enkrypt.bolt.models.Transaction.Builder other) {
    return new io.enkrypt.bolt.models.Transaction.Builder(other);
  }

  /**
   * Creates a new Transaction RecordBuilder by copying an existing Transaction instance.
   * @param other The existing instance to copy.
   * @return A new Transaction RecordBuilder
   */
  public static io.enkrypt.bolt.models.Transaction.Builder newBuilder(io.enkrypt.bolt.models.Transaction other) {
    return new io.enkrypt.bolt.models.Transaction.Builder(other);
  }

  /**
   * RecordBuilder for Transaction instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Transaction>
    implements org.apache.avro.data.RecordBuilder<Transaction> {

    /** Hash of the transaction */
    private java.nio.ByteBuffer hash;
    /** Root of the parent block */
    private java.nio.ByteBuffer root;
    /** Integer of the transactions index position in the block */
    private int index;
    /** Unix timestamp for when the transaction was collated */
    private org.joda.time.DateTime timestamp;
    /** Number of transactions sent from a given address */
    private java.nio.ByteBuffer nonce;
    /** SHA3 of the transaction nonce */
    private java.nio.ByteBuffer nonceHash;
    /** Address of the sender */
    private java.nio.ByteBuffer from;
    /** Balance of the sender */
    private java.nio.ByteBuffer fromBalance;
    /** Address of the recipient (or null when contract creation) */
    private java.nio.ByteBuffer to;
    /** Balance of the receiver (or null when contract creation) */
    private java.nio.ByteBuffer toBalance;
    /** The data send along with the transaction */
    private java.nio.ByteBuffer input;
    /** If a contract is created, the address of it (or null if is just a regular transaction) */
    private java.nio.ByteBuffer contractAddress;
    /** Amount of value transferred in Wei */
    private java.nio.ByteBuffer value;
    /** Amount of gas provided by the sender */
    private java.nio.ByteBuffer gas;
    /** Amount of gas price provided by the sender in Wei */
    private java.nio.ByteBuffer gasPrice;
    /** Amount of gas used consumed by the transaction */
    private java.nio.ByteBuffer gasUsed;
    /** Cumulative gas used by the transaction */
    private java.nio.ByteBuffer cumulativeGasUsed;
    /** Transaction signature v */
    private java.nio.ByteBuffer v;
    /** Transaction signature r */
    private java.nio.ByteBuffer r;
    /** Transaction signature s */
    private java.nio.ByteBuffer s;
    /** Transaction result status */
    private java.nio.ByteBuffer status;
    /** Generated and encoded logs by the transaction */
    private java.nio.ByteBuffer logsBloom;
    /** Logs produced by executing smart contracts */
    private java.util.List<io.enkrypt.bolt.models.Log> logs;
    /** Trace that describes contract creation, destruction or intenal transactions */
    private io.enkrypt.bolt.models.Trace trace;
    private io.enkrypt.bolt.models.Trace.Builder traceBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.enkrypt.bolt.models.Transaction.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.hash)) {
        this.hash = data().deepCopy(fields()[0].schema(), other.hash);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.root)) {
        this.root = data().deepCopy(fields()[1].schema(), other.root);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.index)) {
        this.index = data().deepCopy(fields()[2].schema(), other.index);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.nonce)) {
        this.nonce = data().deepCopy(fields()[4].schema(), other.nonce);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.nonceHash)) {
        this.nonceHash = data().deepCopy(fields()[5].schema(), other.nonceHash);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.from)) {
        this.from = data().deepCopy(fields()[6].schema(), other.from);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.fromBalance)) {
        this.fromBalance = data().deepCopy(fields()[7].schema(), other.fromBalance);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.to)) {
        this.to = data().deepCopy(fields()[8].schema(), other.to);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.toBalance)) {
        this.toBalance = data().deepCopy(fields()[9].schema(), other.toBalance);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.input)) {
        this.input = data().deepCopy(fields()[10].schema(), other.input);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.contractAddress)) {
        this.contractAddress = data().deepCopy(fields()[11].schema(), other.contractAddress);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.value)) {
        this.value = data().deepCopy(fields()[12].schema(), other.value);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.gas)) {
        this.gas = data().deepCopy(fields()[13].schema(), other.gas);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.gasPrice)) {
        this.gasPrice = data().deepCopy(fields()[14].schema(), other.gasPrice);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.gasUsed)) {
        this.gasUsed = data().deepCopy(fields()[15].schema(), other.gasUsed);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.cumulativeGasUsed)) {
        this.cumulativeGasUsed = data().deepCopy(fields()[16].schema(), other.cumulativeGasUsed);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.v)) {
        this.v = data().deepCopy(fields()[17].schema(), other.v);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.r)) {
        this.r = data().deepCopy(fields()[18].schema(), other.r);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.s)) {
        this.s = data().deepCopy(fields()[19].schema(), other.s);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.status)) {
        this.status = data().deepCopy(fields()[20].schema(), other.status);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.logsBloom)) {
        this.logsBloom = data().deepCopy(fields()[21].schema(), other.logsBloom);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.logs)) {
        this.logs = data().deepCopy(fields()[22].schema(), other.logs);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.trace)) {
        this.trace = data().deepCopy(fields()[23].schema(), other.trace);
        fieldSetFlags()[23] = true;
      }
      if (other.hasTraceBuilder()) {
        this.traceBuilder = io.enkrypt.bolt.models.Trace.newBuilder(other.getTraceBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Transaction instance
     * @param other The existing instance to copy.
     */
    private Builder(io.enkrypt.bolt.models.Transaction other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.hash)) {
        this.hash = data().deepCopy(fields()[0].schema(), other.hash);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.root)) {
        this.root = data().deepCopy(fields()[1].schema(), other.root);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.index)) {
        this.index = data().deepCopy(fields()[2].schema(), other.index);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.nonce)) {
        this.nonce = data().deepCopy(fields()[4].schema(), other.nonce);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.nonceHash)) {
        this.nonceHash = data().deepCopy(fields()[5].schema(), other.nonceHash);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.from)) {
        this.from = data().deepCopy(fields()[6].schema(), other.from);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.fromBalance)) {
        this.fromBalance = data().deepCopy(fields()[7].schema(), other.fromBalance);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.to)) {
        this.to = data().deepCopy(fields()[8].schema(), other.to);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.toBalance)) {
        this.toBalance = data().deepCopy(fields()[9].schema(), other.toBalance);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.input)) {
        this.input = data().deepCopy(fields()[10].schema(), other.input);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.contractAddress)) {
        this.contractAddress = data().deepCopy(fields()[11].schema(), other.contractAddress);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.value)) {
        this.value = data().deepCopy(fields()[12].schema(), other.value);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.gas)) {
        this.gas = data().deepCopy(fields()[13].schema(), other.gas);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.gasPrice)) {
        this.gasPrice = data().deepCopy(fields()[14].schema(), other.gasPrice);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.gasUsed)) {
        this.gasUsed = data().deepCopy(fields()[15].schema(), other.gasUsed);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.cumulativeGasUsed)) {
        this.cumulativeGasUsed = data().deepCopy(fields()[16].schema(), other.cumulativeGasUsed);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.v)) {
        this.v = data().deepCopy(fields()[17].schema(), other.v);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.r)) {
        this.r = data().deepCopy(fields()[18].schema(), other.r);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.s)) {
        this.s = data().deepCopy(fields()[19].schema(), other.s);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.status)) {
        this.status = data().deepCopy(fields()[20].schema(), other.status);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.logsBloom)) {
        this.logsBloom = data().deepCopy(fields()[21].schema(), other.logsBloom);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.logs)) {
        this.logs = data().deepCopy(fields()[22].schema(), other.logs);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.trace)) {
        this.trace = data().deepCopy(fields()[23].schema(), other.trace);
        fieldSetFlags()[23] = true;
      }
      this.traceBuilder = null;
    }

    /**
      * Gets the value of the 'hash' field.
      * Hash of the transaction
      * @return The value.
      */
    public java.nio.ByteBuffer getHash() {
      return hash;
    }

    /**
      * Sets the value of the 'hash' field.
      * Hash of the transaction
      * @param value The value of 'hash'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.Transaction.Builder setHash(java.nio.ByteBuffer value) {
      validate(fields()[0], value);
      this.hash = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'hash' field has been set.
      * Hash of the transaction
      * @return True if the 'hash' field has been set, false otherwise.
      */
    public boolean hasHash() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'hash' field.
      * Hash of the transaction
      * @return This builder.
      */
    public io.enkrypt.bolt.models.Transaction.Builder clearHash() {
      hash = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'root' field.
      * Root of the parent block
      * @return The value.
      */
    public java.nio.ByteBuffer getRoot() {
      return root;
    }

    /**
      * Sets the value of the 'root' field.
      * Root of the parent block
      * @param value The value of 'root'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.Transaction.Builder setRoot(java.nio.ByteBuffer value) {
      validate(fields()[1], value);
      this.root = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'root' field has been set.
      * Root of the parent block
      * @return True if the 'root' field has been set, false otherwise.
      */
    public boolean hasRoot() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'root' field.
      * Root of the parent block
      * @return This builder.
      */
    public io.enkrypt.bolt.models.Transaction.Builder clearRoot() {
      root = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'index' field.
      * Integer of the transactions index position in the block
      * @return The value.
      */
    public java.lang.Integer getIndex() {
      return index;
    }

    /**
      * Sets the value of the 'index' field.
      * Integer of the transactions index position in the block
      * @param value The value of 'index'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.Transaction.Builder setIndex(int value) {
      validate(fields()[2], value);
      this.index = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'index' field has been set.
      * Integer of the transactions index position in the block
      * @return True if the 'index' field has been set, false otherwise.
      */
    public boolean hasIndex() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'index' field.
      * Integer of the transactions index position in the block
      * @return This builder.
      */
    public io.enkrypt.bolt.models.Transaction.Builder clearIndex() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * Unix timestamp for when the transaction was collated
      * @return The value.
      */
    public org.joda.time.DateTime getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * Unix timestamp for when the transaction was collated
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.Transaction.Builder setTimestamp(org.joda.time.DateTime value) {
      validate(fields()[3], value);
      this.timestamp = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * Unix timestamp for when the transaction was collated
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * Unix timestamp for when the transaction was collated
      * @return This builder.
      */
    public io.enkrypt.bolt.models.Transaction.Builder clearTimestamp() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'nonce' field.
      * Number of transactions sent from a given address
      * @return The value.
      */
    public java.nio.ByteBuffer getNonce() {
      return nonce;
    }

    /**
      * Sets the value of the 'nonce' field.
      * Number of transactions sent from a given address
      * @param value The value of 'nonce'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.Transaction.Builder setNonce(java.nio.ByteBuffer value) {
      validate(fields()[4], value);
      this.nonce = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'nonce' field has been set.
      * Number of transactions sent from a given address
      * @return True if the 'nonce' field has been set, false otherwise.
      */
    public boolean hasNonce() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'nonce' field.
      * Number of transactions sent from a given address
      * @return This builder.
      */
    public io.enkrypt.bolt.models.Transaction.Builder clearNonce() {
      nonce = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'nonceHash' field.
      * SHA3 of the transaction nonce
      * @return The value.
      */
    public java.nio.ByteBuffer getNonceHash() {
      return nonceHash;
    }

    /**
      * Sets the value of the 'nonceHash' field.
      * SHA3 of the transaction nonce
      * @param value The value of 'nonceHash'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.Transaction.Builder setNonceHash(java.nio.ByteBuffer value) {
      validate(fields()[5], value);
      this.nonceHash = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'nonceHash' field has been set.
      * SHA3 of the transaction nonce
      * @return True if the 'nonceHash' field has been set, false otherwise.
      */
    public boolean hasNonceHash() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'nonceHash' field.
      * SHA3 of the transaction nonce
      * @return This builder.
      */
    public io.enkrypt.bolt.models.Transaction.Builder clearNonceHash() {
      nonceHash = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'from' field.
      * Address of the sender
      * @return The value.
      */
    public java.nio.ByteBuffer getFrom() {
      return from;
    }

    /**
      * Sets the value of the 'from' field.
      * Address of the sender
      * @param value The value of 'from'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.Transaction.Builder setFrom(java.nio.ByteBuffer value) {
      validate(fields()[6], value);
      this.from = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'from' field has been set.
      * Address of the sender
      * @return True if the 'from' field has been set, false otherwise.
      */
    public boolean hasFrom() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'from' field.
      * Address of the sender
      * @return This builder.
      */
    public io.enkrypt.bolt.models.Transaction.Builder clearFrom() {
      from = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'fromBalance' field.
      * Balance of the sender
      * @return The value.
      */
    public java.nio.ByteBuffer getFromBalance() {
      return fromBalance;
    }

    /**
      * Sets the value of the 'fromBalance' field.
      * Balance of the sender
      * @param value The value of 'fromBalance'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.Transaction.Builder setFromBalance(java.nio.ByteBuffer value) {
      validate(fields()[7], value);
      this.fromBalance = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'fromBalance' field has been set.
      * Balance of the sender
      * @return True if the 'fromBalance' field has been set, false otherwise.
      */
    public boolean hasFromBalance() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'fromBalance' field.
      * Balance of the sender
      * @return This builder.
      */
    public io.enkrypt.bolt.models.Transaction.Builder clearFromBalance() {
      fromBalance = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'to' field.
      * Address of the recipient (or null when contract creation)
      * @return The value.
      */
    public java.nio.ByteBuffer getTo() {
      return to;
    }

    /**
      * Sets the value of the 'to' field.
      * Address of the recipient (or null when contract creation)
      * @param value The value of 'to'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.Transaction.Builder setTo(java.nio.ByteBuffer value) {
      validate(fields()[8], value);
      this.to = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'to' field has been set.
      * Address of the recipient (or null when contract creation)
      * @return True if the 'to' field has been set, false otherwise.
      */
    public boolean hasTo() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'to' field.
      * Address of the recipient (or null when contract creation)
      * @return This builder.
      */
    public io.enkrypt.bolt.models.Transaction.Builder clearTo() {
      to = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'toBalance' field.
      * Balance of the receiver (or null when contract creation)
      * @return The value.
      */
    public java.nio.ByteBuffer getToBalance() {
      return toBalance;
    }

    /**
      * Sets the value of the 'toBalance' field.
      * Balance of the receiver (or null when contract creation)
      * @param value The value of 'toBalance'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.Transaction.Builder setToBalance(java.nio.ByteBuffer value) {
      validate(fields()[9], value);
      this.toBalance = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'toBalance' field has been set.
      * Balance of the receiver (or null when contract creation)
      * @return True if the 'toBalance' field has been set, false otherwise.
      */
    public boolean hasToBalance() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'toBalance' field.
      * Balance of the receiver (or null when contract creation)
      * @return This builder.
      */
    public io.enkrypt.bolt.models.Transaction.Builder clearToBalance() {
      toBalance = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'input' field.
      * The data send along with the transaction
      * @return The value.
      */
    public java.nio.ByteBuffer getInput() {
      return input;
    }

    /**
      * Sets the value of the 'input' field.
      * The data send along with the transaction
      * @param value The value of 'input'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.Transaction.Builder setInput(java.nio.ByteBuffer value) {
      validate(fields()[10], value);
      this.input = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'input' field has been set.
      * The data send along with the transaction
      * @return True if the 'input' field has been set, false otherwise.
      */
    public boolean hasInput() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'input' field.
      * The data send along with the transaction
      * @return This builder.
      */
    public io.enkrypt.bolt.models.Transaction.Builder clearInput() {
      input = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'contractAddress' field.
      * If a contract is created, the address of it (or null if is just a regular transaction)
      * @return The value.
      */
    public java.nio.ByteBuffer getContractAddress() {
      return contractAddress;
    }

    /**
      * Sets the value of the 'contractAddress' field.
      * If a contract is created, the address of it (or null if is just a regular transaction)
      * @param value The value of 'contractAddress'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.Transaction.Builder setContractAddress(java.nio.ByteBuffer value) {
      validate(fields()[11], value);
      this.contractAddress = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'contractAddress' field has been set.
      * If a contract is created, the address of it (or null if is just a regular transaction)
      * @return True if the 'contractAddress' field has been set, false otherwise.
      */
    public boolean hasContractAddress() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'contractAddress' field.
      * If a contract is created, the address of it (or null if is just a regular transaction)
      * @return This builder.
      */
    public io.enkrypt.bolt.models.Transaction.Builder clearContractAddress() {
      contractAddress = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'value' field.
      * Amount of value transferred in Wei
      * @return The value.
      */
    public java.nio.ByteBuffer getValue() {
      return value;
    }

    /**
      * Sets the value of the 'value' field.
      * Amount of value transferred in Wei
      * @param value The value of 'value'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.Transaction.Builder setValue(java.nio.ByteBuffer value) {
      validate(fields()[12], value);
      this.value = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'value' field has been set.
      * Amount of value transferred in Wei
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'value' field.
      * Amount of value transferred in Wei
      * @return This builder.
      */
    public io.enkrypt.bolt.models.Transaction.Builder clearValue() {
      value = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'gas' field.
      * Amount of gas provided by the sender
      * @return The value.
      */
    public java.nio.ByteBuffer getGas() {
      return gas;
    }

    /**
      * Sets the value of the 'gas' field.
      * Amount of gas provided by the sender
      * @param value The value of 'gas'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.Transaction.Builder setGas(java.nio.ByteBuffer value) {
      validate(fields()[13], value);
      this.gas = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'gas' field has been set.
      * Amount of gas provided by the sender
      * @return True if the 'gas' field has been set, false otherwise.
      */
    public boolean hasGas() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'gas' field.
      * Amount of gas provided by the sender
      * @return This builder.
      */
    public io.enkrypt.bolt.models.Transaction.Builder clearGas() {
      gas = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'gasPrice' field.
      * Amount of gas price provided by the sender in Wei
      * @return The value.
      */
    public java.nio.ByteBuffer getGasPrice() {
      return gasPrice;
    }

    /**
      * Sets the value of the 'gasPrice' field.
      * Amount of gas price provided by the sender in Wei
      * @param value The value of 'gasPrice'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.Transaction.Builder setGasPrice(java.nio.ByteBuffer value) {
      validate(fields()[14], value);
      this.gasPrice = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'gasPrice' field has been set.
      * Amount of gas price provided by the sender in Wei
      * @return True if the 'gasPrice' field has been set, false otherwise.
      */
    public boolean hasGasPrice() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'gasPrice' field.
      * Amount of gas price provided by the sender in Wei
      * @return This builder.
      */
    public io.enkrypt.bolt.models.Transaction.Builder clearGasPrice() {
      gasPrice = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'gasUsed' field.
      * Amount of gas used consumed by the transaction
      * @return The value.
      */
    public java.nio.ByteBuffer getGasUsed() {
      return gasUsed;
    }

    /**
      * Sets the value of the 'gasUsed' field.
      * Amount of gas used consumed by the transaction
      * @param value The value of 'gasUsed'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.Transaction.Builder setGasUsed(java.nio.ByteBuffer value) {
      validate(fields()[15], value);
      this.gasUsed = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'gasUsed' field has been set.
      * Amount of gas used consumed by the transaction
      * @return True if the 'gasUsed' field has been set, false otherwise.
      */
    public boolean hasGasUsed() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'gasUsed' field.
      * Amount of gas used consumed by the transaction
      * @return This builder.
      */
    public io.enkrypt.bolt.models.Transaction.Builder clearGasUsed() {
      gasUsed = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'cumulativeGasUsed' field.
      * Cumulative gas used by the transaction
      * @return The value.
      */
    public java.nio.ByteBuffer getCumulativeGasUsed() {
      return cumulativeGasUsed;
    }

    /**
      * Sets the value of the 'cumulativeGasUsed' field.
      * Cumulative gas used by the transaction
      * @param value The value of 'cumulativeGasUsed'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.Transaction.Builder setCumulativeGasUsed(java.nio.ByteBuffer value) {
      validate(fields()[16], value);
      this.cumulativeGasUsed = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'cumulativeGasUsed' field has been set.
      * Cumulative gas used by the transaction
      * @return True if the 'cumulativeGasUsed' field has been set, false otherwise.
      */
    public boolean hasCumulativeGasUsed() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'cumulativeGasUsed' field.
      * Cumulative gas used by the transaction
      * @return This builder.
      */
    public io.enkrypt.bolt.models.Transaction.Builder clearCumulativeGasUsed() {
      cumulativeGasUsed = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'v' field.
      * Transaction signature v
      * @return The value.
      */
    public java.nio.ByteBuffer getV() {
      return v;
    }

    /**
      * Sets the value of the 'v' field.
      * Transaction signature v
      * @param value The value of 'v'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.Transaction.Builder setV(java.nio.ByteBuffer value) {
      validate(fields()[17], value);
      this.v = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'v' field has been set.
      * Transaction signature v
      * @return True if the 'v' field has been set, false otherwise.
      */
    public boolean hasV() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'v' field.
      * Transaction signature v
      * @return This builder.
      */
    public io.enkrypt.bolt.models.Transaction.Builder clearV() {
      v = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'r' field.
      * Transaction signature r
      * @return The value.
      */
    public java.nio.ByteBuffer getR() {
      return r;
    }

    /**
      * Sets the value of the 'r' field.
      * Transaction signature r
      * @param value The value of 'r'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.Transaction.Builder setR(java.nio.ByteBuffer value) {
      validate(fields()[18], value);
      this.r = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'r' field has been set.
      * Transaction signature r
      * @return True if the 'r' field has been set, false otherwise.
      */
    public boolean hasR() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'r' field.
      * Transaction signature r
      * @return This builder.
      */
    public io.enkrypt.bolt.models.Transaction.Builder clearR() {
      r = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 's' field.
      * Transaction signature s
      * @return The value.
      */
    public java.nio.ByteBuffer getS() {
      return s;
    }

    /**
      * Sets the value of the 's' field.
      * Transaction signature s
      * @param value The value of 's'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.Transaction.Builder setS(java.nio.ByteBuffer value) {
      validate(fields()[19], value);
      this.s = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 's' field has been set.
      * Transaction signature s
      * @return True if the 's' field has been set, false otherwise.
      */
    public boolean hasS() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 's' field.
      * Transaction signature s
      * @return This builder.
      */
    public io.enkrypt.bolt.models.Transaction.Builder clearS() {
      s = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * Transaction result status
      * @return The value.
      */
    public java.nio.ByteBuffer getStatus() {
      return status;
    }

    /**
      * Sets the value of the 'status' field.
      * Transaction result status
      * @param value The value of 'status'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.Transaction.Builder setStatus(java.nio.ByteBuffer value) {
      validate(fields()[20], value);
      this.status = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * Transaction result status
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'status' field.
      * Transaction result status
      * @return This builder.
      */
    public io.enkrypt.bolt.models.Transaction.Builder clearStatus() {
      status = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    /**
      * Gets the value of the 'logsBloom' field.
      * Generated and encoded logs by the transaction
      * @return The value.
      */
    public java.nio.ByteBuffer getLogsBloom() {
      return logsBloom;
    }

    /**
      * Sets the value of the 'logsBloom' field.
      * Generated and encoded logs by the transaction
      * @param value The value of 'logsBloom'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.Transaction.Builder setLogsBloom(java.nio.ByteBuffer value) {
      validate(fields()[21], value);
      this.logsBloom = value;
      fieldSetFlags()[21] = true;
      return this;
    }

    /**
      * Checks whether the 'logsBloom' field has been set.
      * Generated and encoded logs by the transaction
      * @return True if the 'logsBloom' field has been set, false otherwise.
      */
    public boolean hasLogsBloom() {
      return fieldSetFlags()[21];
    }


    /**
      * Clears the value of the 'logsBloom' field.
      * Generated and encoded logs by the transaction
      * @return This builder.
      */
    public io.enkrypt.bolt.models.Transaction.Builder clearLogsBloom() {
      logsBloom = null;
      fieldSetFlags()[21] = false;
      return this;
    }

    /**
      * Gets the value of the 'logs' field.
      * Logs produced by executing smart contracts
      * @return The value.
      */
    public java.util.List<io.enkrypt.bolt.models.Log> getLogs() {
      return logs;
    }

    /**
      * Sets the value of the 'logs' field.
      * Logs produced by executing smart contracts
      * @param value The value of 'logs'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.Transaction.Builder setLogs(java.util.List<io.enkrypt.bolt.models.Log> value) {
      validate(fields()[22], value);
      this.logs = value;
      fieldSetFlags()[22] = true;
      return this;
    }

    /**
      * Checks whether the 'logs' field has been set.
      * Logs produced by executing smart contracts
      * @return True if the 'logs' field has been set, false otherwise.
      */
    public boolean hasLogs() {
      return fieldSetFlags()[22];
    }


    /**
      * Clears the value of the 'logs' field.
      * Logs produced by executing smart contracts
      * @return This builder.
      */
    public io.enkrypt.bolt.models.Transaction.Builder clearLogs() {
      logs = null;
      fieldSetFlags()[22] = false;
      return this;
    }

    /**
      * Gets the value of the 'trace' field.
      * Trace that describes contract creation, destruction or intenal transactions
      * @return The value.
      */
    public io.enkrypt.bolt.models.Trace getTrace() {
      return trace;
    }

    /**
      * Sets the value of the 'trace' field.
      * Trace that describes contract creation, destruction or intenal transactions
      * @param value The value of 'trace'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.Transaction.Builder setTrace(io.enkrypt.bolt.models.Trace value) {
      validate(fields()[23], value);
      this.traceBuilder = null;
      this.trace = value;
      fieldSetFlags()[23] = true;
      return this;
    }

    /**
      * Checks whether the 'trace' field has been set.
      * Trace that describes contract creation, destruction or intenal transactions
      * @return True if the 'trace' field has been set, false otherwise.
      */
    public boolean hasTrace() {
      return fieldSetFlags()[23];
    }

    /**
     * Gets the Builder instance for the 'trace' field and creates one if it doesn't exist yet.
     * Trace that describes contract creation, destruction or intenal transactions
     * @return This builder.
     */
    public io.enkrypt.bolt.models.Trace.Builder getTraceBuilder() {
      if (traceBuilder == null) {
        if (hasTrace()) {
          setTraceBuilder(io.enkrypt.bolt.models.Trace.newBuilder(trace));
        } else {
          setTraceBuilder(io.enkrypt.bolt.models.Trace.newBuilder());
        }
      }
      return traceBuilder;
    }

    /**
     * Sets the Builder instance for the 'trace' field
     * Trace that describes contract creation, destruction or intenal transactions
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public io.enkrypt.bolt.models.Transaction.Builder setTraceBuilder(io.enkrypt.bolt.models.Trace.Builder value) {
      clearTrace();
      traceBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'trace' field has an active Builder instance
     * Trace that describes contract creation, destruction or intenal transactions
     * @return True if the 'trace' field has an active Builder instance
     */
    public boolean hasTraceBuilder() {
      return traceBuilder != null;
    }

    /**
      * Clears the value of the 'trace' field.
      * Trace that describes contract creation, destruction or intenal transactions
      * @return This builder.
      */
    public io.enkrypt.bolt.models.Transaction.Builder clearTrace() {
      trace = null;
      traceBuilder = null;
      fieldSetFlags()[23] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Transaction build() {
      try {
        Transaction record = new Transaction();
        record.hash = fieldSetFlags()[0] ? this.hash : (java.nio.ByteBuffer) defaultValue(fields()[0], record.getConversion(0));
        record.root = fieldSetFlags()[1] ? this.root : (java.nio.ByteBuffer) defaultValue(fields()[1], record.getConversion(1));
        record.index = fieldSetFlags()[2] ? this.index : (java.lang.Integer) defaultValue(fields()[2], record.getConversion(2));
        record.timestamp = fieldSetFlags()[3] ? this.timestamp : (org.joda.time.DateTime) defaultValue(fields()[3], record.getConversion(3));
        record.nonce = fieldSetFlags()[4] ? this.nonce : (java.nio.ByteBuffer) defaultValue(fields()[4], record.getConversion(4));
        record.nonceHash = fieldSetFlags()[5] ? this.nonceHash : (java.nio.ByteBuffer) defaultValue(fields()[5], record.getConversion(5));
        record.from = fieldSetFlags()[6] ? this.from : (java.nio.ByteBuffer) defaultValue(fields()[6], record.getConversion(6));
        record.fromBalance = fieldSetFlags()[7] ? this.fromBalance : (java.nio.ByteBuffer) defaultValue(fields()[7], record.getConversion(7));
        record.to = fieldSetFlags()[8] ? this.to : (java.nio.ByteBuffer) defaultValue(fields()[8], record.getConversion(8));
        record.toBalance = fieldSetFlags()[9] ? this.toBalance : (java.nio.ByteBuffer) defaultValue(fields()[9], record.getConversion(9));
        record.input = fieldSetFlags()[10] ? this.input : (java.nio.ByteBuffer) defaultValue(fields()[10], record.getConversion(10));
        record.contractAddress = fieldSetFlags()[11] ? this.contractAddress : (java.nio.ByteBuffer) defaultValue(fields()[11], record.getConversion(11));
        record.value = fieldSetFlags()[12] ? this.value : (java.nio.ByteBuffer) defaultValue(fields()[12], record.getConversion(12));
        record.gas = fieldSetFlags()[13] ? this.gas : (java.nio.ByteBuffer) defaultValue(fields()[13], record.getConversion(13));
        record.gasPrice = fieldSetFlags()[14] ? this.gasPrice : (java.nio.ByteBuffer) defaultValue(fields()[14], record.getConversion(14));
        record.gasUsed = fieldSetFlags()[15] ? this.gasUsed : (java.nio.ByteBuffer) defaultValue(fields()[15], record.getConversion(15));
        record.cumulativeGasUsed = fieldSetFlags()[16] ? this.cumulativeGasUsed : (java.nio.ByteBuffer) defaultValue(fields()[16], record.getConversion(16));
        record.v = fieldSetFlags()[17] ? this.v : (java.nio.ByteBuffer) defaultValue(fields()[17], record.getConversion(17));
        record.r = fieldSetFlags()[18] ? this.r : (java.nio.ByteBuffer) defaultValue(fields()[18], record.getConversion(18));
        record.s = fieldSetFlags()[19] ? this.s : (java.nio.ByteBuffer) defaultValue(fields()[19], record.getConversion(19));
        record.status = fieldSetFlags()[20] ? this.status : (java.nio.ByteBuffer) defaultValue(fields()[20], record.getConversion(20));
        record.logsBloom = fieldSetFlags()[21] ? this.logsBloom : (java.nio.ByteBuffer) defaultValue(fields()[21], record.getConversion(21));
        record.logs = fieldSetFlags()[22] ? this.logs : (java.util.List<io.enkrypt.bolt.models.Log>) defaultValue(fields()[22], record.getConversion(22));
        if (traceBuilder != null) {
          record.trace = this.traceBuilder.build();
        } else {
          record.trace = fieldSetFlags()[23] ? this.trace : (io.enkrypt.bolt.models.Trace) defaultValue(fields()[23], record.getConversion(23));
        }
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Transaction>
    WRITER$ = (org.apache.avro.io.DatumWriter<Transaction>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Transaction>
    READER$ = (org.apache.avro.io.DatumReader<Transaction>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
