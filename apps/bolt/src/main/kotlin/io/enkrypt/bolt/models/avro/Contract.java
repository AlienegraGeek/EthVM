/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.enkrypt.bolt.models.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Contract extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7334369685146657731L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Contract\",\"namespace\":\"io.enkrypt.bolt.models.avro\",\"fields\":[{\"name\":\"address\",\"type\":\"string\",\"doc\":\"The contract address\"},{\"name\":\"data\",\"type\":[\"null\",\"bytes\"],\"doc\":\"Contract bytes if provided\"},{\"name\":\"type\",\"type\":[\"null\",\"string\"],\"doc\":\"Verified contract type\"},{\"name\":\"estimatedType\",\"type\":[\"null\",\"string\"],\"doc\":\"Current estimate of contract type\"},{\"name\":\"methodsSeen\",\"type\":{\"type\":\"array\",\"items\":\"string\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Contract> ENCODER =
      new BinaryMessageEncoder<Contract>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Contract> DECODER =
      new BinaryMessageDecoder<Contract>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Contract> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Contract> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Contract>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Contract to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Contract from a ByteBuffer. */
  public static Contract fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The contract address */
  @Deprecated public java.lang.CharSequence address;
  /** Contract bytes if provided */
  @Deprecated public java.nio.ByteBuffer data;
  /** Verified contract type */
  @Deprecated public java.lang.CharSequence type;
  /** Current estimate of contract type */
  @Deprecated public java.lang.CharSequence estimatedType;
  @Deprecated public java.util.List<java.lang.CharSequence> methodsSeen;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Contract() {}

  /**
   * All-args constructor.
   * @param address The contract address
   * @param data Contract bytes if provided
   * @param type Verified contract type
   * @param estimatedType Current estimate of contract type
   * @param methodsSeen The new value for methodsSeen
   */
  public Contract(java.lang.CharSequence address, java.nio.ByteBuffer data, java.lang.CharSequence type, java.lang.CharSequence estimatedType, java.util.List<java.lang.CharSequence> methodsSeen) {
    this.address = address;
    this.data = data;
    this.type = type;
    this.estimatedType = estimatedType;
    this.methodsSeen = methodsSeen;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return address;
    case 1: return data;
    case 2: return type;
    case 3: return estimatedType;
    case 4: return methodsSeen;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: address = (java.lang.CharSequence)value$; break;
    case 1: data = (java.nio.ByteBuffer)value$; break;
    case 2: type = (java.lang.CharSequence)value$; break;
    case 3: estimatedType = (java.lang.CharSequence)value$; break;
    case 4: methodsSeen = (java.util.List<java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'address' field.
   * @return The contract address
   */
  public java.lang.CharSequence getAddress() {
    return address;
  }

  /**
   * Sets the value of the 'address' field.
   * The contract address
   * @param value the value to set.
   */
  public void setAddress(java.lang.CharSequence value) {
    this.address = value;
  }

  /**
   * Gets the value of the 'data' field.
   * @return Contract bytes if provided
   */
  public java.nio.ByteBuffer getData() {
    return data;
  }

  /**
   * Sets the value of the 'data' field.
   * Contract bytes if provided
   * @param value the value to set.
   */
  public void setData(java.nio.ByteBuffer value) {
    this.data = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return Verified contract type
   */
  public java.lang.CharSequence getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * Verified contract type
   * @param value the value to set.
   */
  public void setType(java.lang.CharSequence value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'estimatedType' field.
   * @return Current estimate of contract type
   */
  public java.lang.CharSequence getEstimatedType() {
    return estimatedType;
  }

  /**
   * Sets the value of the 'estimatedType' field.
   * Current estimate of contract type
   * @param value the value to set.
   */
  public void setEstimatedType(java.lang.CharSequence value) {
    this.estimatedType = value;
  }

  /**
   * Gets the value of the 'methodsSeen' field.
   * @return The value of the 'methodsSeen' field.
   */
  public java.util.List<java.lang.CharSequence> getMethodsSeen() {
    return methodsSeen;
  }

  /**
   * Sets the value of the 'methodsSeen' field.
   * @param value the value to set.
   */
  public void setMethodsSeen(java.util.List<java.lang.CharSequence> value) {
    this.methodsSeen = value;
  }

  /**
   * Creates a new Contract RecordBuilder.
   * @return A new Contract RecordBuilder
   */
  public static io.enkrypt.bolt.models.avro.Contract.Builder newBuilder() {
    return new io.enkrypt.bolt.models.avro.Contract.Builder();
  }

  /**
   * Creates a new Contract RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Contract RecordBuilder
   */
  public static io.enkrypt.bolt.models.avro.Contract.Builder newBuilder(io.enkrypt.bolt.models.avro.Contract.Builder other) {
    return new io.enkrypt.bolt.models.avro.Contract.Builder(other);
  }

  /**
   * Creates a new Contract RecordBuilder by copying an existing Contract instance.
   * @param other The existing instance to copy.
   * @return A new Contract RecordBuilder
   */
  public static io.enkrypt.bolt.models.avro.Contract.Builder newBuilder(io.enkrypt.bolt.models.avro.Contract other) {
    return new io.enkrypt.bolt.models.avro.Contract.Builder(other);
  }

  /**
   * RecordBuilder for Contract instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Contract>
    implements org.apache.avro.data.RecordBuilder<Contract> {

    /** The contract address */
    private java.lang.CharSequence address;
    /** Contract bytes if provided */
    private java.nio.ByteBuffer data;
    /** Verified contract type */
    private java.lang.CharSequence type;
    /** Current estimate of contract type */
    private java.lang.CharSequence estimatedType;
    private java.util.List<java.lang.CharSequence> methodsSeen;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.enkrypt.bolt.models.avro.Contract.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.address)) {
        this.address = data().deepCopy(fields()[0].schema(), other.address);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.data)) {
        this.data = data().deepCopy(fields()[1].schema(), other.data);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.type)) {
        this.type = data().deepCopy(fields()[2].schema(), other.type);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.estimatedType)) {
        this.estimatedType = data().deepCopy(fields()[3].schema(), other.estimatedType);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.methodsSeen)) {
        this.methodsSeen = data().deepCopy(fields()[4].schema(), other.methodsSeen);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Contract instance
     * @param other The existing instance to copy.
     */
    private Builder(io.enkrypt.bolt.models.avro.Contract other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.address)) {
        this.address = data().deepCopy(fields()[0].schema(), other.address);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.data)) {
        this.data = data().deepCopy(fields()[1].schema(), other.data);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.type)) {
        this.type = data().deepCopy(fields()[2].schema(), other.type);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.estimatedType)) {
        this.estimatedType = data().deepCopy(fields()[3].schema(), other.estimatedType);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.methodsSeen)) {
        this.methodsSeen = data().deepCopy(fields()[4].schema(), other.methodsSeen);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'address' field.
      * The contract address
      * @return The value.
      */
    public java.lang.CharSequence getAddress() {
      return address;
    }

    /**
      * Sets the value of the 'address' field.
      * The contract address
      * @param value The value of 'address'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Contract.Builder setAddress(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.address = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'address' field has been set.
      * The contract address
      * @return True if the 'address' field has been set, false otherwise.
      */
    public boolean hasAddress() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'address' field.
      * The contract address
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Contract.Builder clearAddress() {
      address = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'data' field.
      * Contract bytes if provided
      * @return The value.
      */
    public java.nio.ByteBuffer getData() {
      return data;
    }

    /**
      * Sets the value of the 'data' field.
      * Contract bytes if provided
      * @param value The value of 'data'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Contract.Builder setData(java.nio.ByteBuffer value) {
      validate(fields()[1], value);
      this.data = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'data' field has been set.
      * Contract bytes if provided
      * @return True if the 'data' field has been set, false otherwise.
      */
    public boolean hasData() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'data' field.
      * Contract bytes if provided
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Contract.Builder clearData() {
      data = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * Verified contract type
      * @return The value.
      */
    public java.lang.CharSequence getType() {
      return type;
    }

    /**
      * Sets the value of the 'type' field.
      * Verified contract type
      * @param value The value of 'type'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Contract.Builder setType(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.type = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * Verified contract type
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'type' field.
      * Verified contract type
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Contract.Builder clearType() {
      type = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'estimatedType' field.
      * Current estimate of contract type
      * @return The value.
      */
    public java.lang.CharSequence getEstimatedType() {
      return estimatedType;
    }

    /**
      * Sets the value of the 'estimatedType' field.
      * Current estimate of contract type
      * @param value The value of 'estimatedType'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Contract.Builder setEstimatedType(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.estimatedType = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'estimatedType' field has been set.
      * Current estimate of contract type
      * @return True if the 'estimatedType' field has been set, false otherwise.
      */
    public boolean hasEstimatedType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'estimatedType' field.
      * Current estimate of contract type
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Contract.Builder clearEstimatedType() {
      estimatedType = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'methodsSeen' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getMethodsSeen() {
      return methodsSeen;
    }

    /**
      * Sets the value of the 'methodsSeen' field.
      * @param value The value of 'methodsSeen'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Contract.Builder setMethodsSeen(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[4], value);
      this.methodsSeen = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'methodsSeen' field has been set.
      * @return True if the 'methodsSeen' field has been set, false otherwise.
      */
    public boolean hasMethodsSeen() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'methodsSeen' field.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Contract.Builder clearMethodsSeen() {
      methodsSeen = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Contract build() {
      try {
        Contract record = new Contract();
        record.address = fieldSetFlags()[0] ? this.address : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.data = fieldSetFlags()[1] ? this.data : (java.nio.ByteBuffer) defaultValue(fields()[1]);
        record.type = fieldSetFlags()[2] ? this.type : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.estimatedType = fieldSetFlags()[3] ? this.estimatedType : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.methodsSeen = fieldSetFlags()[4] ? this.methodsSeen : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[4]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Contract>
    WRITER$ = (org.apache.avro.io.DatumWriter<Contract>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Contract>
    READER$ = (org.apache.avro.io.DatumReader<Contract>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
