/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.enkrypt.bolt.models.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Movement extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6850708659967070901L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Movement\",\"namespace\":\"io.enkrypt.bolt.models.avro\",\"fields\":[{\"name\":\"address\",\"type\":\"bytes\",\"doc\":\"Wallet address\"},{\"name\":\"contractAddress\",\"type\":[\"null\",\"bytes\"],\"doc\":\"Contract address\",\"default\":null},{\"name\":\"amount\",\"type\":\"bytes\",\"doc\":\"Value amount\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Movement> ENCODER =
      new BinaryMessageEncoder<Movement>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Movement> DECODER =
      new BinaryMessageDecoder<Movement>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Movement> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Movement> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Movement>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Movement to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Movement from a ByteBuffer. */
  public static Movement fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Wallet address */
  @Deprecated public java.nio.ByteBuffer address;
  /** Contract address */
  @Deprecated public java.nio.ByteBuffer contractAddress;
  /** Value amount */
  @Deprecated public java.nio.ByteBuffer amount;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Movement() {}

  /**
   * All-args constructor.
   * @param address Wallet address
   * @param contractAddress Contract address
   * @param amount Value amount
   */
  public Movement(java.nio.ByteBuffer address, java.nio.ByteBuffer contractAddress, java.nio.ByteBuffer amount) {
    this.address = address;
    this.contractAddress = contractAddress;
    this.amount = amount;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return address;
    case 1: return contractAddress;
    case 2: return amount;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: address = (java.nio.ByteBuffer)value$; break;
    case 1: contractAddress = (java.nio.ByteBuffer)value$; break;
    case 2: amount = (java.nio.ByteBuffer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'address' field.
   * @return Wallet address
   */
  public java.nio.ByteBuffer getAddress() {
    return address;
  }

  /**
   * Sets the value of the 'address' field.
   * Wallet address
   * @param value the value to set.
   */
  public void setAddress(java.nio.ByteBuffer value) {
    this.address = value;
  }

  /**
   * Gets the value of the 'contractAddress' field.
   * @return Contract address
   */
  public java.nio.ByteBuffer getContractAddress() {
    return contractAddress;
  }

  /**
   * Sets the value of the 'contractAddress' field.
   * Contract address
   * @param value the value to set.
   */
  public void setContractAddress(java.nio.ByteBuffer value) {
    this.contractAddress = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return Value amount
   */
  public java.nio.ByteBuffer getAmount() {
    return amount;
  }

  /**
   * Sets the value of the 'amount' field.
   * Value amount
   * @param value the value to set.
   */
  public void setAmount(java.nio.ByteBuffer value) {
    this.amount = value;
  }

  /**
   * Creates a new Movement RecordBuilder.
   * @return A new Movement RecordBuilder
   */
  public static io.enkrypt.bolt.models.avro.Movement.Builder newBuilder() {
    return new io.enkrypt.bolt.models.avro.Movement.Builder();
  }

  /**
   * Creates a new Movement RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Movement RecordBuilder
   */
  public static io.enkrypt.bolt.models.avro.Movement.Builder newBuilder(io.enkrypt.bolt.models.avro.Movement.Builder other) {
    return new io.enkrypt.bolt.models.avro.Movement.Builder(other);
  }

  /**
   * Creates a new Movement RecordBuilder by copying an existing Movement instance.
   * @param other The existing instance to copy.
   * @return A new Movement RecordBuilder
   */
  public static io.enkrypt.bolt.models.avro.Movement.Builder newBuilder(io.enkrypt.bolt.models.avro.Movement other) {
    return new io.enkrypt.bolt.models.avro.Movement.Builder(other);
  }

  /**
   * RecordBuilder for Movement instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Movement>
    implements org.apache.avro.data.RecordBuilder<Movement> {

    /** Wallet address */
    private java.nio.ByteBuffer address;
    /** Contract address */
    private java.nio.ByteBuffer contractAddress;
    /** Value amount */
    private java.nio.ByteBuffer amount;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.enkrypt.bolt.models.avro.Movement.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.address)) {
        this.address = data().deepCopy(fields()[0].schema(), other.address);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.contractAddress)) {
        this.contractAddress = data().deepCopy(fields()[1].schema(), other.contractAddress);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.amount)) {
        this.amount = data().deepCopy(fields()[2].schema(), other.amount);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Movement instance
     * @param other The existing instance to copy.
     */
    private Builder(io.enkrypt.bolt.models.avro.Movement other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.address)) {
        this.address = data().deepCopy(fields()[0].schema(), other.address);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.contractAddress)) {
        this.contractAddress = data().deepCopy(fields()[1].schema(), other.contractAddress);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.amount)) {
        this.amount = data().deepCopy(fields()[2].schema(), other.amount);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'address' field.
      * Wallet address
      * @return The value.
      */
    public java.nio.ByteBuffer getAddress() {
      return address;
    }

    /**
      * Sets the value of the 'address' field.
      * Wallet address
      * @param value The value of 'address'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Movement.Builder setAddress(java.nio.ByteBuffer value) {
      validate(fields()[0], value);
      this.address = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'address' field has been set.
      * Wallet address
      * @return True if the 'address' field has been set, false otherwise.
      */
    public boolean hasAddress() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'address' field.
      * Wallet address
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Movement.Builder clearAddress() {
      address = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'contractAddress' field.
      * Contract address
      * @return The value.
      */
    public java.nio.ByteBuffer getContractAddress() {
      return contractAddress;
    }

    /**
      * Sets the value of the 'contractAddress' field.
      * Contract address
      * @param value The value of 'contractAddress'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Movement.Builder setContractAddress(java.nio.ByteBuffer value) {
      validate(fields()[1], value);
      this.contractAddress = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'contractAddress' field has been set.
      * Contract address
      * @return True if the 'contractAddress' field has been set, false otherwise.
      */
    public boolean hasContractAddress() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'contractAddress' field.
      * Contract address
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Movement.Builder clearContractAddress() {
      contractAddress = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * Value amount
      * @return The value.
      */
    public java.nio.ByteBuffer getAmount() {
      return amount;
    }

    /**
      * Sets the value of the 'amount' field.
      * Value amount
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Movement.Builder setAmount(java.nio.ByteBuffer value) {
      validate(fields()[2], value);
      this.amount = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * Value amount
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'amount' field.
      * Value amount
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Movement.Builder clearAmount() {
      amount = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Movement build() {
      try {
        Movement record = new Movement();
        record.address = fieldSetFlags()[0] ? this.address : (java.nio.ByteBuffer) defaultValue(fields()[0]);
        record.contractAddress = fieldSetFlags()[1] ? this.contractAddress : (java.nio.ByteBuffer) defaultValue(fields()[1]);
        record.amount = fieldSetFlags()[2] ? this.amount : (java.nio.ByteBuffer) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Movement>
    WRITER$ = (org.apache.avro.io.DatumWriter<Movement>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Movement>
    READER$ = (org.apache.avro.io.DatumReader<Movement>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
