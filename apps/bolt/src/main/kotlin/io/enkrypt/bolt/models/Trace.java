/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package io.enkrypt.bolt.models;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Trace extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6743705274902235732L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Trace\",\"namespace\":\"io.enkrypt.bolt.models\",\"fields\":[{\"name\":\"isError\",\"type\":\"boolean\",\"desc\":\"Signals if an error happened during execution\"},{\"name\":\"msg\",\"type\":\"string\",\"desc\":\"Stores the error message\"},{\"name\":\"transfers\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Transfer\",\"fields\":[{\"name\":\"op\",\"type\":\"string\",\"doc\":\"Type of op executed inside the transaction\"},{\"name\":\"from\",\"type\":\"string\",\"doc\":\"\"},{\"name\":\"to\",\"type\":\"string\",\"doc\":\"\"},{\"name\":\"input\",\"type\":\"bytes\",\"doc\":\"\"}]}},\"desc\":\"An array describing transfers\"}]}");

  public static org.apache.avro.Schema getClassSchema() {
    return SCHEMA$;
  }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Trace> ENCODER =
    new BinaryMessageEncoder<Trace>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Trace> DECODER =
    new BinaryMessageDecoder<Trace>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Trace> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Trace> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Trace>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Trace to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Trace from a ByteBuffer. */
  public static Trace fromByteBuffer(
    java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated
  public boolean isError;
  @Deprecated
  public CharSequence msg;
  @Deprecated
  public java.util.List<io.enkrypt.bolt.models.Transfer> transfers;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Trace() {
  }

  /**
   * All-args constructor.
   * @param isError The new value for isError
   * @param msg The new value for msg
   * @param transfers The new value for transfers
   */
  public Trace(Boolean isError, CharSequence msg, java.util.List<io.enkrypt.bolt.models.Transfer> transfers) {
    this.isError = isError;
    this.msg = msg;
    this.transfers = transfers;
  }

  public org.apache.avro.Schema getSchema() {
    return SCHEMA$;
  }

  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
      case 0:
        return isError;
      case 1:
        return msg;
      case 2:
        return transfers;
      default:
        throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value = "unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
      case 0:
        isError = (Boolean) value$;
        break;
      case 1:
        msg = (CharSequence) value$;
        break;
      case 2:
        transfers = (java.util.List<io.enkrypt.bolt.models.Transfer>) value$;
        break;
      default:
        throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'isError' field.
   * @return The value of the 'isError' field.
   */
  public Boolean getIsError() {
    return isError;
  }

  /**
   * Sets the value of the 'isError' field.
   * @param value the value to set.
   */
  public void setIsError(Boolean value) {
    this.isError = value;
  }

  /**
   * Gets the value of the 'msg' field.
   * @return The value of the 'msg' field.
   */
  public CharSequence getMsg() {
    return msg;
  }

  /**
   * Sets the value of the 'msg' field.
   * @param value the value to set.
   */
  public void setMsg(CharSequence value) {
    this.msg = value;
  }

  /**
   * Gets the value of the 'transfers' field.
   * @return The value of the 'transfers' field.
   */
  public java.util.List<io.enkrypt.bolt.models.Transfer> getTransfers() {
    return transfers;
  }

  /**
   * Sets the value of the 'transfers' field.
   * @param value the value to set.
   */
  public void setTransfers(java.util.List<io.enkrypt.bolt.models.Transfer> value) {
    this.transfers = value;
  }

  /**
   * Creates a new Trace RecordBuilder.
   * @return A new Trace RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new Trace RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Trace RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /**
   * Creates a new Trace RecordBuilder by copying an existing Trace instance.
   * @param other The existing instance to copy.
   * @return A new Trace RecordBuilder
   */
  public static Builder newBuilder(Trace other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for Trace instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Trace>
    implements org.apache.avro.data.RecordBuilder<Trace> {

    private boolean isError;
    private CharSequence msg;
    private java.util.List<io.enkrypt.bolt.models.Transfer> transfers;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.isError)) {
        this.isError = data().deepCopy(fields()[0].schema(), other.isError);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.msg)) {
        this.msg = data().deepCopy(fields()[1].schema(), other.msg);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.transfers)) {
        this.transfers = data().deepCopy(fields()[2].schema(), other.transfers);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Trace instance
     * @param other The existing instance to copy.
     */
    private Builder(Trace other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.isError)) {
        this.isError = data().deepCopy(fields()[0].schema(), other.isError);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.msg)) {
        this.msg = data().deepCopy(fields()[1].schema(), other.msg);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.transfers)) {
        this.transfers = data().deepCopy(fields()[2].schema(), other.transfers);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Gets the value of the 'isError' field.
     * @return The value.
     */
    public Boolean getIsError() {
      return isError;
    }

    /**
     * Sets the value of the 'isError' field.
     * @param value The value of 'isError'.
     * @return This builder.
     */
    public Builder setIsError(boolean value) {
      validate(fields()[0], value);
      this.isError = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
     * Checks whether the 'isError' field has been set.
     * @return True if the 'isError' field has been set, false otherwise.
     */
    public boolean hasIsError() {
      return fieldSetFlags()[0];
    }


    /**
     * Clears the value of the 'isError' field.
     * @return This builder.
     */
    public Builder clearIsError() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
     * Gets the value of the 'msg' field.
     * @return The value.
     */
    public CharSequence getMsg() {
      return msg;
    }

    /**
     * Sets the value of the 'msg' field.
     * @param value The value of 'msg'.
     * @return This builder.
     */
    public Builder setMsg(CharSequence value) {
      validate(fields()[1], value);
      this.msg = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
     * Checks whether the 'msg' field has been set.
     * @return True if the 'msg' field has been set, false otherwise.
     */
    public boolean hasMsg() {
      return fieldSetFlags()[1];
    }


    /**
     * Clears the value of the 'msg' field.
     * @return This builder.
     */
    public Builder clearMsg() {
      msg = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
     * Gets the value of the 'transfers' field.
     * @return The value.
     */
    public java.util.List<io.enkrypt.bolt.models.Transfer> getTransfers() {
      return transfers;
    }

    /**
     * Sets the value of the 'transfers' field.
     * @param value The value of 'transfers'.
     * @return This builder.
     */
    public Builder setTransfers(java.util.List<io.enkrypt.bolt.models.Transfer> value) {
      validate(fields()[2], value);
      this.transfers = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
     * Checks whether the 'transfers' field has been set.
     * @return True if the 'transfers' field has been set, false otherwise.
     */
    public boolean hasTransfers() {
      return fieldSetFlags()[2];
    }


    /**
     * Clears the value of the 'transfers' field.
     * @return This builder.
     */
    public Builder clearTransfers() {
      transfers = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Trace build() {
      try {
        Trace record = new Trace();
        record.isError = fieldSetFlags()[0] ? this.isError : (Boolean) defaultValue(fields()[0]);
        record.msg = fieldSetFlags()[1] ? this.msg : (CharSequence) defaultValue(fields()[1]);
        record.transfers = fieldSetFlags()[2] ? this.transfers : (java.util.List<io.enkrypt.bolt.models.Transfer>) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Trace>
    WRITER$ = (org.apache.avro.io.DatumWriter<Trace>) MODEL$.createDatumWriter(SCHEMA$);

  @Override
  public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Trace>
    READER$ = (org.apache.avro.io.DatumReader<Trace>) MODEL$.createDatumReader(SCHEMA$);

  @Override
  public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
