/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.enkrypt.bolt.models;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Transfer extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5264509142911970470L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Transfer\",\"namespace\":\"io.enkrypt.bolt.models\",\"fields\":[{\"name\":\"op\",\"type\":\"string\",\"doc\":\"Type of op executed inside the transaction\"},{\"name\":\"value\",\"type\":\"string\",\"doc\":\"Raw value of the transaction\"},{\"name\":\"from\",\"type\":\"string\",\"doc\":\"Address of the sender\"},{\"name\":\"fromBalance\",\"type\":\"string\",\"doc\":\"Balance of the sender\"},{\"name\":\"to\",\"type\":\"string\",\"doc\":\"Address of the receiver\"},{\"name\":\"toBalance\",\"type\":\"string\",\"doc\":\"Balance of the receiver\"},{\"name\":\"input\",\"type\":\"string\",\"doc\":\"Raw input data\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Transfer> ENCODER =
      new BinaryMessageEncoder<Transfer>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Transfer> DECODER =
      new BinaryMessageDecoder<Transfer>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Transfer> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Transfer> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Transfer>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Transfer to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Transfer from a ByteBuffer. */
  public static Transfer fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Type of op executed inside the transaction */
  @Deprecated public CharSequence op;
  /** Raw value of the transaction */
  @Deprecated public CharSequence value;
  /** Address of the sender */
  @Deprecated public CharSequence from;
  /** Balance of the sender */
  @Deprecated public CharSequence fromBalance;
  /** Address of the receiver */
  @Deprecated public CharSequence to;
  /** Balance of the receiver */
  @Deprecated public CharSequence toBalance;
  /** Raw input data */
  @Deprecated public CharSequence input;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Transfer() {}

  /**
   * All-args constructor.
   * @param op Type of op executed inside the transaction
   * @param value Raw value of the transaction
   * @param from Address of the sender
   * @param fromBalance Balance of the sender
   * @param to Address of the receiver
   * @param toBalance Balance of the receiver
   * @param input Raw input data
   */
  public Transfer(CharSequence op, CharSequence value, CharSequence from, CharSequence fromBalance, CharSequence to, CharSequence toBalance, CharSequence input) {
    this.op = op;
    this.value = value;
    this.from = from;
    this.fromBalance = fromBalance;
    this.to = to;
    this.toBalance = toBalance;
    this.input = input;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return op;
    case 1: return value;
    case 2: return from;
    case 3: return fromBalance;
    case 4: return to;
    case 5: return toBalance;
    case 6: return input;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: op = (CharSequence)value$; break;
    case 1: value = (CharSequence)value$; break;
    case 2: from = (CharSequence)value$; break;
    case 3: fromBalance = (CharSequence)value$; break;
    case 4: to = (CharSequence)value$; break;
    case 5: toBalance = (CharSequence)value$; break;
    case 6: input = (CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'op' field.
   * @return Type of op executed inside the transaction
   */
  public CharSequence getOp() {
    return op;
  }

  /**
   * Sets the value of the 'op' field.
   * Type of op executed inside the transaction
   * @param value the value to set.
   */
  public void setOp(CharSequence value) {
    this.op = value;
  }

  /**
   * Gets the value of the 'value' field.
   * @return Raw value of the transaction
   */
  public CharSequence getValue() {
    return value;
  }

  /**
   * Sets the value of the 'value' field.
   * Raw value of the transaction
   * @param value the value to set.
   */
  public void setValue(CharSequence value) {
    this.value = value;
  }

  /**
   * Gets the value of the 'from' field.
   * @return Address of the sender
   */
  public CharSequence getFrom() {
    return from;
  }

  /**
   * Sets the value of the 'from' field.
   * Address of the sender
   * @param value the value to set.
   */
  public void setFrom(CharSequence value) {
    this.from = value;
  }

  /**
   * Gets the value of the 'fromBalance' field.
   * @return Balance of the sender
   */
  public CharSequence getFromBalance() {
    return fromBalance;
  }

  /**
   * Sets the value of the 'fromBalance' field.
   * Balance of the sender
   * @param value the value to set.
   */
  public void setFromBalance(CharSequence value) {
    this.fromBalance = value;
  }

  /**
   * Gets the value of the 'to' field.
   * @return Address of the receiver
   */
  public CharSequence getTo() {
    return to;
  }

  /**
   * Sets the value of the 'to' field.
   * Address of the receiver
   * @param value the value to set.
   */
  public void setTo(CharSequence value) {
    this.to = value;
  }

  /**
   * Gets the value of the 'toBalance' field.
   * @return Balance of the receiver
   */
  public CharSequence getToBalance() {
    return toBalance;
  }

  /**
   * Sets the value of the 'toBalance' field.
   * Balance of the receiver
   * @param value the value to set.
   */
  public void setToBalance(CharSequence value) {
    this.toBalance = value;
  }

  /**
   * Gets the value of the 'input' field.
   * @return Raw input data
   */
  public CharSequence getInput() {
    return input;
  }

  /**
   * Sets the value of the 'input' field.
   * Raw input data
   * @param value the value to set.
   */
  public void setInput(CharSequence value) {
    this.input = value;
  }

  /**
   * Creates a new Transfer RecordBuilder.
   * @return A new Transfer RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new Transfer RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Transfer RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /**
   * Creates a new Transfer RecordBuilder by copying an existing Transfer instance.
   * @param other The existing instance to copy.
   * @return A new Transfer RecordBuilder
   */
  public static Builder newBuilder(Transfer other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for Transfer instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Transfer>
    implements org.apache.avro.data.RecordBuilder<Transfer> {

    /** Type of op executed inside the transaction */
    private CharSequence op;
    /** Raw value of the transaction */
    private CharSequence value;
    /** Address of the sender */
    private CharSequence from;
    /** Balance of the sender */
    private CharSequence fromBalance;
    /** Address of the receiver */
    private CharSequence to;
    /** Balance of the receiver */
    private CharSequence toBalance;
    /** Raw input data */
    private CharSequence input;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.op)) {
        this.op = data().deepCopy(fields()[0].schema(), other.op);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.value)) {
        this.value = data().deepCopy(fields()[1].schema(), other.value);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.from)) {
        this.from = data().deepCopy(fields()[2].schema(), other.from);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.fromBalance)) {
        this.fromBalance = data().deepCopy(fields()[3].schema(), other.fromBalance);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.to)) {
        this.to = data().deepCopy(fields()[4].schema(), other.to);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.toBalance)) {
        this.toBalance = data().deepCopy(fields()[5].schema(), other.toBalance);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.input)) {
        this.input = data().deepCopy(fields()[6].schema(), other.input);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Transfer instance
     * @param other The existing instance to copy.
     */
    private Builder(Transfer other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.op)) {
        this.op = data().deepCopy(fields()[0].schema(), other.op);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.value)) {
        this.value = data().deepCopy(fields()[1].schema(), other.value);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.from)) {
        this.from = data().deepCopy(fields()[2].schema(), other.from);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.fromBalance)) {
        this.fromBalance = data().deepCopy(fields()[3].schema(), other.fromBalance);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.to)) {
        this.to = data().deepCopy(fields()[4].schema(), other.to);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.toBalance)) {
        this.toBalance = data().deepCopy(fields()[5].schema(), other.toBalance);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.input)) {
        this.input = data().deepCopy(fields()[6].schema(), other.input);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'op' field.
      * Type of op executed inside the transaction
      * @return The value.
      */
    public CharSequence getOp() {
      return op;
    }

    /**
      * Sets the value of the 'op' field.
      * Type of op executed inside the transaction
      * @param value The value of 'op'.
      * @return This builder.
      */
    public Builder setOp(CharSequence value) {
      validate(fields()[0], value);
      this.op = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'op' field has been set.
      * Type of op executed inside the transaction
      * @return True if the 'op' field has been set, false otherwise.
      */
    public boolean hasOp() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'op' field.
      * Type of op executed inside the transaction
      * @return This builder.
      */
    public Builder clearOp() {
      op = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'value' field.
      * Raw value of the transaction
      * @return The value.
      */
    public CharSequence getValue() {
      return value;
    }

    /**
      * Sets the value of the 'value' field.
      * Raw value of the transaction
      * @param value The value of 'value'.
      * @return This builder.
      */
    public Builder setValue(CharSequence value) {
      validate(fields()[1], value);
      this.value = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'value' field has been set.
      * Raw value of the transaction
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'value' field.
      * Raw value of the transaction
      * @return This builder.
      */
    public Builder clearValue() {
      value = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'from' field.
      * Address of the sender
      * @return The value.
      */
    public CharSequence getFrom() {
      return from;
    }

    /**
      * Sets the value of the 'from' field.
      * Address of the sender
      * @param value The value of 'from'.
      * @return This builder.
      */
    public Builder setFrom(CharSequence value) {
      validate(fields()[2], value);
      this.from = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'from' field has been set.
      * Address of the sender
      * @return True if the 'from' field has been set, false otherwise.
      */
    public boolean hasFrom() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'from' field.
      * Address of the sender
      * @return This builder.
      */
    public Builder clearFrom() {
      from = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'fromBalance' field.
      * Balance of the sender
      * @return The value.
      */
    public CharSequence getFromBalance() {
      return fromBalance;
    }

    /**
      * Sets the value of the 'fromBalance' field.
      * Balance of the sender
      * @param value The value of 'fromBalance'.
      * @return This builder.
      */
    public Builder setFromBalance(CharSequence value) {
      validate(fields()[3], value);
      this.fromBalance = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'fromBalance' field has been set.
      * Balance of the sender
      * @return True if the 'fromBalance' field has been set, false otherwise.
      */
    public boolean hasFromBalance() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'fromBalance' field.
      * Balance of the sender
      * @return This builder.
      */
    public Builder clearFromBalance() {
      fromBalance = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'to' field.
      * Address of the receiver
      * @return The value.
      */
    public CharSequence getTo() {
      return to;
    }

    /**
      * Sets the value of the 'to' field.
      * Address of the receiver
      * @param value The value of 'to'.
      * @return This builder.
      */
    public Builder setTo(CharSequence value) {
      validate(fields()[4], value);
      this.to = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'to' field has been set.
      * Address of the receiver
      * @return True if the 'to' field has been set, false otherwise.
      */
    public boolean hasTo() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'to' field.
      * Address of the receiver
      * @return This builder.
      */
    public Builder clearTo() {
      to = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'toBalance' field.
      * Balance of the receiver
      * @return The value.
      */
    public CharSequence getToBalance() {
      return toBalance;
    }

    /**
      * Sets the value of the 'toBalance' field.
      * Balance of the receiver
      * @param value The value of 'toBalance'.
      * @return This builder.
      */
    public Builder setToBalance(CharSequence value) {
      validate(fields()[5], value);
      this.toBalance = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'toBalance' field has been set.
      * Balance of the receiver
      * @return True if the 'toBalance' field has been set, false otherwise.
      */
    public boolean hasToBalance() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'toBalance' field.
      * Balance of the receiver
      * @return This builder.
      */
    public Builder clearToBalance() {
      toBalance = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'input' field.
      * Raw input data
      * @return The value.
      */
    public CharSequence getInput() {
      return input;
    }

    /**
      * Sets the value of the 'input' field.
      * Raw input data
      * @param value The value of 'input'.
      * @return This builder.
      */
    public Builder setInput(CharSequence value) {
      validate(fields()[6], value);
      this.input = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'input' field has been set.
      * Raw input data
      * @return True if the 'input' field has been set, false otherwise.
      */
    public boolean hasInput() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'input' field.
      * Raw input data
      * @return This builder.
      */
    public Builder clearInput() {
      input = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Transfer build() {
      try {
        Transfer record = new Transfer();
        record.op = fieldSetFlags()[0] ? this.op : (CharSequence) defaultValue(fields()[0]);
        record.value = fieldSetFlags()[1] ? this.value : (CharSequence) defaultValue(fields()[1]);
        record.from = fieldSetFlags()[2] ? this.from : (CharSequence) defaultValue(fields()[2]);
        record.fromBalance = fieldSetFlags()[3] ? this.fromBalance : (CharSequence) defaultValue(fields()[3]);
        record.to = fieldSetFlags()[4] ? this.to : (CharSequence) defaultValue(fields()[4]);
        record.toBalance = fieldSetFlags()[5] ? this.toBalance : (CharSequence) defaultValue(fields()[5]);
        record.input = fieldSetFlags()[6] ? this.input : (CharSequence) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Transfer>
    WRITER$ = (org.apache.avro.io.DatumWriter<Transfer>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Transfer>
    READER$ = (org.apache.avro.io.DatumReader<Transfer>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
