/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.enkrypt.bolt.models.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class BalanceKey extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7795987043426938101L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"BalanceKey\",\"namespace\":\"io.enkrypt.bolt.models.avro\",\"fields\":[{\"name\":\"address\",\"type\":\"bytes\"},{\"name\":\"contractAddress\",\"type\":[\"null\",\"bytes\"],\"doc\":\"Optional contract address for tracking token balances\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<BalanceKey> ENCODER =
      new BinaryMessageEncoder<BalanceKey>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<BalanceKey> DECODER =
      new BinaryMessageDecoder<BalanceKey>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<BalanceKey> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<BalanceKey> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<BalanceKey>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this BalanceKey to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a BalanceKey from a ByteBuffer. */
  public static BalanceKey fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.nio.ByteBuffer address;
  /** Optional contract address for tracking token balances */
  @Deprecated public java.nio.ByteBuffer contractAddress;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public BalanceKey() {}

  /**
   * All-args constructor.
   * @param address The new value for address
   * @param contractAddress Optional contract address for tracking token balances
   */
  public BalanceKey(java.nio.ByteBuffer address, java.nio.ByteBuffer contractAddress) {
    this.address = address;
    this.contractAddress = contractAddress;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return address;
    case 1: return contractAddress;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: address = (java.nio.ByteBuffer)value$; break;
    case 1: contractAddress = (java.nio.ByteBuffer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'address' field.
   * @return The value of the 'address' field.
   */
  public java.nio.ByteBuffer getAddress() {
    return address;
  }

  /**
   * Sets the value of the 'address' field.
   * @param value the value to set.
   */
  public void setAddress(java.nio.ByteBuffer value) {
    this.address = value;
  }

  /**
   * Gets the value of the 'contractAddress' field.
   * @return Optional contract address for tracking token balances
   */
  public java.nio.ByteBuffer getContractAddress() {
    return contractAddress;
  }

  /**
   * Sets the value of the 'contractAddress' field.
   * Optional contract address for tracking token balances
   * @param value the value to set.
   */
  public void setContractAddress(java.nio.ByteBuffer value) {
    this.contractAddress = value;
  }

  /**
   * Creates a new BalanceKey RecordBuilder.
   * @return A new BalanceKey RecordBuilder
   */
  public static io.enkrypt.bolt.models.avro.BalanceKey.Builder newBuilder() {
    return new io.enkrypt.bolt.models.avro.BalanceKey.Builder();
  }

  /**
   * Creates a new BalanceKey RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new BalanceKey RecordBuilder
   */
  public static io.enkrypt.bolt.models.avro.BalanceKey.Builder newBuilder(io.enkrypt.bolt.models.avro.BalanceKey.Builder other) {
    return new io.enkrypt.bolt.models.avro.BalanceKey.Builder(other);
  }

  /**
   * Creates a new BalanceKey RecordBuilder by copying an existing BalanceKey instance.
   * @param other The existing instance to copy.
   * @return A new BalanceKey RecordBuilder
   */
  public static io.enkrypt.bolt.models.avro.BalanceKey.Builder newBuilder(io.enkrypt.bolt.models.avro.BalanceKey other) {
    return new io.enkrypt.bolt.models.avro.BalanceKey.Builder(other);
  }

  /**
   * RecordBuilder for BalanceKey instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<BalanceKey>
    implements org.apache.avro.data.RecordBuilder<BalanceKey> {

    private java.nio.ByteBuffer address;
    /** Optional contract address for tracking token balances */
    private java.nio.ByteBuffer contractAddress;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.enkrypt.bolt.models.avro.BalanceKey.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.address)) {
        this.address = data().deepCopy(fields()[0].schema(), other.address);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.contractAddress)) {
        this.contractAddress = data().deepCopy(fields()[1].schema(), other.contractAddress);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing BalanceKey instance
     * @param other The existing instance to copy.
     */
    private Builder(io.enkrypt.bolt.models.avro.BalanceKey other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.address)) {
        this.address = data().deepCopy(fields()[0].schema(), other.address);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.contractAddress)) {
        this.contractAddress = data().deepCopy(fields()[1].schema(), other.contractAddress);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'address' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getAddress() {
      return address;
    }

    /**
      * Sets the value of the 'address' field.
      * @param value The value of 'address'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.BalanceKey.Builder setAddress(java.nio.ByteBuffer value) {
      validate(fields()[0], value);
      this.address = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'address' field has been set.
      * @return True if the 'address' field has been set, false otherwise.
      */
    public boolean hasAddress() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'address' field.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.BalanceKey.Builder clearAddress() {
      address = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'contractAddress' field.
      * Optional contract address for tracking token balances
      * @return The value.
      */
    public java.nio.ByteBuffer getContractAddress() {
      return contractAddress;
    }

    /**
      * Sets the value of the 'contractAddress' field.
      * Optional contract address for tracking token balances
      * @param value The value of 'contractAddress'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.BalanceKey.Builder setContractAddress(java.nio.ByteBuffer value) {
      validate(fields()[1], value);
      this.contractAddress = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'contractAddress' field has been set.
      * Optional contract address for tracking token balances
      * @return True if the 'contractAddress' field has been set, false otherwise.
      */
    public boolean hasContractAddress() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'contractAddress' field.
      * Optional contract address for tracking token balances
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.BalanceKey.Builder clearContractAddress() {
      contractAddress = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public BalanceKey build() {
      try {
        BalanceKey record = new BalanceKey();
        record.address = fieldSetFlags()[0] ? this.address : (java.nio.ByteBuffer) defaultValue(fields()[0]);
        record.contractAddress = fieldSetFlags()[1] ? this.contractAddress : (java.nio.ByteBuffer) defaultValue(fields()[1]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<BalanceKey>
    WRITER$ = (org.apache.avro.io.DatumWriter<BalanceKey>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<BalanceKey>
    READER$ = (org.apache.avro.io.DatumReader<BalanceKey>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
