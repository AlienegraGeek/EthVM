/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.enkrypt.bolt.models.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Block extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1835574139367213496L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Block\",\"namespace\":\"io.enkrypt.bolt.models.avro\",\"fields\":[{\"name\":\"number\",\"type\":\"bytes\",\"doc\":\"The block number\"},{\"name\":\"hash\",\"type\":\"bytes\",\"doc\":\"Hash of the block\"},{\"name\":\"parentHash\",\"type\":\"bytes\",\"doc\":\"Hash of the parent block\"},{\"name\":\"uncle\",\"type\":\"boolean\",\"doc\":\"Determines if the block is an uncle or not\"},{\"name\":\"status\",\"type\":\"int\",\"doc\":\"Specifies the status of the block (could be CanonStatTy or SideStatTy)\"},{\"name\":\"timestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},\"doc\":\"Unix timestamp for when the block was collated\"},{\"name\":\"nonce\",\"type\":\"bytes\",\"doc\":\"Hash of the generated proof-of-work\"},{\"name\":\"mixDigest\",\"type\":\"bytes\",\"doc\":\"Block header mix digest\"},{\"name\":\"sha3Uncles\",\"type\":\"bytes\",\"doc\":\"SHA3 of the uncles data in the block\"},{\"name\":\"logsBloom\",\"type\":\"bytes\",\"doc\":\"Bloom filter for the logs of the block\"},{\"name\":\"stateRoot\",\"type\":\"bytes\",\"doc\":\"Root of the final state trie of the block\"},{\"name\":\"transactionsRoot\",\"type\":\"bytes\",\"doc\":\"Root of the final transactions trie of the block\"},{\"name\":\"miner\",\"type\":\"bytes\",\"doc\":\"The address of the beneficiary to whom the mining rewards were given\"},{\"name\":\"difficulty\",\"type\":\"bytes\",\"doc\":\"Current difficulty for this block\"},{\"name\":\"totalDifficulty\",\"type\":\"bytes\",\"doc\":\"Current total difficulty of the chain until this block\"},{\"name\":\"extraData\",\"type\":\"bytes\",\"doc\":\"The extra data field of this block\"},{\"name\":\"size\",\"type\":\"bytes\",\"doc\":\"Integer the size of this block in bytes\"},{\"name\":\"gasLimit\",\"type\":\"bytes\",\"doc\":\"The maximum gas allowed in this block\"},{\"name\":\"gasUsed\",\"type\":\"bytes\",\"doc\":\"The total used gas by all transactions in this block\"},{\"name\":\"txsFees\",\"type\":\"bytes\",\"doc\":\"Total transaction fees for this block\"},{\"name\":\"blockReward\",\"type\":\"bytes\",\"doc\":\"Total current block reward\"},{\"name\":\"uncleReward\",\"type\":\"bytes\",\"doc\":\"Total current uncle reward\"},{\"name\":\"stats\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"BlockStats\",\"fields\":[{\"name\":\"blockTimeMs\",\"type\":\"int\",\"doc\":\"Time taken to find the block in milliseconds\"},{\"name\":\"numFailedTxs\",\"type\":\"int\",\"doc\":\"Number of failed transactions\"},{\"name\":\"numSuccessfulTxs\",\"type\":\"int\",\"doc\":\"Number of successful transactions\"},{\"name\":\"avgGasPrice\",\"type\":\"bytes\",\"doc\":\"Average gas price\"},{\"name\":\"avgTxsFees\",\"type\":\"bytes\",\"doc\":\"Total gas price\"}]}]},{\"name\":\"transactions\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Transaction\",\"fields\":[{\"name\":\"hash\",\"type\":\"bytes\",\"doc\":\"Hash of the transaction\"},{\"name\":\"root\",\"type\":\"bytes\",\"doc\":\"Root of the parent block\"},{\"name\":\"index\",\"type\":\"int\",\"doc\":\"Integer of the transactions index position in the block\"},{\"name\":\"timestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},\"doc\":\"Unix timestamp for when the transaction was collated\"},{\"name\":\"nonce\",\"type\":\"bytes\",\"doc\":\"Number of transactions sent from a given address\"},{\"name\":\"nonceHash\",\"type\":\"bytes\",\"doc\":\"SHA3 of the transaction nonce\"},{\"name\":\"from\",\"type\":\"bytes\",\"doc\":\"KAddress of the sender\"},{\"name\":\"fromBalance\",\"type\":\"bytes\",\"doc\":\"Balance of the sender\"},{\"name\":\"to\",\"type\":[\"null\",\"bytes\"],\"doc\":\"KAddress of the recipient (or null when contract creation)\"},{\"name\":\"toBalance\",\"type\":[\"null\",\"bytes\"],\"doc\":\"Balance of the receiver (or null when contract creation)\"},{\"name\":\"input\",\"type\":\"bytes\",\"doc\":\"The data send along with the transaction\"},{\"name\":\"contractAddress\",\"type\":[\"null\",\"bytes\"],\"doc\":\"If a contract is created, the address of it (or null if is just a regular transaction)\"},{\"name\":\"value\",\"type\":\"bytes\",\"doc\":\"Amount of value transferred in Wei\"},{\"name\":\"gas\",\"type\":\"bytes\",\"doc\":\"Amount of gas provided by the sender\"},{\"name\":\"gasPrice\",\"type\":\"bytes\",\"doc\":\"Amount of gas price provided by the sender in Wei\"},{\"name\":\"gasUsed\",\"type\":\"bytes\",\"doc\":\"Amount of gas used consumed by the transaction\"},{\"name\":\"cumulativeGasUsed\",\"type\":\"bytes\",\"doc\":\"Cumulative gas used by the transaction\"},{\"name\":\"v\",\"type\":\"bytes\",\"doc\":\"Transaction signature v\"},{\"name\":\"r\",\"type\":\"bytes\",\"doc\":\"Transaction signature r\"},{\"name\":\"s\",\"type\":\"bytes\",\"doc\":\"Transaction signature s\"},{\"name\":\"status\",\"type\":\"bytes\",\"doc\":\"Transaction result status\"},{\"name\":\"logsBloom\",\"type\":\"bytes\",\"doc\":\"Generated and encoded logs by the transaction\"},{\"name\":\"logs\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Log\",\"fields\":[{\"name\":\"address\",\"type\":\"bytes\",\"desc\":\"KAddress of the contract that generated the event\"},{\"name\":\"topics\",\"type\":{\"type\":\"array\",\"items\":\"bytes\"},\"desc\":\"List of topics provided by the contract\"},{\"name\":\"data\",\"type\":\"bytes\",\"desc\":\"Supplied by the contract, usually ABI-encoded\"},{\"name\":\"index\",\"type\":\"int\",\"desc\":\"Index of the log in the receipt\"},{\"name\":\"removed\",\"type\":\"boolean\",\"desc\":\"True if this log was reverted due to a chain reorganisation\"}]}},\"doc\":\"Logs produced by executing smart contracts\"},{\"name\":\"trace\",\"type\":{\"type\":\"record\",\"name\":\"Trace\",\"fields\":[{\"name\":\"isError\",\"type\":\"boolean\",\"desc\":\"Signals if an error happened during execution\"},{\"name\":\"msg\",\"type\":\"string\",\"desc\":\"Stores the error message\"},{\"name\":\"transfers\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Transfer\",\"fields\":[{\"name\":\"op\",\"type\":\"int\",\"doc\":\"Type of op executed inside the transaction\"},{\"name\":\"value\",\"type\":\"bytes\",\"doc\":\"Raw value of the transaction\"},{\"name\":\"from\",\"type\":\"bytes\",\"doc\":\"KAddress of the sender\"},{\"name\":\"fromBalance\",\"type\":\"bytes\",\"doc\":\"Balance of the sender\"},{\"name\":\"to\",\"type\":\"bytes\",\"doc\":\"KAddress of the receiver\"},{\"name\":\"toBalance\",\"type\":\"bytes\",\"doc\":\"Balance of the receiver\"},{\"name\":\"input\",\"type\":\"bytes\",\"doc\":\"Raw input data\"}]}},\"desc\":\"An array describing transfers\"}]},\"doc\":\"Trace that describes contract creation, destruction or intenal transactions\"}]}},\"doc\":\"Array of transactions\"},{\"name\":\"uncles\",\"type\":{\"type\":\"array\",\"items\":\"bytes\"},\"doc\":\"Array of uncle hashes\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Block> ENCODER =
      new BinaryMessageEncoder<Block>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Block> DECODER =
      new BinaryMessageDecoder<Block>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Block> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Block> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Block>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Block to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Block from a ByteBuffer. */
  public static Block fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The block number */
  @Deprecated public java.nio.ByteBuffer number;
  /** Hash of the block */
  @Deprecated public java.nio.ByteBuffer hash;
  /** Hash of the parent block */
  @Deprecated public java.nio.ByteBuffer parentHash;
  /** Determines if the block is an uncle or not */
  @Deprecated public boolean uncle;
  /** Specifies the status of the block (could be CanonStatTy or SideStatTy) */
  @Deprecated public int status;
  /** Unix timestamp for when the block was collated */
  @Deprecated public org.joda.time.DateTime timestamp;
  /** Hash of the generated proof-of-work */
  @Deprecated public java.nio.ByteBuffer nonce;
  /** Block header mix digest */
  @Deprecated public java.nio.ByteBuffer mixDigest;
  /** SHA3 of the uncles data in the block */
  @Deprecated public java.nio.ByteBuffer sha3Uncles;
  /** Bloom filter for the logs of the block */
  @Deprecated public java.nio.ByteBuffer logsBloom;
  /** Root of the final state trie of the block */
  @Deprecated public java.nio.ByteBuffer stateRoot;
  /** Root of the final transactions trie of the block */
  @Deprecated public java.nio.ByteBuffer transactionsRoot;
  /** The address of the beneficiary to whom the mining rewards were given */
  @Deprecated public java.nio.ByteBuffer miner;
  /** Current difficulty for this block */
  @Deprecated public java.nio.ByteBuffer difficulty;
  /** Current total difficulty of the chain until this block */
  @Deprecated public java.nio.ByteBuffer totalDifficulty;
  /** The extra data field of this block */
  @Deprecated public java.nio.ByteBuffer extraData;
  /** Integer the size of this block in bytes */
  @Deprecated public java.nio.ByteBuffer size;
  /** The maximum gas allowed in this block */
  @Deprecated public java.nio.ByteBuffer gasLimit;
  /** The total used gas by all transactions in this block */
  @Deprecated public java.nio.ByteBuffer gasUsed;
  /** Total transaction fees for this block */
  @Deprecated public java.nio.ByteBuffer txsFees;
  /** Total current block reward */
  @Deprecated public java.nio.ByteBuffer blockReward;
  /** Total current uncle reward */
  @Deprecated public java.nio.ByteBuffer uncleReward;
  @Deprecated public io.enkrypt.bolt.models.avro.BlockStats stats;
  /** Array of transactions */
  @Deprecated public java.util.List<io.enkrypt.bolt.models.avro.Transaction> transactions;
  /** Array of uncle hashes */
  @Deprecated public java.util.List<java.nio.ByteBuffer> uncles;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Block() {}

  /**
   * All-args constructor.
   * @param number The block number
   * @param hash Hash of the block
   * @param parentHash Hash of the parent block
   * @param uncle Determines if the block is an uncle or not
   * @param status Specifies the status of the block (could be CanonStatTy or SideStatTy)
   * @param timestamp Unix timestamp for when the block was collated
   * @param nonce Hash of the generated proof-of-work
   * @param mixDigest Block header mix digest
   * @param sha3Uncles SHA3 of the uncles data in the block
   * @param logsBloom Bloom filter for the logs of the block
   * @param stateRoot Root of the final state trie of the block
   * @param transactionsRoot Root of the final transactions trie of the block
   * @param miner The address of the beneficiary to whom the mining rewards were given
   * @param difficulty Current difficulty for this block
   * @param totalDifficulty Current total difficulty of the chain until this block
   * @param extraData The extra data field of this block
   * @param size Integer the size of this block in bytes
   * @param gasLimit The maximum gas allowed in this block
   * @param gasUsed The total used gas by all transactions in this block
   * @param txsFees Total transaction fees for this block
   * @param blockReward Total current block reward
   * @param uncleReward Total current uncle reward
   * @param stats The new value for stats
   * @param transactions Array of transactions
   * @param uncles Array of uncle hashes
   */
  public Block(java.nio.ByteBuffer number, java.nio.ByteBuffer hash, java.nio.ByteBuffer parentHash, java.lang.Boolean uncle, java.lang.Integer status, org.joda.time.DateTime timestamp, java.nio.ByteBuffer nonce, java.nio.ByteBuffer mixDigest, java.nio.ByteBuffer sha3Uncles, java.nio.ByteBuffer logsBloom, java.nio.ByteBuffer stateRoot, java.nio.ByteBuffer transactionsRoot, java.nio.ByteBuffer miner, java.nio.ByteBuffer difficulty, java.nio.ByteBuffer totalDifficulty, java.nio.ByteBuffer extraData, java.nio.ByteBuffer size, java.nio.ByteBuffer gasLimit, java.nio.ByteBuffer gasUsed, java.nio.ByteBuffer txsFees, java.nio.ByteBuffer blockReward, java.nio.ByteBuffer uncleReward, io.enkrypt.bolt.models.avro.BlockStats stats, java.util.List<io.enkrypt.bolt.models.avro.Transaction> transactions, java.util.List<java.nio.ByteBuffer> uncles) {
    this.number = number;
    this.hash = hash;
    this.parentHash = parentHash;
    this.uncle = uncle;
    this.status = status;
    this.timestamp = timestamp;
    this.nonce = nonce;
    this.mixDigest = mixDigest;
    this.sha3Uncles = sha3Uncles;
    this.logsBloom = logsBloom;
    this.stateRoot = stateRoot;
    this.transactionsRoot = transactionsRoot;
    this.miner = miner;
    this.difficulty = difficulty;
    this.totalDifficulty = totalDifficulty;
    this.extraData = extraData;
    this.size = size;
    this.gasLimit = gasLimit;
    this.gasUsed = gasUsed;
    this.txsFees = txsFees;
    this.blockReward = blockReward;
    this.uncleReward = uncleReward;
    this.stats = stats;
    this.transactions = transactions;
    this.uncles = uncles;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return number;
    case 1: return hash;
    case 2: return parentHash;
    case 3: return uncle;
    case 4: return status;
    case 5: return timestamp;
    case 6: return nonce;
    case 7: return mixDigest;
    case 8: return sha3Uncles;
    case 9: return logsBloom;
    case 10: return stateRoot;
    case 11: return transactionsRoot;
    case 12: return miner;
    case 13: return difficulty;
    case 14: return totalDifficulty;
    case 15: return extraData;
    case 16: return size;
    case 17: return gasLimit;
    case 18: return gasUsed;
    case 19: return txsFees;
    case 20: return blockReward;
    case 21: return uncleReward;
    case 22: return stats;
    case 23: return transactions;
    case 24: return uncles;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  protected static final org.apache.avro.data.TimeConversions.DateConversion DATE_CONVERSION = new org.apache.avro.data.TimeConversions.DateConversion();
  protected static final org.apache.avro.data.TimeConversions.TimeConversion TIME_CONVERSION = new org.apache.avro.data.TimeConversions.TimeConversion();
  protected static final org.apache.avro.data.TimeConversions.TimestampConversion TIMESTAMP_CONVERSION = new org.apache.avro.data.TimeConversions.TimestampConversion();
  protected static final org.apache.avro.Conversions.DecimalConversion DECIMAL_CONVERSION = new org.apache.avro.Conversions.DecimalConversion();

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      null,
      null,
      TIMESTAMP_CONVERSION,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: number = (java.nio.ByteBuffer)value$; break;
    case 1: hash = (java.nio.ByteBuffer)value$; break;
    case 2: parentHash = (java.nio.ByteBuffer)value$; break;
    case 3: uncle = (java.lang.Boolean)value$; break;
    case 4: status = (java.lang.Integer)value$; break;
    case 5: timestamp = (org.joda.time.DateTime)value$; break;
    case 6: nonce = (java.nio.ByteBuffer)value$; break;
    case 7: mixDigest = (java.nio.ByteBuffer)value$; break;
    case 8: sha3Uncles = (java.nio.ByteBuffer)value$; break;
    case 9: logsBloom = (java.nio.ByteBuffer)value$; break;
    case 10: stateRoot = (java.nio.ByteBuffer)value$; break;
    case 11: transactionsRoot = (java.nio.ByteBuffer)value$; break;
    case 12: miner = (java.nio.ByteBuffer)value$; break;
    case 13: difficulty = (java.nio.ByteBuffer)value$; break;
    case 14: totalDifficulty = (java.nio.ByteBuffer)value$; break;
    case 15: extraData = (java.nio.ByteBuffer)value$; break;
    case 16: size = (java.nio.ByteBuffer)value$; break;
    case 17: gasLimit = (java.nio.ByteBuffer)value$; break;
    case 18: gasUsed = (java.nio.ByteBuffer)value$; break;
    case 19: txsFees = (java.nio.ByteBuffer)value$; break;
    case 20: blockReward = (java.nio.ByteBuffer)value$; break;
    case 21: uncleReward = (java.nio.ByteBuffer)value$; break;
    case 22: stats = (io.enkrypt.bolt.models.avro.BlockStats)value$; break;
    case 23: transactions = (java.util.List<io.enkrypt.bolt.models.avro.Transaction>)value$; break;
    case 24: uncles = (java.util.List<java.nio.ByteBuffer>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'number' field.
   * @return The block number
   */
  public java.nio.ByteBuffer getNumber() {
    return number;
  }

  /**
   * Sets the value of the 'number' field.
   * The block number
   * @param value the value to set.
   */
  public void setNumber(java.nio.ByteBuffer value) {
    this.number = value;
  }

  /**
   * Gets the value of the 'hash' field.
   * @return Hash of the block
   */
  public java.nio.ByteBuffer getHash() {
    return hash;
  }

  /**
   * Sets the value of the 'hash' field.
   * Hash of the block
   * @param value the value to set.
   */
  public void setHash(java.nio.ByteBuffer value) {
    this.hash = value;
  }

  /**
   * Gets the value of the 'parentHash' field.
   * @return Hash of the parent block
   */
  public java.nio.ByteBuffer getParentHash() {
    return parentHash;
  }

  /**
   * Sets the value of the 'parentHash' field.
   * Hash of the parent block
   * @param value the value to set.
   */
  public void setParentHash(java.nio.ByteBuffer value) {
    this.parentHash = value;
  }

  /**
   * Gets the value of the 'uncle' field.
   * @return Determines if the block is an uncle or not
   */
  public java.lang.Boolean getUncle() {
    return uncle;
  }

  /**
   * Sets the value of the 'uncle' field.
   * Determines if the block is an uncle or not
   * @param value the value to set.
   */
  public void setUncle(java.lang.Boolean value) {
    this.uncle = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return Specifies the status of the block (could be CanonStatTy or SideStatTy)
   */
  public java.lang.Integer getStatus() {
    return status;
  }

  /**
   * Sets the value of the 'status' field.
   * Specifies the status of the block (could be CanonStatTy or SideStatTy)
   * @param value the value to set.
   */
  public void setStatus(java.lang.Integer value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return Unix timestamp for when the block was collated
   */
  public org.joda.time.DateTime getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * Unix timestamp for when the block was collated
   * @param value the value to set.
   */
  public void setTimestamp(org.joda.time.DateTime value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'nonce' field.
   * @return Hash of the generated proof-of-work
   */
  public java.nio.ByteBuffer getNonce() {
    return nonce;
  }

  /**
   * Sets the value of the 'nonce' field.
   * Hash of the generated proof-of-work
   * @param value the value to set.
   */
  public void setNonce(java.nio.ByteBuffer value) {
    this.nonce = value;
  }

  /**
   * Gets the value of the 'mixDigest' field.
   * @return Block header mix digest
   */
  public java.nio.ByteBuffer getMixDigest() {
    return mixDigest;
  }

  /**
   * Sets the value of the 'mixDigest' field.
   * Block header mix digest
   * @param value the value to set.
   */
  public void setMixDigest(java.nio.ByteBuffer value) {
    this.mixDigest = value;
  }

  /**
   * Gets the value of the 'sha3Uncles' field.
   * @return SHA3 of the uncles data in the block
   */
  public java.nio.ByteBuffer getSha3Uncles() {
    return sha3Uncles;
  }

  /**
   * Sets the value of the 'sha3Uncles' field.
   * SHA3 of the uncles data in the block
   * @param value the value to set.
   */
  public void setSha3Uncles(java.nio.ByteBuffer value) {
    this.sha3Uncles = value;
  }

  /**
   * Gets the value of the 'logsBloom' field.
   * @return Bloom filter for the logs of the block
   */
  public java.nio.ByteBuffer getLogsBloom() {
    return logsBloom;
  }

  /**
   * Sets the value of the 'logsBloom' field.
   * Bloom filter for the logs of the block
   * @param value the value to set.
   */
  public void setLogsBloom(java.nio.ByteBuffer value) {
    this.logsBloom = value;
  }

  /**
   * Gets the value of the 'stateRoot' field.
   * @return Root of the final state trie of the block
   */
  public java.nio.ByteBuffer getStateRoot() {
    return stateRoot;
  }

  /**
   * Sets the value of the 'stateRoot' field.
   * Root of the final state trie of the block
   * @param value the value to set.
   */
  public void setStateRoot(java.nio.ByteBuffer value) {
    this.stateRoot = value;
  }

  /**
   * Gets the value of the 'transactionsRoot' field.
   * @return Root of the final transactions trie of the block
   */
  public java.nio.ByteBuffer getTransactionsRoot() {
    return transactionsRoot;
  }

  /**
   * Sets the value of the 'transactionsRoot' field.
   * Root of the final transactions trie of the block
   * @param value the value to set.
   */
  public void setTransactionsRoot(java.nio.ByteBuffer value) {
    this.transactionsRoot = value;
  }

  /**
   * Gets the value of the 'miner' field.
   * @return The address of the beneficiary to whom the mining rewards were given
   */
  public java.nio.ByteBuffer getMiner() {
    return miner;
  }

  /**
   * Sets the value of the 'miner' field.
   * The address of the beneficiary to whom the mining rewards were given
   * @param value the value to set.
   */
  public void setMiner(java.nio.ByteBuffer value) {
    this.miner = value;
  }

  /**
   * Gets the value of the 'difficulty' field.
   * @return Current difficulty for this block
   */
  public java.nio.ByteBuffer getDifficulty() {
    return difficulty;
  }

  /**
   * Sets the value of the 'difficulty' field.
   * Current difficulty for this block
   * @param value the value to set.
   */
  public void setDifficulty(java.nio.ByteBuffer value) {
    this.difficulty = value;
  }

  /**
   * Gets the value of the 'totalDifficulty' field.
   * @return Current total difficulty of the chain until this block
   */
  public java.nio.ByteBuffer getTotalDifficulty() {
    return totalDifficulty;
  }

  /**
   * Sets the value of the 'totalDifficulty' field.
   * Current total difficulty of the chain until this block
   * @param value the value to set.
   */
  public void setTotalDifficulty(java.nio.ByteBuffer value) {
    this.totalDifficulty = value;
  }

  /**
   * Gets the value of the 'extraData' field.
   * @return The extra data field of this block
   */
  public java.nio.ByteBuffer getExtraData() {
    return extraData;
  }

  /**
   * Sets the value of the 'extraData' field.
   * The extra data field of this block
   * @param value the value to set.
   */
  public void setExtraData(java.nio.ByteBuffer value) {
    this.extraData = value;
  }

  /**
   * Gets the value of the 'size' field.
   * @return Integer the size of this block in bytes
   */
  public java.nio.ByteBuffer getSize() {
    return size;
  }

  /**
   * Sets the value of the 'size' field.
   * Integer the size of this block in bytes
   * @param value the value to set.
   */
  public void setSize(java.nio.ByteBuffer value) {
    this.size = value;
  }

  /**
   * Gets the value of the 'gasLimit' field.
   * @return The maximum gas allowed in this block
   */
  public java.nio.ByteBuffer getGasLimit() {
    return gasLimit;
  }

  /**
   * Sets the value of the 'gasLimit' field.
   * The maximum gas allowed in this block
   * @param value the value to set.
   */
  public void setGasLimit(java.nio.ByteBuffer value) {
    this.gasLimit = value;
  }

  /**
   * Gets the value of the 'gasUsed' field.
   * @return The total used gas by all transactions in this block
   */
  public java.nio.ByteBuffer getGasUsed() {
    return gasUsed;
  }

  /**
   * Sets the value of the 'gasUsed' field.
   * The total used gas by all transactions in this block
   * @param value the value to set.
   */
  public void setGasUsed(java.nio.ByteBuffer value) {
    this.gasUsed = value;
  }

  /**
   * Gets the value of the 'txsFees' field.
   * @return Total transaction fees for this block
   */
  public java.nio.ByteBuffer getTxsFees() {
    return txsFees;
  }

  /**
   * Sets the value of the 'txsFees' field.
   * Total transaction fees for this block
   * @param value the value to set.
   */
  public void setTxsFees(java.nio.ByteBuffer value) {
    this.txsFees = value;
  }

  /**
   * Gets the value of the 'blockReward' field.
   * @return Total current block reward
   */
  public java.nio.ByteBuffer getBlockReward() {
    return blockReward;
  }

  /**
   * Sets the value of the 'blockReward' field.
   * Total current block reward
   * @param value the value to set.
   */
  public void setBlockReward(java.nio.ByteBuffer value) {
    this.blockReward = value;
  }

  /**
   * Gets the value of the 'uncleReward' field.
   * @return Total current uncle reward
   */
  public java.nio.ByteBuffer getUncleReward() {
    return uncleReward;
  }

  /**
   * Sets the value of the 'uncleReward' field.
   * Total current uncle reward
   * @param value the value to set.
   */
  public void setUncleReward(java.nio.ByteBuffer value) {
    this.uncleReward = value;
  }

  /**
   * Gets the value of the 'stats' field.
   * @return The value of the 'stats' field.
   */
  public io.enkrypt.bolt.models.avro.BlockStats getStats() {
    return stats;
  }

  /**
   * Sets the value of the 'stats' field.
   * @param value the value to set.
   */
  public void setStats(io.enkrypt.bolt.models.avro.BlockStats value) {
    this.stats = value;
  }

  /**
   * Gets the value of the 'transactions' field.
   * @return Array of transactions
   */
  public java.util.List<io.enkrypt.bolt.models.avro.Transaction> getTransactions() {
    return transactions;
  }

  /**
   * Sets the value of the 'transactions' field.
   * Array of transactions
   * @param value the value to set.
   */
  public void setTransactions(java.util.List<io.enkrypt.bolt.models.avro.Transaction> value) {
    this.transactions = value;
  }

  /**
   * Gets the value of the 'uncles' field.
   * @return Array of uncle hashes
   */
  public java.util.List<java.nio.ByteBuffer> getUncles() {
    return uncles;
  }

  /**
   * Sets the value of the 'uncles' field.
   * Array of uncle hashes
   * @param value the value to set.
   */
  public void setUncles(java.util.List<java.nio.ByteBuffer> value) {
    this.uncles = value;
  }

  /**
   * Creates a new Block RecordBuilder.
   * @return A new Block RecordBuilder
   */
  public static io.enkrypt.bolt.models.avro.Block.Builder newBuilder() {
    return new io.enkrypt.bolt.models.avro.Block.Builder();
  }

  /**
   * Creates a new Block RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Block RecordBuilder
   */
  public static io.enkrypt.bolt.models.avro.Block.Builder newBuilder(io.enkrypt.bolt.models.avro.Block.Builder other) {
    return new io.enkrypt.bolt.models.avro.Block.Builder(other);
  }

  /**
   * Creates a new Block RecordBuilder by copying an existing Block instance.
   * @param other The existing instance to copy.
   * @return A new Block RecordBuilder
   */
  public static io.enkrypt.bolt.models.avro.Block.Builder newBuilder(io.enkrypt.bolt.models.avro.Block other) {
    return new io.enkrypt.bolt.models.avro.Block.Builder(other);
  }

  /**
   * RecordBuilder for Block instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Block>
    implements org.apache.avro.data.RecordBuilder<Block> {

    /** The block number */
    private java.nio.ByteBuffer number;
    /** Hash of the block */
    private java.nio.ByteBuffer hash;
    /** Hash of the parent block */
    private java.nio.ByteBuffer parentHash;
    /** Determines if the block is an uncle or not */
    private boolean uncle;
    /** Specifies the status of the block (could be CanonStatTy or SideStatTy) */
    private int status;
    /** Unix timestamp for when the block was collated */
    private org.joda.time.DateTime timestamp;
    /** Hash of the generated proof-of-work */
    private java.nio.ByteBuffer nonce;
    /** Block header mix digest */
    private java.nio.ByteBuffer mixDigest;
    /** SHA3 of the uncles data in the block */
    private java.nio.ByteBuffer sha3Uncles;
    /** Bloom filter for the logs of the block */
    private java.nio.ByteBuffer logsBloom;
    /** Root of the final state trie of the block */
    private java.nio.ByteBuffer stateRoot;
    /** Root of the final transactions trie of the block */
    private java.nio.ByteBuffer transactionsRoot;
    /** The address of the beneficiary to whom the mining rewards were given */
    private java.nio.ByteBuffer miner;
    /** Current difficulty for this block */
    private java.nio.ByteBuffer difficulty;
    /** Current total difficulty of the chain until this block */
    private java.nio.ByteBuffer totalDifficulty;
    /** The extra data field of this block */
    private java.nio.ByteBuffer extraData;
    /** Integer the size of this block in bytes */
    private java.nio.ByteBuffer size;
    /** The maximum gas allowed in this block */
    private java.nio.ByteBuffer gasLimit;
    /** The total used gas by all transactions in this block */
    private java.nio.ByteBuffer gasUsed;
    /** Total transaction fees for this block */
    private java.nio.ByteBuffer txsFees;
    /** Total current block reward */
    private java.nio.ByteBuffer blockReward;
    /** Total current uncle reward */
    private java.nio.ByteBuffer uncleReward;
    private io.enkrypt.bolt.models.avro.BlockStats stats;
    private io.enkrypt.bolt.models.avro.BlockStats.Builder statsBuilder;
    /** Array of transactions */
    private java.util.List<io.enkrypt.bolt.models.avro.Transaction> transactions;
    /** Array of uncle hashes */
    private java.util.List<java.nio.ByteBuffer> uncles;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.enkrypt.bolt.models.avro.Block.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.number)) {
        this.number = data().deepCopy(fields()[0].schema(), other.number);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.hash)) {
        this.hash = data().deepCopy(fields()[1].schema(), other.hash);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.parentHash)) {
        this.parentHash = data().deepCopy(fields()[2].schema(), other.parentHash);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.uncle)) {
        this.uncle = data().deepCopy(fields()[3].schema(), other.uncle);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.status)) {
        this.status = data().deepCopy(fields()[4].schema(), other.status);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[5].schema(), other.timestamp);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.nonce)) {
        this.nonce = data().deepCopy(fields()[6].schema(), other.nonce);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.mixDigest)) {
        this.mixDigest = data().deepCopy(fields()[7].schema(), other.mixDigest);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.sha3Uncles)) {
        this.sha3Uncles = data().deepCopy(fields()[8].schema(), other.sha3Uncles);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.logsBloom)) {
        this.logsBloom = data().deepCopy(fields()[9].schema(), other.logsBloom);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.stateRoot)) {
        this.stateRoot = data().deepCopy(fields()[10].schema(), other.stateRoot);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.transactionsRoot)) {
        this.transactionsRoot = data().deepCopy(fields()[11].schema(), other.transactionsRoot);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.miner)) {
        this.miner = data().deepCopy(fields()[12].schema(), other.miner);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.difficulty)) {
        this.difficulty = data().deepCopy(fields()[13].schema(), other.difficulty);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.totalDifficulty)) {
        this.totalDifficulty = data().deepCopy(fields()[14].schema(), other.totalDifficulty);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.extraData)) {
        this.extraData = data().deepCopy(fields()[15].schema(), other.extraData);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.size)) {
        this.size = data().deepCopy(fields()[16].schema(), other.size);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.gasLimit)) {
        this.gasLimit = data().deepCopy(fields()[17].schema(), other.gasLimit);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.gasUsed)) {
        this.gasUsed = data().deepCopy(fields()[18].schema(), other.gasUsed);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.txsFees)) {
        this.txsFees = data().deepCopy(fields()[19].schema(), other.txsFees);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.blockReward)) {
        this.blockReward = data().deepCopy(fields()[20].schema(), other.blockReward);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.uncleReward)) {
        this.uncleReward = data().deepCopy(fields()[21].schema(), other.uncleReward);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.stats)) {
        this.stats = data().deepCopy(fields()[22].schema(), other.stats);
        fieldSetFlags()[22] = true;
      }
      if (other.hasStatsBuilder()) {
        this.statsBuilder = io.enkrypt.bolt.models.avro.BlockStats.newBuilder(other.getStatsBuilder());
      }
      if (isValidValue(fields()[23], other.transactions)) {
        this.transactions = data().deepCopy(fields()[23].schema(), other.transactions);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.uncles)) {
        this.uncles = data().deepCopy(fields()[24].schema(), other.uncles);
        fieldSetFlags()[24] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Block instance
     * @param other The existing instance to copy.
     */
    private Builder(io.enkrypt.bolt.models.avro.Block other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.number)) {
        this.number = data().deepCopy(fields()[0].schema(), other.number);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.hash)) {
        this.hash = data().deepCopy(fields()[1].schema(), other.hash);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.parentHash)) {
        this.parentHash = data().deepCopy(fields()[2].schema(), other.parentHash);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.uncle)) {
        this.uncle = data().deepCopy(fields()[3].schema(), other.uncle);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.status)) {
        this.status = data().deepCopy(fields()[4].schema(), other.status);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[5].schema(), other.timestamp);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.nonce)) {
        this.nonce = data().deepCopy(fields()[6].schema(), other.nonce);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.mixDigest)) {
        this.mixDigest = data().deepCopy(fields()[7].schema(), other.mixDigest);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.sha3Uncles)) {
        this.sha3Uncles = data().deepCopy(fields()[8].schema(), other.sha3Uncles);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.logsBloom)) {
        this.logsBloom = data().deepCopy(fields()[9].schema(), other.logsBloom);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.stateRoot)) {
        this.stateRoot = data().deepCopy(fields()[10].schema(), other.stateRoot);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.transactionsRoot)) {
        this.transactionsRoot = data().deepCopy(fields()[11].schema(), other.transactionsRoot);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.miner)) {
        this.miner = data().deepCopy(fields()[12].schema(), other.miner);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.difficulty)) {
        this.difficulty = data().deepCopy(fields()[13].schema(), other.difficulty);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.totalDifficulty)) {
        this.totalDifficulty = data().deepCopy(fields()[14].schema(), other.totalDifficulty);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.extraData)) {
        this.extraData = data().deepCopy(fields()[15].schema(), other.extraData);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.size)) {
        this.size = data().deepCopy(fields()[16].schema(), other.size);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.gasLimit)) {
        this.gasLimit = data().deepCopy(fields()[17].schema(), other.gasLimit);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.gasUsed)) {
        this.gasUsed = data().deepCopy(fields()[18].schema(), other.gasUsed);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.txsFees)) {
        this.txsFees = data().deepCopy(fields()[19].schema(), other.txsFees);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.blockReward)) {
        this.blockReward = data().deepCopy(fields()[20].schema(), other.blockReward);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.uncleReward)) {
        this.uncleReward = data().deepCopy(fields()[21].schema(), other.uncleReward);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.stats)) {
        this.stats = data().deepCopy(fields()[22].schema(), other.stats);
        fieldSetFlags()[22] = true;
      }
      this.statsBuilder = null;
      if (isValidValue(fields()[23], other.transactions)) {
        this.transactions = data().deepCopy(fields()[23].schema(), other.transactions);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.uncles)) {
        this.uncles = data().deepCopy(fields()[24].schema(), other.uncles);
        fieldSetFlags()[24] = true;
      }
    }

    /**
      * Gets the value of the 'number' field.
      * The block number
      * @return The value.
      */
    public java.nio.ByteBuffer getNumber() {
      return number;
    }

    /**
      * Sets the value of the 'number' field.
      * The block number
      * @param value The value of 'number'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Block.Builder setNumber(java.nio.ByteBuffer value) {
      validate(fields()[0], value);
      this.number = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'number' field has been set.
      * The block number
      * @return True if the 'number' field has been set, false otherwise.
      */
    public boolean hasNumber() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'number' field.
      * The block number
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Block.Builder clearNumber() {
      number = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'hash' field.
      * Hash of the block
      * @return The value.
      */
    public java.nio.ByteBuffer getHash() {
      return hash;
    }

    /**
      * Sets the value of the 'hash' field.
      * Hash of the block
      * @param value The value of 'hash'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Block.Builder setHash(java.nio.ByteBuffer value) {
      validate(fields()[1], value);
      this.hash = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'hash' field has been set.
      * Hash of the block
      * @return True if the 'hash' field has been set, false otherwise.
      */
    public boolean hasHash() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'hash' field.
      * Hash of the block
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Block.Builder clearHash() {
      hash = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'parentHash' field.
      * Hash of the parent block
      * @return The value.
      */
    public java.nio.ByteBuffer getParentHash() {
      return parentHash;
    }

    /**
      * Sets the value of the 'parentHash' field.
      * Hash of the parent block
      * @param value The value of 'parentHash'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Block.Builder setParentHash(java.nio.ByteBuffer value) {
      validate(fields()[2], value);
      this.parentHash = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'parentHash' field has been set.
      * Hash of the parent block
      * @return True if the 'parentHash' field has been set, false otherwise.
      */
    public boolean hasParentHash() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'parentHash' field.
      * Hash of the parent block
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Block.Builder clearParentHash() {
      parentHash = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'uncle' field.
      * Determines if the block is an uncle or not
      * @return The value.
      */
    public java.lang.Boolean getUncle() {
      return uncle;
    }

    /**
      * Sets the value of the 'uncle' field.
      * Determines if the block is an uncle or not
      * @param value The value of 'uncle'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Block.Builder setUncle(boolean value) {
      validate(fields()[3], value);
      this.uncle = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'uncle' field has been set.
      * Determines if the block is an uncle or not
      * @return True if the 'uncle' field has been set, false otherwise.
      */
    public boolean hasUncle() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'uncle' field.
      * Determines if the block is an uncle or not
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Block.Builder clearUncle() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * Specifies the status of the block (could be CanonStatTy or SideStatTy)
      * @return The value.
      */
    public java.lang.Integer getStatus() {
      return status;
    }

    /**
      * Sets the value of the 'status' field.
      * Specifies the status of the block (could be CanonStatTy or SideStatTy)
      * @param value The value of 'status'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Block.Builder setStatus(int value) {
      validate(fields()[4], value);
      this.status = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * Specifies the status of the block (could be CanonStatTy or SideStatTy)
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'status' field.
      * Specifies the status of the block (could be CanonStatTy or SideStatTy)
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Block.Builder clearStatus() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * Unix timestamp for when the block was collated
      * @return The value.
      */
    public org.joda.time.DateTime getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * Unix timestamp for when the block was collated
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Block.Builder setTimestamp(org.joda.time.DateTime value) {
      validate(fields()[5], value);
      this.timestamp = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * Unix timestamp for when the block was collated
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * Unix timestamp for when the block was collated
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Block.Builder clearTimestamp() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'nonce' field.
      * Hash of the generated proof-of-work
      * @return The value.
      */
    public java.nio.ByteBuffer getNonce() {
      return nonce;
    }

    /**
      * Sets the value of the 'nonce' field.
      * Hash of the generated proof-of-work
      * @param value The value of 'nonce'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Block.Builder setNonce(java.nio.ByteBuffer value) {
      validate(fields()[6], value);
      this.nonce = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'nonce' field has been set.
      * Hash of the generated proof-of-work
      * @return True if the 'nonce' field has been set, false otherwise.
      */
    public boolean hasNonce() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'nonce' field.
      * Hash of the generated proof-of-work
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Block.Builder clearNonce() {
      nonce = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'mixDigest' field.
      * Block header mix digest
      * @return The value.
      */
    public java.nio.ByteBuffer getMixDigest() {
      return mixDigest;
    }

    /**
      * Sets the value of the 'mixDigest' field.
      * Block header mix digest
      * @param value The value of 'mixDigest'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Block.Builder setMixDigest(java.nio.ByteBuffer value) {
      validate(fields()[7], value);
      this.mixDigest = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'mixDigest' field has been set.
      * Block header mix digest
      * @return True if the 'mixDigest' field has been set, false otherwise.
      */
    public boolean hasMixDigest() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'mixDigest' field.
      * Block header mix digest
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Block.Builder clearMixDigest() {
      mixDigest = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'sha3Uncles' field.
      * SHA3 of the uncles data in the block
      * @return The value.
      */
    public java.nio.ByteBuffer getSha3Uncles() {
      return sha3Uncles;
    }

    /**
      * Sets the value of the 'sha3Uncles' field.
      * SHA3 of the uncles data in the block
      * @param value The value of 'sha3Uncles'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Block.Builder setSha3Uncles(java.nio.ByteBuffer value) {
      validate(fields()[8], value);
      this.sha3Uncles = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'sha3Uncles' field has been set.
      * SHA3 of the uncles data in the block
      * @return True if the 'sha3Uncles' field has been set, false otherwise.
      */
    public boolean hasSha3Uncles() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'sha3Uncles' field.
      * SHA3 of the uncles data in the block
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Block.Builder clearSha3Uncles() {
      sha3Uncles = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'logsBloom' field.
      * Bloom filter for the logs of the block
      * @return The value.
      */
    public java.nio.ByteBuffer getLogsBloom() {
      return logsBloom;
    }

    /**
      * Sets the value of the 'logsBloom' field.
      * Bloom filter for the logs of the block
      * @param value The value of 'logsBloom'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Block.Builder setLogsBloom(java.nio.ByteBuffer value) {
      validate(fields()[9], value);
      this.logsBloom = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'logsBloom' field has been set.
      * Bloom filter for the logs of the block
      * @return True if the 'logsBloom' field has been set, false otherwise.
      */
    public boolean hasLogsBloom() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'logsBloom' field.
      * Bloom filter for the logs of the block
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Block.Builder clearLogsBloom() {
      logsBloom = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'stateRoot' field.
      * Root of the final state trie of the block
      * @return The value.
      */
    public java.nio.ByteBuffer getStateRoot() {
      return stateRoot;
    }

    /**
      * Sets the value of the 'stateRoot' field.
      * Root of the final state trie of the block
      * @param value The value of 'stateRoot'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Block.Builder setStateRoot(java.nio.ByteBuffer value) {
      validate(fields()[10], value);
      this.stateRoot = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'stateRoot' field has been set.
      * Root of the final state trie of the block
      * @return True if the 'stateRoot' field has been set, false otherwise.
      */
    public boolean hasStateRoot() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'stateRoot' field.
      * Root of the final state trie of the block
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Block.Builder clearStateRoot() {
      stateRoot = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'transactionsRoot' field.
      * Root of the final transactions trie of the block
      * @return The value.
      */
    public java.nio.ByteBuffer getTransactionsRoot() {
      return transactionsRoot;
    }

    /**
      * Sets the value of the 'transactionsRoot' field.
      * Root of the final transactions trie of the block
      * @param value The value of 'transactionsRoot'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Block.Builder setTransactionsRoot(java.nio.ByteBuffer value) {
      validate(fields()[11], value);
      this.transactionsRoot = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionsRoot' field has been set.
      * Root of the final transactions trie of the block
      * @return True if the 'transactionsRoot' field has been set, false otherwise.
      */
    public boolean hasTransactionsRoot() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'transactionsRoot' field.
      * Root of the final transactions trie of the block
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Block.Builder clearTransactionsRoot() {
      transactionsRoot = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'miner' field.
      * The address of the beneficiary to whom the mining rewards were given
      * @return The value.
      */
    public java.nio.ByteBuffer getMiner() {
      return miner;
    }

    /**
      * Sets the value of the 'miner' field.
      * The address of the beneficiary to whom the mining rewards were given
      * @param value The value of 'miner'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Block.Builder setMiner(java.nio.ByteBuffer value) {
      validate(fields()[12], value);
      this.miner = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'miner' field has been set.
      * The address of the beneficiary to whom the mining rewards were given
      * @return True if the 'miner' field has been set, false otherwise.
      */
    public boolean hasMiner() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'miner' field.
      * The address of the beneficiary to whom the mining rewards were given
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Block.Builder clearMiner() {
      miner = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'difficulty' field.
      * Current difficulty for this block
      * @return The value.
      */
    public java.nio.ByteBuffer getDifficulty() {
      return difficulty;
    }

    /**
      * Sets the value of the 'difficulty' field.
      * Current difficulty for this block
      * @param value The value of 'difficulty'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Block.Builder setDifficulty(java.nio.ByteBuffer value) {
      validate(fields()[13], value);
      this.difficulty = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'difficulty' field has been set.
      * Current difficulty for this block
      * @return True if the 'difficulty' field has been set, false otherwise.
      */
    public boolean hasDifficulty() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'difficulty' field.
      * Current difficulty for this block
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Block.Builder clearDifficulty() {
      difficulty = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalDifficulty' field.
      * Current total difficulty of the chain until this block
      * @return The value.
      */
    public java.nio.ByteBuffer getTotalDifficulty() {
      return totalDifficulty;
    }

    /**
      * Sets the value of the 'totalDifficulty' field.
      * Current total difficulty of the chain until this block
      * @param value The value of 'totalDifficulty'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Block.Builder setTotalDifficulty(java.nio.ByteBuffer value) {
      validate(fields()[14], value);
      this.totalDifficulty = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'totalDifficulty' field has been set.
      * Current total difficulty of the chain until this block
      * @return True if the 'totalDifficulty' field has been set, false otherwise.
      */
    public boolean hasTotalDifficulty() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'totalDifficulty' field.
      * Current total difficulty of the chain until this block
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Block.Builder clearTotalDifficulty() {
      totalDifficulty = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'extraData' field.
      * The extra data field of this block
      * @return The value.
      */
    public java.nio.ByteBuffer getExtraData() {
      return extraData;
    }

    /**
      * Sets the value of the 'extraData' field.
      * The extra data field of this block
      * @param value The value of 'extraData'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Block.Builder setExtraData(java.nio.ByteBuffer value) {
      validate(fields()[15], value);
      this.extraData = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'extraData' field has been set.
      * The extra data field of this block
      * @return True if the 'extraData' field has been set, false otherwise.
      */
    public boolean hasExtraData() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'extraData' field.
      * The extra data field of this block
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Block.Builder clearExtraData() {
      extraData = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'size' field.
      * Integer the size of this block in bytes
      * @return The value.
      */
    public java.nio.ByteBuffer getSize() {
      return size;
    }

    /**
      * Sets the value of the 'size' field.
      * Integer the size of this block in bytes
      * @param value The value of 'size'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Block.Builder setSize(java.nio.ByteBuffer value) {
      validate(fields()[16], value);
      this.size = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'size' field has been set.
      * Integer the size of this block in bytes
      * @return True if the 'size' field has been set, false otherwise.
      */
    public boolean hasSize() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'size' field.
      * Integer the size of this block in bytes
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Block.Builder clearSize() {
      size = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'gasLimit' field.
      * The maximum gas allowed in this block
      * @return The value.
      */
    public java.nio.ByteBuffer getGasLimit() {
      return gasLimit;
    }

    /**
      * Sets the value of the 'gasLimit' field.
      * The maximum gas allowed in this block
      * @param value The value of 'gasLimit'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Block.Builder setGasLimit(java.nio.ByteBuffer value) {
      validate(fields()[17], value);
      this.gasLimit = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'gasLimit' field has been set.
      * The maximum gas allowed in this block
      * @return True if the 'gasLimit' field has been set, false otherwise.
      */
    public boolean hasGasLimit() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'gasLimit' field.
      * The maximum gas allowed in this block
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Block.Builder clearGasLimit() {
      gasLimit = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'gasUsed' field.
      * The total used gas by all transactions in this block
      * @return The value.
      */
    public java.nio.ByteBuffer getGasUsed() {
      return gasUsed;
    }

    /**
      * Sets the value of the 'gasUsed' field.
      * The total used gas by all transactions in this block
      * @param value The value of 'gasUsed'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Block.Builder setGasUsed(java.nio.ByteBuffer value) {
      validate(fields()[18], value);
      this.gasUsed = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'gasUsed' field has been set.
      * The total used gas by all transactions in this block
      * @return True if the 'gasUsed' field has been set, false otherwise.
      */
    public boolean hasGasUsed() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'gasUsed' field.
      * The total used gas by all transactions in this block
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Block.Builder clearGasUsed() {
      gasUsed = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'txsFees' field.
      * Total transaction fees for this block
      * @return The value.
      */
    public java.nio.ByteBuffer getTxsFees() {
      return txsFees;
    }

    /**
      * Sets the value of the 'txsFees' field.
      * Total transaction fees for this block
      * @param value The value of 'txsFees'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Block.Builder setTxsFees(java.nio.ByteBuffer value) {
      validate(fields()[19], value);
      this.txsFees = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'txsFees' field has been set.
      * Total transaction fees for this block
      * @return True if the 'txsFees' field has been set, false otherwise.
      */
    public boolean hasTxsFees() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'txsFees' field.
      * Total transaction fees for this block
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Block.Builder clearTxsFees() {
      txsFees = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'blockReward' field.
      * Total current block reward
      * @return The value.
      */
    public java.nio.ByteBuffer getBlockReward() {
      return blockReward;
    }

    /**
      * Sets the value of the 'blockReward' field.
      * Total current block reward
      * @param value The value of 'blockReward'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Block.Builder setBlockReward(java.nio.ByteBuffer value) {
      validate(fields()[20], value);
      this.blockReward = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'blockReward' field has been set.
      * Total current block reward
      * @return True if the 'blockReward' field has been set, false otherwise.
      */
    public boolean hasBlockReward() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'blockReward' field.
      * Total current block reward
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Block.Builder clearBlockReward() {
      blockReward = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    /**
      * Gets the value of the 'uncleReward' field.
      * Total current uncle reward
      * @return The value.
      */
    public java.nio.ByteBuffer getUncleReward() {
      return uncleReward;
    }

    /**
      * Sets the value of the 'uncleReward' field.
      * Total current uncle reward
      * @param value The value of 'uncleReward'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Block.Builder setUncleReward(java.nio.ByteBuffer value) {
      validate(fields()[21], value);
      this.uncleReward = value;
      fieldSetFlags()[21] = true;
      return this;
    }

    /**
      * Checks whether the 'uncleReward' field has been set.
      * Total current uncle reward
      * @return True if the 'uncleReward' field has been set, false otherwise.
      */
    public boolean hasUncleReward() {
      return fieldSetFlags()[21];
    }


    /**
      * Clears the value of the 'uncleReward' field.
      * Total current uncle reward
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Block.Builder clearUncleReward() {
      uncleReward = null;
      fieldSetFlags()[21] = false;
      return this;
    }

    /**
      * Gets the value of the 'stats' field.
      * @return The value.
      */
    public io.enkrypt.bolt.models.avro.BlockStats getStats() {
      return stats;
    }

    /**
      * Sets the value of the 'stats' field.
      * @param value The value of 'stats'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Block.Builder setStats(io.enkrypt.bolt.models.avro.BlockStats value) {
      validate(fields()[22], value);
      this.statsBuilder = null;
      this.stats = value;
      fieldSetFlags()[22] = true;
      return this;
    }

    /**
      * Checks whether the 'stats' field has been set.
      * @return True if the 'stats' field has been set, false otherwise.
      */
    public boolean hasStats() {
      return fieldSetFlags()[22];
    }

    /**
     * Gets the Builder instance for the 'stats' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.enkrypt.bolt.models.avro.BlockStats.Builder getStatsBuilder() {
      if (statsBuilder == null) {
        if (hasStats()) {
          setStatsBuilder(io.enkrypt.bolt.models.avro.BlockStats.newBuilder(stats));
        } else {
          setStatsBuilder(io.enkrypt.bolt.models.avro.BlockStats.newBuilder());
        }
      }
      return statsBuilder;
    }

    /**
     * Sets the Builder instance for the 'stats' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public io.enkrypt.bolt.models.avro.Block.Builder setStatsBuilder(io.enkrypt.bolt.models.avro.BlockStats.Builder value) {
      clearStats();
      statsBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'stats' field has an active Builder instance
     * @return True if the 'stats' field has an active Builder instance
     */
    public boolean hasStatsBuilder() {
      return statsBuilder != null;
    }

    /**
      * Clears the value of the 'stats' field.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Block.Builder clearStats() {
      stats = null;
      statsBuilder = null;
      fieldSetFlags()[22] = false;
      return this;
    }

    /**
      * Gets the value of the 'transactions' field.
      * Array of transactions
      * @return The value.
      */
    public java.util.List<io.enkrypt.bolt.models.avro.Transaction> getTransactions() {
      return transactions;
    }

    /**
      * Sets the value of the 'transactions' field.
      * Array of transactions
      * @param value The value of 'transactions'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Block.Builder setTransactions(java.util.List<io.enkrypt.bolt.models.avro.Transaction> value) {
      validate(fields()[23], value);
      this.transactions = value;
      fieldSetFlags()[23] = true;
      return this;
    }

    /**
      * Checks whether the 'transactions' field has been set.
      * Array of transactions
      * @return True if the 'transactions' field has been set, false otherwise.
      */
    public boolean hasTransactions() {
      return fieldSetFlags()[23];
    }


    /**
      * Clears the value of the 'transactions' field.
      * Array of transactions
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Block.Builder clearTransactions() {
      transactions = null;
      fieldSetFlags()[23] = false;
      return this;
    }

    /**
      * Gets the value of the 'uncles' field.
      * Array of uncle hashes
      * @return The value.
      */
    public java.util.List<java.nio.ByteBuffer> getUncles() {
      return uncles;
    }

    /**
      * Sets the value of the 'uncles' field.
      * Array of uncle hashes
      * @param value The value of 'uncles'.
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Block.Builder setUncles(java.util.List<java.nio.ByteBuffer> value) {
      validate(fields()[24], value);
      this.uncles = value;
      fieldSetFlags()[24] = true;
      return this;
    }

    /**
      * Checks whether the 'uncles' field has been set.
      * Array of uncle hashes
      * @return True if the 'uncles' field has been set, false otherwise.
      */
    public boolean hasUncles() {
      return fieldSetFlags()[24];
    }


    /**
      * Clears the value of the 'uncles' field.
      * Array of uncle hashes
      * @return This builder.
      */
    public io.enkrypt.bolt.models.avro.Block.Builder clearUncles() {
      uncles = null;
      fieldSetFlags()[24] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Block build() {
      try {
        Block record = new Block();
        record.number = fieldSetFlags()[0] ? this.number : (java.nio.ByteBuffer) defaultValue(fields()[0], record.getConversion(0));
        record.hash = fieldSetFlags()[1] ? this.hash : (java.nio.ByteBuffer) defaultValue(fields()[1], record.getConversion(1));
        record.parentHash = fieldSetFlags()[2] ? this.parentHash : (java.nio.ByteBuffer) defaultValue(fields()[2], record.getConversion(2));
        record.uncle = fieldSetFlags()[3] ? this.uncle : (java.lang.Boolean) defaultValue(fields()[3], record.getConversion(3));
        record.status = fieldSetFlags()[4] ? this.status : (java.lang.Integer) defaultValue(fields()[4], record.getConversion(4));
        record.timestamp = fieldSetFlags()[5] ? this.timestamp : (org.joda.time.DateTime) defaultValue(fields()[5], record.getConversion(5));
        record.nonce = fieldSetFlags()[6] ? this.nonce : (java.nio.ByteBuffer) defaultValue(fields()[6], record.getConversion(6));
        record.mixDigest = fieldSetFlags()[7] ? this.mixDigest : (java.nio.ByteBuffer) defaultValue(fields()[7], record.getConversion(7));
        record.sha3Uncles = fieldSetFlags()[8] ? this.sha3Uncles : (java.nio.ByteBuffer) defaultValue(fields()[8], record.getConversion(8));
        record.logsBloom = fieldSetFlags()[9] ? this.logsBloom : (java.nio.ByteBuffer) defaultValue(fields()[9], record.getConversion(9));
        record.stateRoot = fieldSetFlags()[10] ? this.stateRoot : (java.nio.ByteBuffer) defaultValue(fields()[10], record.getConversion(10));
        record.transactionsRoot = fieldSetFlags()[11] ? this.transactionsRoot : (java.nio.ByteBuffer) defaultValue(fields()[11], record.getConversion(11));
        record.miner = fieldSetFlags()[12] ? this.miner : (java.nio.ByteBuffer) defaultValue(fields()[12], record.getConversion(12));
        record.difficulty = fieldSetFlags()[13] ? this.difficulty : (java.nio.ByteBuffer) defaultValue(fields()[13], record.getConversion(13));
        record.totalDifficulty = fieldSetFlags()[14] ? this.totalDifficulty : (java.nio.ByteBuffer) defaultValue(fields()[14], record.getConversion(14));
        record.extraData = fieldSetFlags()[15] ? this.extraData : (java.nio.ByteBuffer) defaultValue(fields()[15], record.getConversion(15));
        record.size = fieldSetFlags()[16] ? this.size : (java.nio.ByteBuffer) defaultValue(fields()[16], record.getConversion(16));
        record.gasLimit = fieldSetFlags()[17] ? this.gasLimit : (java.nio.ByteBuffer) defaultValue(fields()[17], record.getConversion(17));
        record.gasUsed = fieldSetFlags()[18] ? this.gasUsed : (java.nio.ByteBuffer) defaultValue(fields()[18], record.getConversion(18));
        record.txsFees = fieldSetFlags()[19] ? this.txsFees : (java.nio.ByteBuffer) defaultValue(fields()[19], record.getConversion(19));
        record.blockReward = fieldSetFlags()[20] ? this.blockReward : (java.nio.ByteBuffer) defaultValue(fields()[20], record.getConversion(20));
        record.uncleReward = fieldSetFlags()[21] ? this.uncleReward : (java.nio.ByteBuffer) defaultValue(fields()[21], record.getConversion(21));
        if (statsBuilder != null) {
          record.stats = this.statsBuilder.build();
        } else {
          record.stats = fieldSetFlags()[22] ? this.stats : (io.enkrypt.bolt.models.avro.BlockStats) defaultValue(fields()[22], record.getConversion(22));
        }
        record.transactions = fieldSetFlags()[23] ? this.transactions : (java.util.List<io.enkrypt.bolt.models.avro.Transaction>) defaultValue(fields()[23], record.getConversion(23));
        record.uncles = fieldSetFlags()[24] ? this.uncles : (java.util.List<java.nio.ByteBuffer>) defaultValue(fields()[24], record.getConversion(24));
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Block>
    WRITER$ = (org.apache.avro.io.DatumWriter<Block>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Block>
    READER$ = (org.apache.avro.io.DatumReader<Block>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
